{
    "active_user_count": 268, 
    "advertiser_category": null, 
    "audience_target": "programming,technology", 
    "avg_comment_num_per_submission": 14, 
    "avg_submission_score": 29, 
    "collection_range_end_unix_timestamp": 1506816000, 
    "collection_range_end_utc": "2017-10-01 00:00:00", 
    "collection_range_start_unix_timestamp": 1504224000, 
    "collection_range_start_utc": "2017-09-01 00:00:00", 
    "description": "**The [Haskell programming language](http://haskell.org) community.**\n\nDaily news and info about all things **Haskell** related: practical stuff, theory, types, libraries, jobs, patches, releases, events and conferences and more...\n\n * **[Download Haskell](http://hackage.haskell.org/platform)**\n * **[Try Haskell](http://tryhaskell.org/) in your browser**\n * **[status.haskell.org](http://status.haskell.org)**\n\n-----------------------------------------------------\n\n * **[Community Guidelines](http://www.reddit.com/r/haskell/comments/j8df0/moderator_guidelines_thems_the_rules/)**\n\n-----------------------------------------------------\n\n**Other community locations:**\n\n * [#haskell IRC channel](http://haskell.org/haskellwiki/IRC_channel)\n * [Planet Haskell](http://planet.haskell.org/) blog aggregator\n * [Follow Haskell on Twitter](http://twitter.com/reddit_haskell)\n * [Haskell mailing lists](http://www.haskell.org/haskellwiki/Mailing_lists)\n * [NYC Haskell Meetup videos] (https://www.youtube.com/channel/UCzNYHE7Kj6pBqq5h8LG9Zcg)\n * [Haskell Discord Channel](https://discord.gg/FvT2Y5N)\n\n**Professional resources:**\n\n * [The Industrial Haskell Group](http://industry.haskell.org/)\n * [Hire Haskell programmers](http://www.haskellers.com/)\n * [The Commercial Users of FP](http://cufp.org)\n\n**Learning material:**\n\n * [Ask a question on Haskell Stack Overflow](http://stackoverflow.com/questions/tagged/haskell)\n * [Learn You a Haskell](http://learnyouahaskell.com/)\n * [Real World Haskell](http://book.realworldhaskell.org)\n * [School of Haskell](https://www.schoolofhaskell.com/)\n * [Haskell Wikibook](https://en.wikibooks.org/wiki/Haskell)\n\n**Haskell development:**\n\n * [Hackage: Haskell Libraries](http://hackage.haskell.org)\n * [New Haskell Project Ideas](http://www.reddit.com/r/haskell_proposals)\n\n**Other Subreddits:**\n\n * /r/haskellquestions\n * /r/haskelltil\n * /r/haskell_jp\n\n**Subreddit Stylesheet Source**\n\n * [subreddit theme](https://github.com/evanrelf/r-haskell-theme)\n", 
    "display_name": "haskell", 
    "domain_occurrences": {
        "arxiv.org": 1, 
        "avoltus.com": 1, 
        "awalterschulze.github.io": 1, 
        "bitemyapp.com": 1, 
        "blog.hustlr.in": 1, 
        "blog.qfpl.io": 6, 
        "blog.vmchale.com": 2, 
        "blogs.intevation.de": 1, 
        "bobkonf.de": 1, 
        "chrispenner.ca": 1, 
        "code.facebook.com": 1, 
        "coldwa.st": 1, 
        "deliquus.com": 1, 
        "deque.blog": 2, 
        "fgaz.me": 1, 
        "fpcomplete.com": 2, 
        "functionalgeekery.com": 1, 
        "gist.github.com": 3, 
        "github.com": 15, 
        "goc.vivint.com": 1, 
        "greenlab.di.uminho.pt": 1, 
        "hackage.haskell.org": 4, 
        "hal2017.softbase.org": 1, 
        "haskell.fun": 4, 
        "haskellforall.com": 1, 
        "haskellweekly.news": 4, 
        "joachim-breitner.de": 1, 
        "jyp.github.io": 1, 
        "kcsongor.github.io": 1, 
        "languagengine.co": 1, 
        "lettier.github.io": 1, 
        "lukas.convnet.de": 1, 
        "mail.haskell.org": 1, 
        "markkarpov.com": 1, 
        "medium.com": 3, 
        "meetu.ps": 1, 
        "michaelburge.us": 2, 
        "morphism.tech": 1, 
        "neilmitchell.blogspot.com": 1, 
        "news.uchicago.edu": 1, 
        "okmij.org": 1, 
        "parsonsmatt.org": 3, 
        "pepeiborra.wordpress.com": 1, 
        "reasonablypolymorphic.com": 1, 
        "rickyhan.com": 1, 
        "samcoope.com": 1, 
        "self.haskell": 121, 
        "stackoverflow.blog": 1, 
        "stackoverflow.com": 1, 
        "summer.haskell.org": 1, 
        "tech.frontrowed.com": 2, 
        "tweag.io": 4, 
        "twitter.com": 2, 
        "vadosware.io": 1, 
        "well-typed.com": 1, 
        "yi-editor.github.io": 1, 
        "youtu.be": 2, 
        "youtube.com": 5
    }, 
    "id": "2qh36", 
    "num_external_website_posts": 105, 
    "num_text_posts": 121, 
    "public_description": "", 
    "submissions": [
        {
            "author": "hmemcpy", 
            "created_utc": 1506767273.0, 
            "domain": "self.haskell", 
            "id": "73e7l3", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 28, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73e7l3/i_made_bartosz_milewskis_book_category_theory_for/", 
            "score": 253, 
            "selftext": "Recently, Bartosz had completed his epic series on Category Theory on his blog.\n\nI took it upon myself to try and convert this work into a PDF, and with his permission, so I have!\n\nI scraped the blog, converted it to LaTeX using pandoc, and manually tweaked a whole bunch of things. The result is one beautifully-typeset PDF, if I say so myself :)\n\nSo please **download the complete PDF here**: https://github.com/hmemcpy/milewski-ctfp-pdf\n\nNote: this is just the beginning, there's probably a lot still wrong, and it should be further \"mathified\". Please feel free to contribute (PRs, issues!)\n\nThank you!", 
            "subreddit": "haskell", 
            "title": "I made Bartosz Milewski's book \"Category Theory for Programmers\" into a PDF!", 
            "url": "https://www.reddit.com/r/haskell/comments/73e7l3/i_made_bartosz_milewskis_book_category_theory_for/"
        }, 
        {
            "author": "MagicMurderBagYT", 
            "created_utc": 1506766403.0, 
            "domain": "self.haskell", 
            "id": "73e5vn", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 59, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73e5vn/weekly_beginner_saturday_hask_anything_6/", 
            "score": 16, 
            "selftext": "If you have a question or would like to help, then feel free to participate. :)\n\nLast week: https://www.reddit.com/r/haskell/comments/724eeq/weekly_beginner_saturday_hask_anything_5/", 
            "subreddit": "haskell", 
            "title": "[Weekly] Beginner Saturday: Hask Anything - #6", 
            "url": "https://www.reddit.com/r/haskell/comments/73e5vn/weekly_beginner_saturday_hask_anything_6/"
        }, 
        {
            "author": "nongaussian", 
            "created_utc": 1506744995.0, 
            "domain": "self.haskell", 
            "id": "73cytw", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73cytw/newbie_question_passing_variable_values_to_an/", 
            "score": 3, 
            "selftext": "To learn Haskell, I wrote a simple unconstrained convex function maximizer. In technical jargon, it is a simplified Newton-method (I use only the diagonals of the Hessian) implementation. \n\nTo use my newly-written function I made a module out of it. Most of the stuff between the example program (where I define a particular function to maximize, along with its gradient and the diagonals of the Hessian) and the Maximizer module will pass as function arguments by design.\n\nWhat I wanted to do is to have some \"global constants\", that I don't want to be passing function arguments (the functions have plenty of arguments already). In this scenario, these would be things like tolerance limits for the optimization and the maximum number of iterations. I would like to set these at the top of each \"application\" file, not in the file that contains the maximizer module.\n\nSo here is how I proceeded:\n\n1) First, everything was just one .hs file, and I set the parameters at the top. Worked perfectly, no module declarations involved.\n\n2) Then, I separated the program into two files, call them Maximizer.hs and example.hs.  I included the maximizer with \n\n    #include \"Maximizer.hs\"\n\nran ghc with -cpp. Everything worked perfectly, but this is not elegant, and not the \"Haskell way\".\n\n3) I made Maximizer.hs a module and declared the constant in it. Imported the module in example.hs and everything worked. \n\nI don't like #3, since the idea is not to have to go change anything in \"Maximizer.hs\" if you need to fine-tune any optimization parameters.\n\nSo I tried #4, which probably illustrates that I don't know what I am doing:\n\n4) Kept the import structure from #3, but moved the declarations of parameter values to \"example.hs\". Now the program does not compile anymore, the compilation fails where I try to use these constants in \"Maximizer.hs\".\n\nSo is there any alternative #2 that would be more elegant? Or is my only alternative solution to pass all these as function arguments.", 
            "subreddit": "haskell", 
            "title": "Newbie question: Passing variable values to an imported module", 
            "url": "https://www.reddit.com/r/haskell/comments/73cytw/newbie_question_passing_variable_values_to_an/"
        }, 
        {
            "author": "Saltones", 
            "created_utc": 1506716264.0, 
            "domain": "awalterschulze.github.io", 
            "id": "73afpz", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73afpz/monads_for_go_programmers/", 
            "score": 21, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Monads for Go Programmers", 
            "url": "https://awalterschulze.github.io/blog/post/monads-for-goprogrammers/"
        }, 
        {
            "author": "kaol", 
            "created_utc": 1506708094.0, 
            "domain": "avoltus.com", 
            "id": "739k38", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/739k38/profunctors_for_encoding_and_decoding/", 
            "score": 16, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Profunctors for encoding and decoding", 
            "url": "https://www.avoltus.com/fi/blog/2017-9-29-profunctors-encoding-and-decoding"
        }, 
        {
            "author": "0ldf4rt", 
            "created_utc": 1506690409.0, 
            "domain": "blogs.intevation.de", 
            "id": "737ns3", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/737ns3/making_your_brain_tingle_functions_as_functors/", 
            "score": 24, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Making your brain tingle: Functions as functors \u00b7 Waste of Time", 
            "url": "http://blogs.intevation.de/wilde/haskell/functions-as-functors/"
        }, 
        {
            "author": "sordina", 
            "created_utc": 1506671969.0, 
            "domain": "youtu.be", 
            "id": "736fiu", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Compose Conference", 
                    "author_url": "https://www.youtube.com/channel/UC0pEknZxL7Q1j0Ok8qImWdQ", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/lUibiSzIgG4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/lUibiSzIgG4/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "Compose :: Melbourne 2017 - Andrew McCluskey - Your first Haskell app", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/736fiu/compose_melbourne_2017_andrew_mccluskey_your/", 
            "score": 43, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Compose :: Melbourne 2017 - Andrew McCluskey - Your first Haskell app", 
            "url": "https://youtu.be/lUibiSzIgG4"
        }, 
        {
            "author": "BayesMind", 
            "created_utc": 1506654069.0, 
            "domain": "self.haskell", 
            "id": "7355il", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 21, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7355il/the_equivalence_between_universal_and_existential/", 
            "score": 21, 
            "selftext": "I recently found this beautiful gem in an Oleg post, all 5 statements are equivalent (or isomorphic (?)), and I had a few questions:\n\n    A. \u2203 x. P x\n    B. ~~(\u2203 x. P x)\n    C. ~(\u2200 x. ~(P x))\n    D. ~(\u2200 x. P x -> \u22a5)\n    E. (\u2200 x. P x -> \u22a5) -> \u22a5\n\n1. In `C`, is the `~` or negation operator going inside the parens because it's distributive?\n2. And is `~\u2203 <=> \u2200`?\n3. In `C<=>D` Can you explain `~(P x) <=> P x -> \u22a5`?\n4. Finally in `D<=>E`, when `~` is distributed over `\u2200`, why is it not negated?", 
            "subreddit": "haskell", 
            "title": "The equivalence between Universal and Existential types", 
            "url": "https://www.reddit.com/r/haskell/comments/7355il/the_equivalence_between_universal_and_existential/"
        }, 
        {
            "author": "notooth1", 
            "created_utc": 1506652058.0, 
            "domain": "self.haskell", 
            "id": "734z27", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/734z27/stack_missing_some_packages/", 
            "score": 4, 
            "selftext": "Hi everyone,\n\nI got these errors when building a project. Can anyone tell me how to install the missing packages?\n\n      [global-stack-repl] Executable named intero not found on path: [\"/home/...\n      [project-stack-repl-test:lib] Executable named intero not found on path: [\"/home/...\n      [project-stack-repl-test:exe:test] Executable named intero not found on path: [\"/home/...", 
            "subreddit": "haskell", 
            "title": "Stack missing some packages?", 
            "url": "https://www.reddit.com/r/haskell/comments/734z27/stack_missing_some_packages/"
        }, 
        {
            "author": "dalaing", 
            "created_utc": 1506650792.0, 
            "domain": "blog.qfpl.io", 
            "id": "734uwl", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/734uwl/switching_reflex_blog_series_crosspost_rreflexfrp/", 
            "score": 33, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Switching [reflex blog series, crosspost /r/reflexfrp]", 
            "url": "https://blog.qfpl.io/posts/reflex/basics/switching/"
        }, 
        {
            "author": "chrisdoner", 
            "created_utc": 1506633748.0, 
            "domain": "self.haskell", 
            "id": "7337fi", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7337fi/simple_textbased_drawing_dsl/", 
            "score": 71, 
            "selftext": "Hi all,\n\nHere's a handy module for drawing things (reports; debugging) in a\ntext-only setting: https://gist.github.com/chrisdone/c46f6c76021e5e2666e835b84197a7e8\n\nThere's this little Matrix type that represents a block of text. You\ncan put them side by side, above/below, merge them, shift them down or\nto the right. Then there are a few helpers like \"draw a box around\nthis\" or \"draw these in a grid\" or \"draw this tree\".\n\nScreenshots:\n\n* Drawing a couple trees: https://i.imgur.com/rWAojEd.png\n* Doing simple layouts and grids/tables:\n  https://i.imgur.com/nZFqNJL.png\n\nIt's not the cleanest implementation (or probably fast), I whipped it\nup of an evening. Is there already a library that does this? If not,\nmaybe someone would like to package something like this up?\n\n", 
            "subreddit": "haskell", 
            "title": "Simple text-based drawing DSL", 
            "url": "https://www.reddit.com/r/haskell/comments/7337fi/simple_textbased_drawing_dsl/"
        }, 
        {
            "author": "0b01", 
            "created_utc": 1506622513.0, 
            "domain": "rickyhan.com", 
            "id": "731yos", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/731yos/copping_supreme_with_haskell/", 
            "score": 10, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Copping Supreme with Haskell", 
            "url": "http://rickyhan.com/jekyll/update/2017/09/27/copping-supreme-with-haskell.html"
        }, 
        {
            "author": "dukerutledge", 
            "created_utc": 1506618628.0, 
            "domain": "tech.frontrowed.com", 
            "id": "731im1", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/731im1/a_tale_of_two_monads_free_vs_mtl/", 
            "score": 52, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "A tale of two Monads: Free vs MTL", 
            "url": "http://tech.frontrowed.com/2017/09/28/benching-free/"
        }, 
        {
            "author": "haskellweekly", 
            "created_utc": 1506607403.0, 
            "domain": "haskellweekly.news", 
            "id": "7309vi", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7309vi/issue_74_haskell_weekly/", 
            "score": 25, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Issue 74 :: Haskell Weekly", 
            "url": "https://haskellweekly.news/issues/74.html"
        }, 
        {
            "author": "Iceland_jack", 
            "created_utc": 1506597058.0, 
            "domain": "self.haskell", 
            "id": "72zdwm", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72zdwm/use_cases_for_type_classes_with_representational/", 
            "score": 17, 
            "selftext": "Yesterday Ryan informed me that type class arguments [can be given representational roles](https://ghc.haskell.org/trac/ghc/ticket/14292#comment:1) if we deviously enable `IncoherentInstances`\n\n    {-# Language IncoherentInstances, InstanceSigs, GeneralizedNewtypeDeriving, RoleAnnotations, GADTs, ConstraintKinds, KindSignaturesm, ViewPatterns #-}\n\n    import Data.Coerce\n    import Data.Kind\n\n    type role NUM representational\n\n    class NUM a where\n      plus :: a -> a -> a\n\n    instance NUM Int where\n      plus :: Int -> Int -> Int\n      plus = (+)\n\nThis means we can create a `newtype` over `Int` \n\n    newtype WEIRD = WEIRD Int\n      deriving (Eq, Num)\n\n    instance NUM WEIRD where\n      plus :: WEIRD -> WEIRD -> WEIRD\n      plus 0 0 = 999999\n      plus n m = n + m\n\ncapture the instance as a [`Dict`](https://hackage.haskell.org/package/constraints-0.9.1/docs/Data-Constraint.html#t:Dict) and coerce from a `NUM WEIRD`instance to a `NUM Int`instance!\n\n    data Dict :: Constraint -> Type where\n      Dict :: ctx => Dict ctx\n\n    withDict :: Dict a -> (a => r) -> r\n    withDict Dict r = r\n\n    weirdify :: Dict (NUM WEIRD) -> Dict (NUM Int)\n    weirdify = coerce\n\nWhich lets you do bad things like\n\n    -- >> foo 1 20\n    -- 21\n    -- >> foo 0 0\n    -- 999999\n\n    foo :: Int -> Int -> Int\n    foo = withDict (weirdify Dict)\n      plus\n\n**Bonus**: Find use case for `phantom` roles\n\n    type role Foo phantom\n\n    class Foo a", 
            "subreddit": "haskell", 
            "title": "Use cases for type classes with representational roles", 
            "url": "https://www.reddit.com/r/haskell/comments/72zdwm/use_cases_for_type_classes_with_representational/"
        }, 
        {
            "author": "reygoch", 
            "created_utc": 1506596098.0, 
            "domain": "self.haskell", 
            "id": "72zb9w", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72zb9w/best_way_to_automate_testing_homework_solutions/", 
            "score": 28, 
            "selftext": "I'm TA this year for Haskell course. Students will submit their homework solutions in form of single .hs file.\n\nWhat would be the best approach for testing multiple student solutions with one test suite?\n\nBest I've come up with so far was writing a shell script that copies solutions one by one into project with test suite and than runs tests and replaces solution with next one once it has finished.\n\nThis seems a bit dirty, so I'd like to know if there is more Haskellian way of doing this? Something that could possibly be used for homework submission / grading system in the future without relying on shell scripts.", 
            "subreddit": "haskell", 
            "title": "Best way to automate testing homework solutions?", 
            "url": "https://www.reddit.com/r/haskell/comments/72zb9w/best_way_to_automate_testing_homework_solutions/"
        }, 
        {
            "author": "eckyp", 
            "created_utc": 1506577216.0, 
            "domain": "self.haskell", 
            "id": "72y5fx", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72y5fx/library_to_generate_custom_typeclass_instances/", 
            "score": 5, 
            "selftext": "Hey, folks!\n\nIs there any library that helps generate this kind of instances: https://github.com/eckyputrady/haskell-scotty-realworld-example-app/blob/master/src/Struct.hs#L242 ?", 
            "subreddit": "haskell", 
            "title": "Library to generate custom typeclass instances for common monad transformer?", 
            "url": "https://www.reddit.com/r/haskell/comments/72y5fx/library_to_generate_custom_typeclass_instances/"
        }, 
        {
            "author": "mcapodici", 
            "created_utc": 1506572942.0, 
            "domain": "haskell.fun", 
            "id": "72xubn", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72xubn/making_google_tasks_better_part_3/", 
            "score": 10, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Making Google Tasks Better; Part 3", 
            "url": "https://haskell.fun/2017/09/28/making-google-tasks-better-part-3/"
        }, 
        {
            "author": "ptrptrpnpn", 
            "created_utc": 1506559084.0, 
            "domain": "youtu.be", 
            "id": "72wly6", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Computerphile", 
                    "author_url": "https://www.youtube.com/user/Computerphile", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/SknxggwRPzU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/SknxggwRPzU/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "Propositions as Types - Computerphile", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72wly6/propositions_as_types_computerphile/", 
            "score": 56, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Propositions as Types - Computerphile", 
            "url": "https://youtu.be/SknxggwRPzU"
        }, 
        {
            "author": "pseudonom-", 
            "created_utc": 1506553569.0, 
            "domain": "self.haskell", 
            "id": "72w2va", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72w2va/algebra_of_algebraic_data_types_for_polymorphic/", 
            "score": 12, 
            "selftext": "I was looking through http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/ and I realized I don't quite know how to apply it to functions that are parametrically polymorphic.\n\nFor example,\n\n    fst :: (a, a) -> a\n    fst (a, _) = a\n    snd :: (a, a) -> a\n    snd (_, a) = a\n\nare the only implementations satisfying `(a, a) -> a`. And following the known rules takes us from `(a, a) -> a` to `a^(a * a)`. Setting that equal to 2 (our number of implementations) and solving suggests that `a` is fractional which doesn't seem right.", 
            "subreddit": "haskell", 
            "title": "Algebra of algebraic data types for polymorphic functions", 
            "url": "https://www.reddit.com/r/haskell/comments/72w2va/algebra_of_algebraic_data_types_for_polymorphic/"
        }, 
        {
            "author": "MichaelBurge", 
            "created_utc": 1506539088.0, 
            "domain": "michaelburge.us", 
            "id": "72uice", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72uice/debugging_c_with_haskells_divisible/", 
            "score": 31, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Debugging C with Haskell's Divisible", 
            "url": "http://www.michaelburge.us/2017/09/27/delta-debugging-in-haskell.html"
        }, 
        {
            "author": "moreektesseract", 
            "created_utc": 1506537464.0, 
            "domain": "self.haskell", 
            "id": "72ubj8", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72ubj8/naive_format_strings_using_template_haskell/", 
            "score": 12, 
            "selftext": "Shalom!\n\nI found the existing solutions for constructing text messages (think\nprintf-like) rather verbose and I've regularly seen my log message\nbecome increasingly long. Thus I hacked together this simple package:\nhttps://github.com/mtesseract/th-format.\n\nIt provides a Template Haskell quasi quoter named `fmt` which one can\nuse as follows:\n\n    >>> let answer = 42 in [fmt|What is the answer to universe, life and everything? It's $answer!|]\n    \"What is the answer to universe, life and everything? It's 42!\"\n\n    >>> let toggle = True in [fmt|The toggle is switched ${if toggle then (\"on\" :: Text) else \"off\"}|]\n    \"The toggle is switched on\"\n\n    >>> let timeDelta = 60 in [fmt|Request latency: ${timeDelta}ms|]\n    \"Request latency: 60ms\"\n\nDoes such a thing already exist? Feedback is welcome. :-)\n\nBest,\nMoritz\n", 
            "subreddit": "haskell", 
            "title": "Naive format strings using Template Haskell", 
            "url": "https://www.reddit.com/r/haskell/comments/72ubj8/naive_format_strings_using_template_haskell/"
        }, 
        {
            "author": "kcsongor", 
            "created_utc": 1506532834.0, 
            "domain": "kcsongor.github.io", 
            "id": "72ts5n", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72ts5n/welltyped_printfs_cannot_go_wrong_typelevel/", 
            "score": 18, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Well-typed printfs cannot go wrong (type-level parsing in PureScript)", 
            "url": "http://kcsongor.github.io/purescript-safe-printf/"
        }, 
        {
            "author": "n00bomb", 
            "created_utc": 1506530203.0, 
            "domain": "markkarpov.com", 
            "id": "72th9v", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 86, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72th9v/free_monad_considered_harmful/", 
            "score": 81, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Free monad considered harmful", 
            "url": "https://markkarpov.com/post/free-monad-considered-harmful.html"
        }, 
        {
            "author": "m-renaud", 
            "created_utc": 1506522728.0, 
            "domain": "self.haskell", 
            "id": "72smtp", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 32, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72smtp/what_library_do_i_use_to_do_x/", 
            "score": 47, 
            "selftext": "**Background**\n\nOne issue I\u2019ve run into many times when learning Haskell is figuring out what library to use for a particular task. The best approach I\u2019ve found so far is to dig through haskell-cafe@, Reddit threads and blog posts looking for something that\u2019s recent, then go on hackage and see how many downloads it has, then go back to Reddit and see if there\u2019s any threads about a package replacing the package I was looking at; not the greatest developer experience. \n\nAfter dabbling with Haskell for a few years this process has become easier, but when I was just starting I found it very difficult to locate the \u201cbest practice\u201d way to do something. The Haskell library ecosystem seems to suffer from choice overload: either too many options exist overall, or there are several options with no clear tradeoffs presented. As a beginner, you just want a canonical resource that says: \u201cIf you want to do X use the Y library\u201d. When you\u2019re actually building something substantial, you want to see what options are available and the pros and cons of each.\n\nOne example where choices proliferate is parsing libraries, one of Haskell\u2019s \u201ckiller features\u201d. A [Google search for \"haskell parsing libraries\"](http://www.google.com/search?q=haskell+parsing+libraries) gives you a 1.5 year old reddit post as the top result which talks about 9 different parsing library, then the Parsec wiki page (I hear Parsec is outdated), then various hackage links. As of the time of writing, I hear that [megaparsec](https://hackage.haskell.org/package/megaparsec) (a fork of Parsec) is the go-to parsing library as it has good tradeoffs between performance and error messages, and [attoparsec](https://hackage.haskell.org/package/attoparsec) is the fastest. You can obviously just pick one and go with it, but for me I like to make sure I\u2019m learning and using the right thing. Streaming is another example where it\u2019s not clear which one you should use ([reddit thread](https://www.reddit.com/r/haskell/comments/5x2g0r/streaming_package_vs_pipes_conduit_question_on/)).\n\nFor some categories, there seems to be general consensus on what library to use in the general case:\n\n* Benchmarking: criterion (no contest)\n* File encoding (JSON, CSS, YAML, XML): aeson, cassava, yaml, xml respectively\n* Strings: text, bytestring\n* Monad transformers/composition: mtl ([Shall I use mtl or transformers?](https://wiki.haskell.org/Monad_Transformers#Shall_I_use_MTL_or_transformers.3F))\n* Concurrency: async or stm\n* Data structures: containers and unordered-containers\n* Service monitoring: ekg\n\n**Existing resources**\n\nThere\u2019s tonnes of fantastic documentation and blog posts out there, it\u2019s just not organized in such a way that you can find what you\u2019re looking for. The [Haskell Wiki](https://wiki.haskell.org/Haskell) is very difficult to find any useful information in, docs for libraries are split between Hackage, Github pages, and blog posts, and searches don\u2019t frequently yield the best results.\n\nOne resource I\u2019ve found incredibly useful for figuring out what to use is [State of the Haskell Ecosystem](https://github.com/Gabriel439/post-rfc/blob/master/sotu.md) originally written by Gabriel Gonzalez. This enumerates the high level categories for things you may want to do and provides a rating on the \u201cmaturity\u201d of the ecosystem and commentary on the libraries available.\n\n**Proposal**\n\nI propose we create a centralized, up to date resource where for each type of programming need or application domain we provide recommendations for what library/libraries to use, and when multiple choices are available: a reasonable default, and trade-offs between options presented succinctly.\n\nA couple options available for hosting this would be:\n\n* The Haskell Wiki:\n  + Pro: From the outside it appears to be an authoritative source\n  + Pro: More open (easy for anyone to edit)\n  + Con: Difficult to collaborate/circulate proposed changes\n* Repo under github.com/haskell (or another repo)\n  + Pro: Easy collaboration/discussion via pull requests\n  + Con: Reliance on GitHub and active owner to merge pull requests\n* (short-term) A shared Google doc\n  + Pro: Easy to evolve the doc at the beginning (suggestions, comments, etc.)\n  + Con: Lacks good version control and stability\n\nI am willing to invest time to make this happen.\n\n* If there\u2019s any area you know very well that you\u2019d like to recommend a library for, please mention it in the comments. I\u2019m going to use the *State of the Haskell Ecosystem* as a starting point but want to add more depth.\n* I\u2019d love some suggestions on where to host this long term.\n* I\u2019m going to start a Google doc with a few sections and ideas, feel free to add comments there. If you\u2019d like to contribute more substantially or take ownership of a section of the doc, reach out to me directly.\n", 
            "subreddit": "haskell", 
            "title": "What library do I use to do X?", 
            "url": "https://www.reddit.com/r/haskell/comments/72smtp/what_library_do_i_use_to_do_x/"
        }, 
        {
            "author": "chak", 
            "created_utc": 1506520739.0, 
            "domain": "tweag.io", 
            "id": "72sfff", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72sfff/immutability_and_unboxing_in_array_programming/", 
            "score": 30, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Immutability and unboxing in array programming", 
            "url": "http://www.tweag.io/posts/2017-09-27-array-package.html"
        }, 
        {
            "author": "WubsEvs", 
            "created_utc": 1506520002.0, 
            "domain": "self.haskell", 
            "id": "72sct8", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 16, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72sct8/posting_an_incomplete_record_to_an_api_handler_in/", 
            "score": 7, 
            "selftext": "The specific scenario:  I'm using Persistent TH to define data types.  My app is comprised of a JS front end and a Yesod back end.  The front end posts some data to the server, from which the server should create a User and a Requirement record.  The Requirement type has a userId foreign key.  The User type has a field (\"verified\") which should not be sent from the front-end (it's an obvious security problem to accept the front-end's value for this field!).\n\nWhen parsing JSON from the front-end, you obviously need to specify the type to de-serialize to.  My absolute dream fantasy blue-sky solution would be that there would be some way to specify a record type without a certain field, for example, I would de-serialize the request body to:\n\n    (WithoutField User \"userVerified\", WithoutField Requirement \"requirementUserId\")\n\nMy \"solution\" so far I am not happy with - making these fields Maybe fields.  They should not be optional, so I feel like this is a poor solution.\n\nNow, I am just some kind of advanced beginner with Haskell, so please be patient if I am asking for the wrong thing, but:\n\n1) Given the libraries I'm using (Yesod, Persistent), what is a good approach to this?\n\n2) Does anything like my dream solution exist, or is this an example of something that Haskell can't really do because it lacks \"first class records\"?", 
            "subreddit": "haskell", 
            "title": "Posting an incomplete record to an API handler in Yesod (or in general)", 
            "url": "https://www.reddit.com/r/haskell/comments/72sct8/posting_an_incomplete_record_to_an_api_handler_in/"
        }, 
        {
            "author": "dons", 
            "created_utc": 1506499445.0, 
            "domain": "code.facebook.com", 
            "id": "72qugv", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72qugv/effective_static_analysis_can_be_a_game_changer/", 
            "score": 34, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "\"effective static analysis can be a game changer in dealing with concurrency\"", 
            "url": "https://code.facebook.com/posts/1985913448333055/multithreaded-rendering-on-android-with-litho-and-infer/"
        }, 
        {
            "author": "cocreature", 
            "created_utc": 1506490153.0, 
            "domain": "haskellforall.com", 
            "id": "72q92j", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72q92j/typedriven_strictness/", 
            "score": 48, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Type-driven strictness", 
            "url": "http://www.haskellforall.com/2017/09/type-driven-strictness.html"
        }, 
        {
            "author": "dalaing", 
            "created_utc": 1506471852.0, 
            "domain": "blog.qfpl.io", 
            "id": "72oohx", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72oohx/working_with_the_dom_reflex_blog_series_crosspost/", 
            "score": 41, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Working with the DOM [reflex blog series, crosspost /r/reflexfrp]", 
            "url": "https://blog.qfpl.io/posts/reflex/basics/dom/"
        }, 
        {
            "author": "RavPat", 
            "created_utc": 1506459688.0, 
            "domain": "self.haskell", 
            "id": "72nfck", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72nfck/need_help/", 
            "score": 1, 
            "selftext": "    cubicQ :: Float -> Float -> Float -> Float\n    cubicQ a b c = ((3*a*c) - (b^2)) / (9*a^2)\n\n    cubicR :: Float -> Float -> Float -> Float -> Float\n    cubicR a b c d = ((9*a*b*c) - (27*a^2*d) - (2*b^3)) / (54*a^3)\n\n    cubicS :: Float -> Float -> Float\n    cubicS q r = (r + sqrt(q^3) + r^2)**(1/3)\n\nso far i have three functions. For the function cubicS i would like q and r to be the functions cubicQ and cubicR. I CAN NOT change the number of variables. There has to be two floats going into the function.\n\nanyone have a solution?\nThankyou", 
            "subreddit": "haskell", 
            "title": "Need Help!!", 
            "url": "https://www.reddit.com/r/haskell/comments/72nfck/need_help/"
        }, 
        {
            "author": "potomak", 
            "created_utc": 1506457919.0, 
            "domain": "stackoverflow.com", 
            "id": "72n80o", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72n80o/should_i_prefer_monadunliftio_or_monadmask_for/", 
            "score": 25, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Should I prefer MonadUnliftIO or MonadMask for bracketting like functions?", 
            "url": "https://stackoverflow.com/questions/46425062/should-i-prefer-monadunliftio-or-monadmask-for-bracketting-like-functions"
        }, 
        {
            "author": "sstewartgallus", 
            "created_utc": 1506453120.0, 
            "domain": "self.haskell", 
            "id": "72mnya", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72mnya/how_can_we_use_denotional_semantics_for/", 
            "score": 7, 
            "selftext": "The typical form of denotational semantics assigns a meaning to a possibly non-terminating program using the value \u22a5 to represent non-termination. However, this has a problem. A program to assign such a value might itself not terminate due to the halting problem.\n\nLet me explain:\n\nSuppose we have a program;\n\n     dontHalt :: a\n     dontHalt = dontHalt\n\n`dontHalt` would be assigned \u22a5\n\nBut suppose we have an algorithm `denote` that assigns a representation to a program value.\n\nThen we can write a program like:\n\n    denote :: String -> Denotation\n    denote = ...\n\n    dontHalt :: ()\n    dontHalt = dontHalt\n\n    evil :: ()\n    evil = if \u22a5 == denote programSrcCode then () else dontHalt\n\nIf the program's denotational semantics say that it is represented as \u22a5 then it changes itself to be () or else \u22a5.\n\nI'm sure this must have been covered before by someone but I don't know the details.", 
            "subreddit": "haskell", 
            "title": "How can we use denotional semantics for functional programs if an algorithm for assigning semantics would not necessarily halt?", 
            "url": "https://www.reddit.com/r/haskell/comments/72mnya/how_can_we_use_denotional_semantics_for/"
        }, 
        {
            "author": "haskellgr8", 
            "created_utc": 1506381688.0, 
            "domain": "self.haskell", 
            "id": "72gc7n", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 122, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72gc7n/rust_has_safety_features_less_room_for_bugs_yet/", 
            "score": 45, 
            "selftext": "In [this video](https://www.youtube.com/watch?v=Fqi0Xu2Enaw#t=2m33s), A. Contorer explained how Haskell code has less room for bugs than Java code.\n\nRust has safety features - less room for bugs. But Rust code still has a lot of room for the type of bugs that Contorer alluded to, for Haskell safety and Rust safety are different beasts.\n\nI haven't fully wrapped my mind around these different kinds of safety. I just sense that they're there. It may even be the case that Haskell safety encompasses Rust safety in some ways, although I'm not certain.\n\nMore knowledgable persons are welcome to provide insights on the matter.", 
            "subreddit": "haskell", 
            "title": "Rust has safety features - less room for bugs. Yet when we talk about safety in Haskell - less room for bugs - we're not talking about the same kind of safety. Rust safety and Haskell safety are different beasts.", 
            "url": "https://www.reddit.com/r/haskell/comments/72gc7n/rust_has_safety_features_less_room_for_bugs_yet/"
        }, 
        {
            "author": "javadlux", 
            "created_utc": 1506368120.0, 
            "domain": "self.haskell", 
            "id": "72evfu", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72evfu/removing_seeminglyunrelated_type_annotations/", 
            "score": 8, 
            "selftext": "I've been playing around with the library [GPipe](https://hackage.haskell.org/package/GPipe-2.2.1), a typesafe, functional API based on the OpenGL state machine. I have this extremely short test-case that is based off of the first sample in the documentation:\n\n    {-# LANGUAGE TypeFamilies #-}   \n    import Graphics.GPipe\n    import qualified Graphics.GPipe.Context.GLFW as GLFW\n    import Control.Monad (unless)\n    \n    main =\n      runContextT GLFW.defaultHandleConfig $ do\n        win <- newWindow (WindowFormatColor RGB8) (GLFW.defaultWindowConfig \"Hello world!\")\n        loop win\n    \n    broken :: Int\n    broken = 10\n        \n    loop :: Window os c ds -> ContextT GLFW.Handle os IO ()\n    loop win = do\n      broken `seq` return ()\n      closeRequested <- GLFW.windowShouldClose win\n      unless (closeRequested == Just True) $\n        loop win\n\nAll it does is create a new OpenGL context ContextT (with IO at the base) which is run from runContextT. The ContextT computation here just creates a window and then runs function \"loop\" until the window close message is received. Note that the type variable \"os\" (see the type annotation on \"loop\") is a rank 2 universally quantified variable used to keep objects in one GL context from reaching another context, similar to the ST monad trick.\n\nNote that this program **does** compile as-is! (using stack 1.5.1 and GHC 8.0.2)\n\nThe global definition \"broken\" was originally a parameter I was using to control some feature of rendering, and I found when I originally added this to my program, it was causing some type checking problems in the call to newWindow that seemed to relate to the \"os\" type variable leaking the scope of the context:\n\n    * Couldn't match type `os0' with `os'\n        because type variable `os' would escape its scope\n      This (rigid, skolem) type variable is bound by\n        a type expected by the context:\n          ContextT GLFW.Handle os IO ()\n        at Main.hs:(7,3)-(9,12)\n      Expected type: Window os0 RGBFloat ()\n        Actual type: Window os RGBFloat ()\n    * In the first argument of `loop', namely `win'\n      In a stmt of a 'do' block: loop win\n      In the second argument of `($)', namely\n        `do { win <- newWindow\n                       (WindowFormatColor RGB8) (GLFW.defaultWindowConfig \"Hello world!\");\n              loop win }'\n    * Relevant bindings include\n        win :: Window os RGBFloat () (bound at Main.hs:8:5)\n\n\nIn order to get this error to occur in the test case, you have to remove the type annotations on both \"loop\" and \"broken\"; however, if you remove TypeFamilies, there doesn't seem to be any way to get this error. If you remove the reference to \"broken\" in \"loop\", the error also goes away (since I'm not doing any actually rendering in this test case I just use `seq` to force the evaluation of \"broken\").\n\nAlso, interestingly, giving a type annotation of\n\n    broken :: Num t => t\n\nalso causes the error to not occur (which I assume is the type generated for that definition by GHC?).\n\nAny ideas on why I'm getting this error? I wouldn't have thought the definition of \"broken\" would have any effect on the typing of the rest of the program!", 
            "subreddit": "haskell", 
            "title": "Removing (seemingly-unrelated) type annotations causes typechecking of a function to fail (only with -XTypeFamilies)", 
            "url": "https://www.reddit.com/r/haskell/comments/72evfu/removing_seeminglyunrelated_type_annotations/"
        }, 
        {
            "author": "digitalis_", 
            "created_utc": 1506357872.0, 
            "domain": "self.haskell", 
            "id": "72doac", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72doac/creating_a_haskell_alternative_to_rackets_pollen/", 
            "score": 25, 
            "selftext": "I'll just explain what Pollen is, for those who don't know.\n\n**Intro**\n\nPollen is a \u2018book-publishing system written in Racket\u2019. The idea is to use high-level semantic markup to write documents:\n\n    A \u25cafirst-use{tagged X-expression} or \u25cafirst-use{txexpr} is a data\n    structure which involves three components: a \u25cafirst-use{tag},\n    \u25cafirst-use{attributes}, and a \u25cafirst-use{body}.\n\nThen, using Racket, you can define how this gets exported into different formats.\n\n    (define (first-use . body)\n       (case (current-poly-target)\n        [(html) `(\"<em>\" ,@body \"</em>\")]\n        [(tex) `(\"emph\" ,@body)]))\n\n**Question**\n\nThis is all well and good, except there are a few things I don't like so much about Pollen.\n\n1. Written in Racket. A nice language, but I much prefer Haskell (especially when it comes to the data structures and processing them). The really nice thing about Racket here is that *everything* is a sexp \u2013 including the document, which (basically) gets parsed into a Racket program, which is why you define the tags as functions.\n\n2. I can't modify the parser. And anyway, I'd much prefer to do this in Haskell.\n\n3. It's not modular; i.e., it's monolithic rather than fitting into an ecosystem \u2013 if there were a Haskell version, you might use Shake, HaTeX, etc. with it.\n\nI've thought about designing this, and the problem I run into is this. Say I want to add a new tag, and I just want it to put something in italics, I'd have to add this trivial tag in to my Haskell program and *recompile everything*. Worse, if I had a tag that I only wanted to use for *one document*, I wouldn't be able to inline that into the document (as I would with Pollen).\n\nIs this worth doing in Haskell? Can these problems be avoided by changing the design? And what would be the best approach in terms of fitting into the rest of the Haskell ecosystem, so it works with Shake, HaTeX, etc.?\n\n(I have some ideas, but I'll wait to see what you guys come up with. :) ", 
            "subreddit": "haskell", 
            "title": "Creating a Haskell alternative to Racket's Pollen?", 
            "url": "https://www.reddit.com/r/haskell/comments/72doac/creating_a_haskell_alternative_to_rackets_pollen/"
        }, 
        {
            "author": "aviaviaviavi", 
            "created_utc": 1506356441.0, 
            "domain": "github.com", 
            "id": "72dig4", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72dig4/cryptocompare_wrapper_library_for_getting_pricing/", 
            "score": 18, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "CryptoCompare: Wrapper library for getting pricing and information about different cryptocurrencies.", 
            "url": "https://github.com/aviaviavi/cryptocompare"
        }, 
        {
            "author": "dukerutledge", 
            "created_utc": 1506356329.0, 
            "domain": "tech.frontrowed.com", 
            "id": "72di0h", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 14, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72di0h/beautiful_aggregations_with_haskell/", 
            "score": 77, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Beautiful Aggregations with Haskell", 
            "url": "http://tech.frontrowed.com/2017/09/22/aggregations/"
        }, 
        {
            "author": "nSeagull", 
            "created_utc": 1506345449.0, 
            "domain": "twitter.com", 
            "id": "72ccr4", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72ccr4/haskelldo_now_has_latex_support/", 
            "score": 38, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Haskell.do now has LaTeX support!", 
            "url": "https://twitter.com/wearetheam/status/912304767053033472"
        }, 
        {
            "author": "vaibhavsagar", 
            "created_utc": 1506324290.0, 
            "domain": "bitemyapp.com", 
            "id": "72aw4v", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72aw4v/alternatives_to_typed_holes_for_talking_to_your/", 
            "score": 30, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Alternatives to Typed Holes for talking to your compiler", 
            "url": "http://bitemyapp.com//posts/2017-09-23-please-stop-using-typed-holes.html"
        }, 
        {
            "author": "OHQbBeCWiqP3fio3", 
            "created_utc": 1506321098.0, 
            "domain": "self.haskell", 
            "id": "72ap22", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 45, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72ap22/choices_for_converting_to_javascript_elm_haste/", 
            "score": 32, 
            "selftext": "Nothing against Elm but I might just avoid that one as I get the feeling that too many things are missing from it comparing to Haskell.  \nThe goal is to just try and put Haskell to practical use, having some background in web development and everything. I'm aware of Yesod as well, and I see that's more than just Haskell -> JS. (web development in general I suppose)  \nI guess I installed GHCJS through Vagrant but now I don't know what to sign in as, or where to go from there. If that's supposedly the best choice to come up with JS code from Haskell, they sure make it hard to install, and it totally isn't obvious how to get started.  \nHaste does seem like a good option. Do you find much wrong with that? If PureScript is \"almost\" Haskell, I suppose that's a good option too?", 
            "subreddit": "haskell", 
            "title": "Choices for converting to JavaScript: Elm, Haste, PureScript, GHCJS, etc. Are there any of these you would NOT recommend?", 
            "url": "https://www.reddit.com/r/haskell/comments/72ap22/choices_for_converting_to_javascript_elm_haste/"
        }, 
        {
            "author": "Kootle", 
            "created_utc": 1506319149.0, 
            "domain": "github.com", 
            "id": "72akey", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72akey/tutorial_making_games_fast/", 
            "score": 65, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Tutorial - Making games fast", 
            "url": "https://github.com/jonascarpay/apecs/blob/master/tutorials/GoingFast.md"
        }, 
        {
            "author": "sstewartgallus", 
            "created_utc": 1506307484.0, 
            "domain": "self.haskell", 
            "id": "729p71", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/729p71/abstracting_over_type_level_heap_indices/", 
            "score": 3, 
            "selftext": "Hi. I've been working on the code in https://www.reddit.com/r/haskell/comments/6z4a60/is_there_a_type_level_map_package_available/ .\n\nHowever, using type families like I currently do it is not possible to abstract over indices using universal or existential quantification. Does anyone know of solutions? I would particularly like to be able to type that the code creates an object at *some* new heap index and not that it creates it at a specific one.\n\nThe code:\n\n    {-# LANGUAGE ScopedTypeVariables, TypeInType, TypeOperators, ConstraintKinds, TypeFamilies, KindSignatures, GADTs, DataKinds, UndecidableInstances #-}\n    module Heap\n     (\n      Heap,\n      ShapeInitial,\n      Shape ((:#)),\n      ShapeEmpty,\n      empty,\n      VPtr(),\n      Ptr(),\n      Pair ((:=)),\n      LivePointers ((:.), Nil),\n      get, Get,\n      alloc, Alloc, AllocIx,\n      delete, Delete,\n      set, Set\n    ) where\n    import Data.Proxy\n    import Data.Kind (Type, Constraint)\n    import GHC.TypeLits\n    import Unsafe.Coerce\n    \n    type VPtr = Nat\n    type Ze = 0\n    type Su n = 1 + n\n    \n    type ShapeInitial = Ze :# Nil\n    \n    type family ShapeEmpty (a :: Shape) :: Constraint where\n         ShapeEmpty (n :# Nil) = ()\n         ShapeEmpty (n :# ((ii := val) :. t)) = TypeError (Text \"Shape is not empty.\")\n    \n    data Shape = VPtr :# LivePointers\n    infixr 6 :#\n    \n    empty :: Heap (0 :# Nil)\n    empty = Heap (mkPtr :: Ptr Ze) SNil\n    \n    toProxy :: Ptr n -> Proxy n\n    toProxy _ = Proxy\n    \n    mkPtr :: KnownNat n => Ptr n\n    mkPtr = self where\n      self = Ptr (natVal (toProxy self))\n    \n    newtype Ptr (n :: VPtr) = Ptr Integer\n    \n    ptrValue :: Ptr n -> Integer\n    ptrValue (Ptr x) = x\n    \n    ssu :: Ptr n -> Ptr (Su n)\n    ssu (Ptr x) = Ptr (1 + x)\n    \n    data SOrdering (a :: Ordering) where\n      SLT :: SOrdering LT\n      SEQ :: SOrdering EQ\n      SGT :: SOrdering GT\n    \n    type Compare m n = CmpNat m n\n    \n    snatCompare :: Ptr m -> Ptr n -> SOrdering (Compare m n)\n    snatCompare x y = case compare (ptrValue x) (ptrValue y) of\n                LT -> unsafeCoerce SLT\n                EQ -> unsafeCoerce SEQ\n                GT -> unsafeCoerce SGT\n    \n    data Pair where\n      (:=) :: VPtr -> a -> Pair\n    infixr 9 :=\n    \n    data LivePointers where\n      (:.) :: !Pair -> LivePointers -> LivePointers\n      Nil :: LivePointers\n    infixr 6 :.\n    \n    data SLivePointers (l :: LivePointers) where\n      (:<) :: !(Ptr n, a) -> !(SLivePointers l) -> SLivePointers (n := a :. l)\n      SNil :: SLivePointers Nil\n    infixr 6 :<\n    \n    data Heap (s :: Shape) where\n      Heap :: !(Ptr n) -> !(SLivePointers l) -> Heap (n :# l)\n    \n    type family Set (ii :: VPtr) val (l :: Shape) :: Shape where\n         Set ii val (n :# l) = n :# SetImpl ii val l\n    type family SetImpl (ii :: VPtr) val (l :: LivePointers) :: LivePointers where\n         SetImpl ii val Nil = TypeError (Text \"Pointer not found in Heap.\")\n         SetImpl ii newVal ((jj := val) :. tail) = ChooseSet (Compare ii jj) jj val ii newVal tail\n    \n    type family ChooseSet (a :: Ordering) (jj :: VPtr) val (ii :: VPtr) newVal (tail :: LivePointers) :: LivePointers where\n         ChooseSet LT jj val ii newVal tail = (jj := val) :. (SetImpl ii newVal tail)\n         ChooseSet EQ jj val ii newVal tail = (ii := newVal) :. tail\n         ChooseSet GT jj val ii newVal tail = TypeError (Text \"Pointer not found in Heap.\")\n    \n    set :: Ptr ii -> a -> Heap m -> Heap (Set ii a m)\n    set ii newVal (Heap n l) = Heap n (loop ii newVal l) where\n      loop :: Ptr ii -> a -> SLivePointers l -> SLivePointers (SetImpl ii a l)\n      loop ii newVal ((jj, val) :< tail) = case snatCompare ii jj of\n           SLT -> (jj, val) :< (loop ii newVal tail)\n           SEQ -> (ii, newVal) :< tail\n    \n    type family Get (ii :: VPtr) (s :: Shape) :: Type  where\n         Get ii (n :# m) = GetImpl ii m\n    \n    type family GetImpl (ii :: VPtr) (m :: LivePointers) :: Type where\n         GetImpl ii Nil = TypeError (Text \"Pointer not found in Heap.\")\n         GetImpl ii ((jj := val) :. tail) = ChooseGet (Compare ii jj) ii val tail\n    \n    type family ChooseGet (a :: Ordering) (ii :: VPtr) val (tail :: LivePointers) :: Type where\n         ChooseGet LT ii val tail = GetImpl ii tail\n         ChooseGet EQ ii val tail = val\n         ChooseGet GT ii val tail = TypeError (Text \"Pointer not found in Heap.\")\n    \n    get :: Ptr ii -> Heap s -> Get ii s\n    get ii (Heap _ l) = loop ii l where\n      loop :: Ptr ii -> SLivePointers s -> GetImpl ii s\n      loop ii ((jj, val) :< tail) = case snatCompare ii jj of\n           SLT -> loop ii tail\n           SEQ -> val\n    \n    type family Delete (ii :: VPtr) (s :: Shape) :: Shape where\n         Delete ii (n :# l) = n :# (DeleteImpl ii l)\n    \n    type family DeleteImpl (ii :: VPtr) (s :: LivePointers) :: LivePointers where\n         DeleteImpl ii Nil = TypeError (Text \"Pointer not found in Heap.\")\n         DeleteImpl ii ((jj := val) :. tail) = ChooseDelete (Compare ii jj) ii jj val tail\n    \n    type family ChooseDelete (a :: Ordering) (ii :: VPtr) (jj :: VPtr) val (tail :: LivePointers) :: LivePointers where\n         ChooseDelete LT ii jj val tail = (jj := val) :. DeleteImpl ii tail\n         ChooseDelete EQ ii jj val tail = tail\n         ChooseDelete GT ii jj val tail = TypeError (Text \"Pointer not found in Heap.\")\n    \n    delete :: Ptr ii -> Heap s -> Heap (Delete ii s)\n    delete ii (Heap n l) = Heap n (loop ii l) where\n      loop :: Ptr ii -> SLivePointers s -> SLivePointers (DeleteImpl ii s)\n      loop ii ((jj, val) :< tail) = case snatCompare ii jj of\n           SLT -> (jj, val) :< loop ii tail\n           SEQ -> tail\n    \n    type family AllocIx (n :: Shape) :: VPtr where\n         AllocIx (n :# list) = n\n    \n    type family Alloc (s :: Shape) a :: Shape where\n         Alloc (n :# list) a = Su n :# (n := a) :. list\n    \n    alloc :: a -> Heap m -> (Heap (Alloc m a), Ptr (AllocIx m))\n    alloc val (Heap n tail) = (Heap (ssu n) ((n, val) :< tail), n)\n", 
            "subreddit": "haskell", 
            "title": "Abstracting over type level heap indices?", 
            "url": "https://www.reddit.com/r/haskell/comments/729p71/abstracting_over_type_level_heap_indices/"
        }, 
        {
            "author": "dalaing", 
            "created_utc": 1506293198.0, 
            "domain": "blog.qfpl.io", 
            "id": "728f6i", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/728f6i/dynamics_reflex_blog_series_crosspost_rreflexfrp/", 
            "score": 46, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Dynamics [reflex blog series, crosspost /r/reflexfrp]", 
            "url": "https://blog.qfpl.io/posts/reflex/basics/dynamics/"
        }, 
        {
            "author": "andrewthad", 
            "created_utc": 1506289718.0, 
            "domain": "self.haskell", 
            "id": "7282nn", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7282nn/hacphi_2017/", 
            "score": 17, 
            "selftext": "Is HacPhi happening this year? I cannot find anything written about it, and I just wanted to check to see if it's planned since I have to travel by air to get there.", 
            "subreddit": "haskell", 
            "title": "HacPhi 2017?", 
            "url": "https://www.reddit.com/r/haskell/comments/7282nn/hacphi_2017/"
        }, 
        {
            "author": "dmalikov", 
            "created_utc": 1506289271.0, 
            "domain": "self.haskell", 
            "id": "7280x2", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 16, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7280x2/help_parser_allocs_over_4gb_in_the_heap_for_1mb/", 
            "score": 13, 
            "selftext": "Consider the simple language with 4 types of terms:\n\n    data S\n      = Nil\n      | Txt [Char] S -- text chunk\n      | V Var S      -- variable\n      | A Asg S      -- assignment\n\nSo, it's just a text with variables and variable assignments inside. \nLet's encode variables as `\"{{V|x}}\"` and assignment as `{{A| x 10}}`.\n\nThus, we can represent this piece of text `\"text {{A|  x 1  }} text {{V| y }}\"` as `(Txt \"text \" (A (Asg (Var \"x\") (Value \"1\")) (Txt \" text \" (V (Var \"y\") Nil))))`.\n\nIn terms of `trifecta`, `S` parser could look like that:\n\n    parseAsg :: Parser Asg\n    parseAsg = between asgB asgE $ Asg\n      <$> (Var <$> word `surBy` spaces)\n      <*> (Value <$> word `surBy` spaces)\n\n    parseVar :: Parser Var\n    parseVar = Var <$>\n      between varB varE (manyTill (letter <|> digit) (lookAhead (spaces *> void varE)) `surBy` spaces)\n\n    parseS :: Parser S\n    parseS = parseNil <|> parseV <|> parseA <|> parseTxt\n     where\n      parseNil = Nil <$ eof\n      parseV = V <$> parseVar <*> parseS\n      parseA = A <$> parseAsg <*> parseS\n      parseTxt = Txt <$> manyTill anyChar (lookAhead (void asgB <|> void varB <|> eof)) <*> parseS\n\nHowever, for 1MB input this parser allocs more than 4GB in the heap:\n\n    4,359,646,968 bytes allocated in the heap\n        644,537,736 bytes copied during GC\n        76,758,856 bytes maximum residency (12 sample(s))\n        2,218,264 bytes maximum slop\n                154 MB total memory in use (0 MB lost due to fragmentation)\n\n                                        Tot time (elapsed)  Avg pause  Max pause\n    Gen  0      4265 colls,     0 par    0.487s   0.543s     0.0001s    0.0753s\n    Gen  1        12 colls,     0 par    0.003s   0.004s     0.0003s    0.0014s\n\n    TASKS: 4 (1 bound, 3 peak workers (3 total), using -N1)\n\n    SPARKS: 0 (0 converted, 0 overflowed, 0 dud, 0 GC'd, 0 fizzled)\n\n    INIT    time    0.000s  (  0.004s elapsed)\n    MUT     time    0.838s  (  0.958s elapsed)\n    GC      time    0.398s  (  0.454s elapsed)\n    RP      time    0.000s  (  0.000s elapsed)\n    PROF    time    0.092s  (  0.093s elapsed)\n    EXIT    time    0.001s  (  0.019s elapsed)\n    Total   time    1.329s  (  1.434s elapsed)\n\n    Alloc rate    5,204,746,932 bytes per MUT second\n\nTop consumer is `grabRest`.\n\n    COST CENTRE MODULE               SRC                                       %time %alloc\n    grabRest    Text.Trifecta.Rope   src/Text/Trifecta/Rope.hs:(67,1)-(73,65)   46.1   44.2\n    uncons      Data.ByteString.UTF8 Data/ByteString/UTF8.hs:(166,1)-(167,38)   16.2   17.9\n    asgB        Main                 bench/s/Main.hs:36:1-20                    12.5    9.0\n    varB        Main                 bench/s/Main.hs:39:1-20                    11.7    9.0\n    decode      Data.ByteString.UTF8 Data/ByteString/UTF8.hs:(68,1)-(124,32)    10.0   18.0\n    strand      Text.Trifecta.Rope   src/Text/Trifecta/Rope.hs:42:1-32           3.0    1.5\n\nMy questions are:\n\n1. Is it an expected behaviour?\n\n2. What can be the reason of such a huge heap allocation? is it because of `lookahead`?\n\n3. Is there a way to rewrite such a parser to make it alloc a little bit less space?\n\nFull source code - [Main.hs](https://gist.github.com/dmalikov/89a97620f073e9b6a4d6ab0a5bbf55a2)\n\nProf output - [Main.prof](https://gist.githubusercontent.com/dmalikov/01eaaf1146b36a23d2467e26acf192d2/raw/61aa37a2074af75db19a0ca7231f511738dcd8cf/Main.prof). It was ran with `-O2`, `-fprof-auto` and `\"-with-rtsopts=-N -p -s -h -i0.1\"`.\n\n1MB input file - [large1MB](https://gist.githubusercontent.com/dmalikov/dd59dd8f60dc922518d9eb57f489d7cd/raw/620f166d8d46ac4a44a9960bca359c2fb56e22cc/large1MB)\n", 
            "subreddit": "haskell", 
            "title": "[Help] parser allocs over 4GB in the heap for 1MB input", 
            "url": "https://www.reddit.com/r/haskell/comments/7280x2/help_parser_allocs_over_4gb_in_the_heap_for_1mb/"
        }, 
        {
            "author": "Shirogane86x", 
            "created_utc": 1506284619.0, 
            "domain": "self.haskell", 
            "id": "727inw", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/727inw/best_approach_for_a_small_desktop_application/", 
            "score": 8, 
            "selftext": "Basically, I need to create a desktop application for personal use(specifically, my little sister's personal use) and since I've been using(and loving) haskell for about a year now, I wanted to try it out(since I've only ever done command-line and web apps in it). I've heard that haskell isn't really doing great right now when it comes to desktop app development, so I was wondering what would be the most practical approach, and one that maybe doesn't boil down to imperative IO code, but that uses a more Haskell-like approach(so probably FRP?). The first idea that came to my mind, is Electron + GHCjs + some kind of FRP library(reflex?). But I don't really know how well it would work out.\nAbout the app: It isn't really complicated, but I'd like it to have a nice, slick interface(and that's why electron came to mind, i really like the design of web-based apps like discord or atom), and it needs to run well on windows 10( D: ). Also keep in mind I've never really done much with desktop apps(a bit with Java Swing at school, which was a nightmare, and a bit with electron. Most of my experience is in web development)", 
            "subreddit": "haskell", 
            "title": "Best approach for a small desktop application?", 
            "url": "https://www.reddit.com/r/haskell/comments/727inw/best_approach_for_a_small_desktop_application/"
        }, 
        {
            "author": "nongaussian", 
            "created_utc": 1506267961.0, 
            "domain": "self.haskell", 
            "id": "725r6v", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/725r6v/newbie_question_speeding_up_code_and_parallelism/", 
            "score": 7, 
            "selftext": "First, I understand that an absolute newbie asking about speeding up code and parallelism is more than little ironic. I am working through \"Learn you a Haskell\" while trying to decide whether Haskell is right for me. I am an academic economist, and I am trying to learn some Haskell to see if I could be more productive with it than with Fortran. Productive here means a combination of calculation time and debugging/coding, not just speed of computation.\n\nTo play with Haskell vs. Fortran I wrote a toy program to calculate primes. I am not interested in a faster algorithm to calculate primes, I want to keep them comparable in their naiveness towards the mathematical algorithm. I am asking if there is something in my Haskell programs that could dramatically make it faster. My Fortran program is a very simple combination of do-loops, not posting it here. To print out all primes among the first 1 million integers in my laptop the Fortran program executes in 0.7 seconds.\n\nMy first attempt in Haskell was the following:\n\n    isprime :: Integer -> Bool\n    isprime n = [(n,y) |  y<-[2..div n 2], mod n y == 0, y*y<n] == [] \n              \n    main = do\n      let aout = [ x | x<-[2..10^6], isprime x]\n      putStr . unlines $ map show aout \n\nThis was terrible slow, took several minutes to complete.\n\nMy second attempt was significantly better:\n\n    primetest :: Integer-> Integer -> Bool\n    primetest n m = if m*m>n\n                    then  True\n                    else\n                      if mod n m == 0\n                      then  False\n                      else  primetest n (m+1)\n         \n    \n    isprime :: Integer ->   Bool\n    isprime n=primetest n 2\n                  \n    main = do\n      let aout = [ x | x<-[2..10^6], isprime x]\n      putStr . unlines $ map show aout \n\nThis runs in 4.9 seconds, when compiled with -O2 option. So 5 times slower than Fortran. \n\nSo the questions:\n\n1) Is there anything obvious that I could do in the second version without sacrificing readability to make it faster (still more 5 times slower than Fortran). I can actually live with five times slower, so this is a secondary concern.\n\n2) How do I parallelize that the evaluation (in this case the \"let aout\" line)? Regardless of the language, I will be running my actual project on a supercomputer cluster with multiple CPUs, and so parallel processing is a must.  In Fortran and openmp it is a simple matter of just marking the loop you want to parallelize. I have tried to read Haskell parallelizing documentation/webpages, and my hunch is that \"parlist\" might be what I need, but I really can't figure out it based on documentation. Does anyone have a simple example on how to parallelize a list construction, or another comparable strategy?\n\nI hope posting a Newbie question is ok.", 
            "subreddit": "haskell", 
            "title": "Newbie question: Speeding up code and parallelism", 
            "url": "https://www.reddit.com/r/haskell/comments/725r6v/newbie_question_speeding_up_code_and_parallelism/"
        }, 
        {
            "author": "MagicMurderBagYT", 
            "created_utc": 1506250035.0, 
            "domain": "self.haskell", 
            "id": "724eeq", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 60, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/724eeq/weekly_beginner_saturday_hask_anything_5/", 
            "score": 30, 
            "selftext": "If you have a question or would like to help, then feel free to participate. :)\n\nLast week: https://www.reddit.com/r/haskell/comments/70g1jd/weekly_beginner_saturday_hask_anything_4/\n\nIt's one day late because my posts keep getting deleted for some reason.", 
            "subreddit": "haskell", 
            "title": "[Weekly] Beginner Saturday: Hask Anything - #5", 
            "url": "https://www.reddit.com/r/haskell/comments/724eeq/weekly_beginner_saturday_hask_anything_5/"
        }, 
        {
            "author": "jerweb63", 
            "created_utc": 1506247176.0, 
            "domain": "self.haskell", 
            "id": "7248yf", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7248yf/hi_im_just_taking_a_dive_into_haskell_and_have/", 
            "score": 6, 
            "selftext": "smallLetter :: Char -> Bool\nsmallLetter n = if n `elem` ['a'..'z'] \n               then True\n\n\nuni.hs:28:1: error:\n    parse error (possibly incorrect indentation or mismatched brackets)\n\nWhat could be giving this error? In my editor, line 25 is empty (blank line).\n", 
            "subreddit": "haskell", 
            "title": "Hi. I'm just taking a dive into Haskell and have run across a small problem with indentation", 
            "url": "https://www.reddit.com/r/haskell/comments/7248yf/hi_im_just_taking_a_dive_into_haskell_and_have/"
        }, 
        {
            "author": "flexibeast", 
            "created_utc": 1506220603.0, 
            "domain": "okmij.org", 
            "id": "722mus", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/722mus/nondeterminism_a_sublanguage_rather_than_a_monad/", 
            "score": 51, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "\"Non-determinism: a sublanguage rather than a monad\", by Oleg Kiselov. Effects without monads.", 
            "url": "http://okmij.org/ftp/tagless-final/nondet-effect.html"
        }, 
        {
            "author": "lexi-lambda", 
            "created_utc": 1506203916.0, 
            "domain": "youtube.com", 
            "id": "72185k", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Racket Lang", 
                    "author_url": "https://www.youtube.com/user/racketlang", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/3xFWcNarb3Q?start=216&feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/3xFWcNarb3Q/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "Inside Racket Seminar 7. Alexis King on Hackett", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72185k/inside_racket_seminar_7_alexis_king_on_hackett/", 
            "score": 47, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Inside Racket Seminar 7: Alexis King on Hackett", 
            "url": "https://www.youtube.com/watch?v=3xFWcNarb3Q&t=3m36s"
        }, 
        {
            "author": "ephrion", 
            "created_utc": 1506193168.0, 
            "domain": "parsonsmatt.org", 
            "id": "72066o", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/72066o/what_does_free_buy_us/", 
            "score": 49, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "What does Free buy us?", 
            "url": "http://www.parsonsmatt.org/2017/09/22/what_does_free_buy_us.html"
        }, 
        {
            "author": "terrorjack", 
            "created_utc": 1506184351.0, 
            "domain": "github.com", 
            "id": "71za1t", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71za1t/ann_nodejseval_execute_nodejs_scripts_in_haskell/", 
            "score": 24, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "[ANN] nodejs-eval: Execute Node.js scripts in Haskell", 
            "url": "https://github.com/TerrorJack/nodejs-eval"
        }, 
        {
            "author": "flexibeast", 
            "created_utc": 1506179745.0, 
            "domain": "self.haskell", 
            "id": "71ytnh", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71ytnh/someone_on_rmath_asked_can_you_give_some_concrete/", 
            "score": 14, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Someone on /r/math asked: \"[C]an you give some concrete examples of advances in the last decade in [type theory and categorical logic] ... at all relevant to the design of Haskell?\" Thoughts?", 
            "url": "https://www.reddit.com/r/haskell/comments/71ytnh/someone_on_rmath_asked_can_you_give_some_concrete/"
        }, 
        {
            "author": "f0rgot", 
            "created_utc": 1506170555.0, 
            "domain": "self.haskell", 
            "id": "71y1xp", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71y1xp/beginner_level_libraries_to_learn_haskell/", 
            "score": 6, 
            "selftext": "Hi Folks, \n\nDoes anyone have any beginner-level libraries whose source code might be a good way to level up in Haskell. Right now I'm trying to learn about a few different, common, monads, like state.\n\n(P.S. Beggers can't be choosers, but I would prefer a code base that uses some meaningful naming. For example `evalState stateProcessor state = let (a, _) = runState stateProcessor state\n                                 in a` is a lot easier to read than `evalState p s = let (a, _) = runState p s\n      in a`. ", 
            "subreddit": "haskell", 
            "title": "Beginner Level Libraries to Learn Haskell?", 
            "url": "https://www.reddit.com/r/haskell/comments/71y1xp/beginner_level_libraries_to_learn_haskell/"
        }, 
        {
            "author": "alexdarlington", 
            "created_utc": 1506159618.0, 
            "domain": "self.haskell", 
            "id": "71xdt6", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71xdt6/beginner_typeclass_question/", 
            "score": 6, 
            "selftext": "Hi,\nI am currently a little confused about one aspect of typeclasses and maybe someone can point me in the right direction?\n\nWhere I am struggling is that as I understand it:\n\nA List of Eq things will also be Eq\n\nBut a List of not Eq things will not be Eq\n\nI don't understand how this is happening (is it compiler magic for this special case?) and I don't see how I can do something similar with my own types (e.g. can I make a type A that is a member of class B if its parameter is a member of class C?)\n\nI hope that makes sense! Probably I am missing something simple/obvious but I couldn't seem to find the right google terms to get an answer.\n\nCheers!", 
            "subreddit": "haskell", 
            "title": "Beginner typeclass question", 
            "url": "https://www.reddit.com/r/haskell/comments/71xdt6/beginner_typeclass_question/"
        }, 
        {
            "author": "pepegg", 
            "created_utc": 1506157699.0, 
            "domain": "pepeiborra.wordpress.com", 
            "id": "71xa5g", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71xa5g/biapplicative_formlets/", 
            "score": 40, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Biapplicative formlets", 
            "url": "https://pepeiborra.wordpress.com/2017/09/21/formlets-are-biapplicative/"
        }, 
        {
            "author": "eeg_bert", 
            "created_utc": 1506115329.0, 
            "domain": "github.com", 
            "id": "71u35i", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71u35i/simula_a_3d_window_manager_written_in_haskell/", 
            "score": 89, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Simula: A 3D Window Manager written in Haskell (pre-alpha)", 
            "url": "https://github.com/SimulaVR/Simula"
        }, 
        {
            "author": "vem_", 
            "created_utc": 1506113992.0, 
            "domain": "blog.vmchale.com", 
            "id": "71ty4z", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71ty4z/why_lenses_work/", 
            "score": 23, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Why lenses work", 
            "url": "http://blog.vmchale.com/article/why-lenses-work"
        }, 
        {
            "author": "f0rgot", 
            "created_utc": 1506110144.0, 
            "domain": "self.haskell", 
            "id": "71tj94", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71tj94/a_series_of_questions_on_how_replicatem_and_a/", 
            "score": 5, 
            "selftext": "Hi everyone,\n\nI am getting my feet wet with the the chapter on the State monad from the Haskell WikiBook (https://en.wikibooks.org/wiki/Haskell/Understanding_monads/State).\n\nI got stuck on the problem where I was asked to implement a function `rollNDice :: Int -> State StdGen [Int]`, given a function `rollDie :: State StdGen Int`.\n\nI didn't think about using `replicateM` in this problem, even though it was easy for me to find the solution to the problem when we were dealing with `rollNDiceIO :: Int -> IO [Int]`. The series of questions is motivated by the gap in my understanding that this problem exposed. \n\nFirst, the information definition of `replicateM` (https://hackage.haskell.org/package/base-4.10.0.0/docs/Control-Monad.html#v:replicateM) states that it \"performs an action n times, gathering the results\".\n\nWhat else is an action? I've only hard the term used when describing IO, but that is obviously not the case.\n\nSecondly, I think of `IO` as a container that holds a value, and it makes sense to me how `replicateM` will extract the values out of those containers and give me back the values sans container. However, that doesn't hold for `State s a`, because it is only a container for a function of type `s -> (a, s)`, but I don't get back a list of functions when I use `replicateM` with a `State s a` value.\n\nI think that my understanding of what `replicateM` does it too tied into `IO`, and not general to any type constructor that has an instance of `Applicative`. I still don't understand how `replicateM` was useful in converting a value of type `State StdGen Int` to `State StdGen [Int]`. \n\nThis is a rambling post, but I'm confused. ", 
            "subreddit": "haskell", 
            "title": "A series of questions on how replicateM and a type like State StdGen Int work.", 
            "url": "https://www.reddit.com/r/haskell/comments/71tj94/a_series_of_questions_on_how_replicatem_and_a/"
        }, 
        {
            "author": "phadej", 
            "created_utc": 1506100705.0, 
            "domain": "hackage.haskell.org", 
            "id": "71sgod", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71sgod/ann_treediff_diffing_of_expression_trees/", 
            "score": 54, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "[ANN] tree-diff: Diffing of (expression) trees.", 
            "url": "https://hackage.haskell.org/package/tree-diff"
        }, 
        {
            "author": "ssyrek", 
            "created_utc": 1506096587.0, 
            "domain": "self.haskell", 
            "id": "71rzv5", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71rzv5/please_help_me_localize_my_haskell_study_startup/", 
            "score": 9, 
            "selftext": "My [repo for helping people start Haskell study groups](https://github.com/sjsyrek/haskell-study-startup) has gotten a bit of attention, and a few groups have sprung up around the world.\n\nI think it would be useful, however, if the repo were [translated into other languages](https://github.com/sjsyrek/haskell-study-startup/issues/4), which I am not really competent to do, at least not well. If anyone is interested, I'd appreciate the assistance. This would make a good [Hacktoberfest](https://hacktoberfest.digitalocean.com/) project, perhaps, if anyone wants a free T-shirt.\n\nI've also been making edits here and there. If anyone has constructive advice on the content or organization, I am willing to entertain it. I realize it's wordy and therefore hard to expect everyone to read everything, but I'm mostly worried that I've either left important things out or not emphasized them enough.\n\nSee the [issue](https://github.com/sjsyrek/haskell-study-startup/issues/4) for details. Thanks!", 
            "subreddit": "haskell", 
            "title": "Please help me localize my \"Haskell study startup\" repo", 
            "url": "https://www.reddit.com/r/haskell/comments/71rzv5/please_help_me_localize_my_haskell_study_startup/"
        }, 
        {
            "author": "eeg_bert", 
            "created_utc": 1506093284.0, 
            "domain": "self.haskell", 
            "id": "71rmpr", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71rmpr/why_cant_ghci_print_function_definitions/", 
            "score": 14, 
            "selftext": "If LISP can do this why can't we? For example, typing `:info funcName` can already yield:\n\n    *Main Lib> :info funcName\n     funcName :: TypeInput -> TypeOutput\n      \t-- Defined at /path/to/haskell/Module.hs:385:1\n\nThus it's evident that GHCi can locate where in the source code a function definition is. So why doesn't it go the extra mile and just print its definition? This would augment code inspection tremendously.\n\nAnd if GHCi can't do this, I wonder if Intero or other REPL wrappers can? It would be amazing if you could do this for any function whatsoever (including those you have imported from stack, or even GHC Prelude definitions). This would allow you to inspect functions all the way to lowest level. If Haskell could allow this, the only thing that LISP REPLs would have over GHCi (AFAIK) would be live code reloading.", 
            "subreddit": "haskell", 
            "title": "Why Can't GHCi Print Function Definitions?", 
            "url": "https://www.reddit.com/r/haskell/comments/71rmpr/why_cant_ghci_print_function_definitions/"
        }, 
        {
            "author": "hicksy994", 
            "created_utc": 1506089771.0, 
            "domain": "self.haskell", 
            "id": "71r96j", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71r96j/missing_files_in_base_package/", 
            "score": 3, 
            "selftext": "I have never had this before but today I tried to use ghc and get:\n\nCould not find module \n\nThere are files missing in the base-4.10.0.0 package\n\nghc-pkg check returns:\n\nhttps://pastebin.com/aCmr9igi\n\nAny ideas on how to fix this? I'm on arch-linux", 
            "subreddit": "haskell", 
            "title": "Missing files in base package?", 
            "url": "https://www.reddit.com/r/haskell/comments/71r96j/missing_files_in_base_package/"
        }, 
        {
            "author": "cocreature", 
            "created_utc": 1506084193.0, 
            "domain": "tweag.io", 
            "id": "71qqcj", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71qqcj/ghc_compiler_plugins_in_the_wild_typing_java/", 
            "score": 70, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "GHC Compiler Plugins in the Wild: Typing Java", 
            "url": "http://www.tweag.io/posts/2017-09-22-inline-java-ghc-plugin.html"
        }, 
        {
            "author": "southp0105", 
            "created_utc": 1506074013.0, 
            "domain": "self.haskell", 
            "id": "71pzaj", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71pzaj/does_the_benchmark_in_bytestringbuilder_still_hold/", 
            "score": 16, 
            "selftext": "I'm studying how ByteString works under the hood. When going through the document here: https://hackage.haskell.org/package/bytestring-0.10.8.2/docs/Data-ByteString-Builder.html . In it, there was an intriguing paragraph about how performance comparison:\n\n> Looking again at the definitions above, we see that we took care to avoid intermediate data structures, as otherwise we would sacrifice performance. For example, the following (arguably simpler) definition of renderRow is about 20% slower.\n\n    renderRow :: Row -> Builder\n    renderRow  = mconcat . intersperse (charUtf8 ',') . map \n    renderCell\n\nHowever, when I ran it on my machine, a MBP with 2.5 GHz Intel Core i7, the result was opposite. Benchmarking the supposedly-slower implementation gave me:\n\n\n    time                 5.715 ms   (5.607 ms .. 5.829 ms)\n                         0.998 R\u00b2   (0.997 R\u00b2 .. 0.999 R\u00b2)\n    mean                 4.145 ms   (3.846 ms .. 4.362 ms)\n    std dev              580.0 \u03bcs   (451.9 \u03bcs .. 768.7 \u03bcs)\n    variance introduced by outliers: 70% (severely inflated)\n\nWhile the original version gave me:\n\n    time                 7.766 ms   (7.547 ms .. 8.105 ms)\n                         0.992 R\u00b2   (0.980 R\u00b2 .. 0.999 R\u00b2)\n    mean                 6.174 ms   (5.850 ms .. 6.500 ms)\n    std dev              755.0 \u03bcs   (554.1 \u03bcs .. 1.071 ms)\n    variance introduced by outliers: 61% (severely inflated)\n\nDoes the benchmark still hold? If not, why? Am I misunderstanding something? \n\nThanks.", 
            "subreddit": "haskell", 
            "title": "Does the benchmark in ByteString.Builder still hold?", 
            "url": "https://www.reddit.com/r/haskell/comments/71pzaj/does_the_benchmark_in_bytestringbuilder_still_hold/"
        }, 
        {
            "author": "dalaing", 
            "created_utc": 1506037861.0, 
            "domain": "blog.qfpl.io", 
            "id": "71n8oc", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71n8oc/behaviors_reflex_blog_series_crosspost_rreflexfrp/", 
            "score": 48, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Behaviors [reflex blog series, crosspost /r/reflexfrp]", 
            "url": "https://blog.qfpl.io/posts/reflex/basics/behaviors/"
        }, 
        {
            "author": "Faucelme", 
            "created_utc": 1506023740.0, 
            "domain": "self.haskell", 
            "id": "71lrc5", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71lrc5/dsls_libraries_for_reporting/", 
            "score": 6, 
            "selftext": "Are there any Haskell DSLs or libraries that handle the definition of \"reports\" summarizing a stream of business data / events?\n\nI'm not referring to the final layout in the page, but to the number of analyses to perform, the type of each analysis, the time range and granularity for each analysis, things like that.\n\nI'm interested in both concrete examples and the general principles that could inform the design of such libraries.\n\n(I suppose some streaming / fold library could be useful when \"running\" a report.)", 
            "subreddit": "haskell", 
            "title": "DSLs / libraries for reporting?", 
            "url": "https://www.reddit.com/r/haskell/comments/71lrc5/dsls_libraries_for_reporting/"
        }, 
        {
            "author": "haskellweekly", 
            "created_utc": 1506011295.0, 
            "domain": "haskellweekly.news", 
            "id": "71kard", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71kard/issue_73_haskell_weekly/", 
            "score": 33, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Issue 73 :: Haskell Weekly", 
            "url": "http://haskellweekly.news/issues/73.html"
        }, 
        {
            "author": "glittering_cbeams", 
            "created_utc": 1506003077.0, 
            "domain": "self.haskell", 
            "id": "71jday", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71jday/help_modeling_list_of_pointets/", 
            "score": 5, 
            "selftext": "I'm trying to model a list of pointers, where each pointer points to some type of data(the type being stored along with the pointer), and to access the data, you just cast the pointer to that type. The reason why I'm using pointers is to avoid making each element in the list as big as the largest type. That's why I can't simply use:\ndata T = Type1 ... | Type2 ... | Type3 ...\n\nSome C code might help explain the problem:\nenum Type { Type1, Type2, Type3 };\nstruct foo { void *p; Type t; };\nstruct foo list[50]; // <--- this\n\nEdit:\nI was wrong: only unboxed types behave like that, boxed ones don't. Thanks for everyone's help.", 
            "subreddit": "haskell", 
            "title": "Help modeling list of pointets", 
            "url": "https://www.reddit.com/r/haskell/comments/71jday/help_modeling_list_of_pointets/"
        }, 
        {
            "author": "terrorjack", 
            "created_utc": 1505996981.0, 
            "domain": "neilmitchell.blogspot.com", 
            "id": "71isdb", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71isdb/shake_016_revised_rule_definitions/", 
            "score": 50, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Shake 0.16 - revised rule definitions", 
            "url": "https://neilmitchell.blogspot.com/2017/09/shake-016-revised-rule-definitions.html"
        }, 
        {
            "author": "funandprofit", 
            "created_utc": 1505957326.0, 
            "domain": "self.haskell", 
            "id": "71fuwa", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 61, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71fuwa/what_libraries_could_you_not_live_without/", 
            "score": 74, 
            "selftext": "What are some of your favorite libraries that you use daily, and would represent a significant setback were they to disappear tomorrow? What makes them better than similar libraries?", 
            "subreddit": "haskell", 
            "title": "What libraries could you not live without?", 
            "url": "https://www.reddit.com/r/haskell/comments/71fuwa/what_libraries_could_you_not_live_without/"
        }, 
        {
            "author": "deque-blog", 
            "created_utc": 1505912432.0, 
            "domain": "deque.blog", 
            "id": "71aw8y", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71aw8y/transforming_data_structures_into_types_an/", 
            "score": 50, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Transforming data structures into types: an introduction to dependent typing and its benefits", 
            "url": "https://deque.blog/2017/09/20/data-structure-into-types/"
        }, 
        {
            "author": "34798s7d98t6", 
            "created_utc": 1505901949.0, 
            "domain": "bobkonf.de", 
            "id": "71a26z", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71a26z/call_for_contributions_bob_2018_berlin_feb_23_2018/", 
            "score": 17, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Call for Contributions: BOB 2018 - Berlin, Feb 23, 2018", 
            "url": "http://bobkonf.de/2018/en/cfp.html"
        }, 
        {
            "author": "dalaing", 
            "created_utc": 1505872735.0, 
            "domain": "blog.qfpl.io", 
            "id": "717xga", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 25, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/717xga/events_reflex_blog_series_crosspost_rreflexfrp/", 
            "score": 56, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Events [reflex blog series, crosspost /r/reflexfrp]", 
            "url": "https://blog.qfpl.io/posts/reflex/basics/events/"
        }, 
        {
            "author": "krautA", 
            "created_utc": 1505856819.0, 
            "domain": "hal2017.softbase.org", 
            "id": "716bob", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/716bob/program_for_haskell_in_leipzig_hal_2017_has_been/", 
            "score": 31, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Program for Haskell in Leipzig HAL 2017 has been published and registration is open", 
            "url": "https://hal2017.softbase.org/program"
        }, 
        {
            "author": "samuli_thomasson", 
            "created_utc": 1505855614.0, 
            "domain": "self.haskell", 
            "id": "7166v5", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7166v5/haskell_job_opportunity_at_relex_solutions_in/", 
            "score": 27, 
            "selftext": "Would you like to get paid for writing Haskell? And do you live in Helsinki,\nFinland area (or could re-locate)? If yes, please read on.\n\nRELEX Solutions is Europe\u2019s fastest growing provider of integrated retail and\nsupply chain planning solutions. We are now hiring one or two Haskell\nprogrammers in Helsinki, Finland to join our small but impactful group of\nHaskellers to develop our internal tools.\n\nYou would be working pretty much exclusively in Haskell and Elm. Exact role is\nsomewhat flexible, depending on what other skills you might bring to the table.\nRead more and apply now here:\n\nhttps://www.relexsolutions.com/open-positions/#op-209192-haskell-and-elm-enthusiast\n\nA good working knowledge of general Haskell programming is preferred, although\neager learners can and should apply as well - if it's a good match, you just\npick up the skills on the job.\n\nUnfortunately, we can't accept full remote for this position, so you should be\nable to be be present at the Helsinki office at least some days every week.\nOther details are largely negotiable.\n\nNote that the deadline for applications is quite soon, by October 2nd.\n", 
            "subreddit": "haskell", 
            "title": "Haskell job opportunity at RELEX Solutions in Helsinki, Finland", 
            "url": "https://www.reddit.com/r/haskell/comments/7166v5/haskell_job_opportunity_at_relex_solutions_in/"
        }, 
        {
            "author": "haskellgr8", 
            "created_utc": 1505845523.0, 
            "domain": "self.haskell", 
            "id": "714zhv", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 25, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/714zhv/can_i_build_up_a_char_seq_int_without_blowing_up/", 
            "score": 3, 
            "selftext": "I want to build up a [(Char, Seq Int)].\n\nThe list is relatively short. In other words, there are only a few character. Each sequence starts out empty. Example initial state: **[('Q', empty), ('P', empty), ('Z', empty), ('X', empty)]**.\n\nThe sequences will always have the same length. Each \"iteration\" in the program will add an integer to all the sequences. There will be millions of iterations.\n\nCan this be done - can these sequences be created - without blowing up memory/time?\n\nI feel like I have only two bad choices:\n\n1. On each iteration, use \"force\" (Control.Deepseq) to make sure I'm not leaking thunks. But this is really slow - O(n^2 ) - because I'm fully computing the sequences every time an element is added.\n\n2. On each iteration, don't force to NF. But I see no way to do this without accumulating massive amount of thunk, thereby blowing up memory.\n", 
            "subreddit": "haskell", 
            "title": "Can I build up a [(Char, Seq Int)] without blowing up memory/time?", 
            "url": "https://www.reddit.com/r/haskell/comments/714zhv/can_i_build_up_a_char_seq_int_without_blowing_up/"
        }, 
        {
            "author": "jtolds", 
            "created_utc": 1505838804.0, 
            "domain": "goc.vivint.com", 
            "id": "7146dr", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7146dr/simple_explanation_of_how_hindleymilner_type/", 
            "score": 35, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Simple explanation of how Hindley-Milner type inference works - Vivint's Game of Codes", 
            "url": "https://goc.vivint.com/problems/hm"
        }, 
        {
            "author": "mightybyte", 
            "created_utc": 1505833280.0, 
            "domain": "youtube.com", 
            "id": "713jdr", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Compose Conference", 
                    "author_url": "https://www.youtube.com/channel/UC0pEknZxL7Q1j0Ok8qImWdQ", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/qZ4O-1VYv4c?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/qZ4O-1VYv4c/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "The Probability Monad", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 27, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/713jdr/compose_conference_the_probability_monad/", 
            "score": 52, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Compose Conference - The Probability Monad", 
            "url": "https://www.youtube.com/watch?v=qZ4O-1VYv4c"
        }, 
        {
            "author": "Kasc", 
            "created_utc": 1505819057.0, 
            "domain": "self.haskell", 
            "id": "7127ld", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7127ld/yesod_devel_stack_local_dependencies_and_tests/", 
            "score": 5, 
            "selftext": "I'm not convinced that this is the best place to have this discussion or ask these questions, if there's a better spot could someone point me in the right direction?\n \nWe have a large yesod devel project (`web-service`) as well as the separate project which contains all of our business logic (`the-model`) so that we can share it amongst our different services / projects / throwaway tools.\n\nWhen running `yesod devel` (installed via the [current master yesod branch at time of posting](https://github.com/yesodweb/yesod/tree/4f6b07c2fb4dde8176dea61063c2e57eedc643ff on github), the command to stack appears to be: `stack build --fast --file-watch web-service:lib --exec \"/home/user/.local/bin/yesod devel-signal\" --flag web-service:dev --flag web-service:library-only`.\n\nWe previously used `yesod devel` back when it built directly using `cabal`, but we had problems where local dependencies were not being watched which has since been solved since the adoption of `stack`.\n\nThere are a couple of pain points left:\n\n* When iterating on our selenium tests (which is a test suite attached to `web-service`), the signal is sent to the development server, triggering (at the very least) a model reinitialisation. This restart can take anywhere from a few seconds to a couple of minutes depending on what data set we're working with in development.\n\n Is there a way to stop `yesod devel` (or rather, `stack`) from noticing changes in test suites whilst using `--file-watch`? \n\n* When iterating on `the-model`, it's ideal to run unit tests before accepting that the build was a success. We can do this ` stack build the-model --fast --file-watch --test`. As far as I'm aware there's no way to integrate this in to `yesod-devel`.\n\nAre there solutions to these problems? My wishlist is to be able to:\n \n* Tag certain test suites as required to be run and pass before accepting the build\n* Tag certain test suites as not important so that the files aren't watched\n* Both of these need to work for local dependencies, i.e. `web-service` depends upon `the-model`, which are both in the same repo.\n\n", 
            "subreddit": "haskell", 
            "title": "Yesod devel, stack, local dependencies and tests", 
            "url": "https://www.reddit.com/r/haskell/comments/7127ld/yesod_devel_stack_local_dependencies_and_tests/"
        }, 
        {
            "author": "Kurren123", 
            "created_utc": 1505816914.0, 
            "domain": "self.haskell", 
            "id": "71229x", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/71229x/what_do_haskellers_thing_of_the_elm_way_of_io/", 
            "score": 18, 
            "selftext": "In [tackling the awkward squad](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/mark.pdf), the author mentions that IO in Haskell used to be something like this:\n    \n    type FilePath = String\n\n    data Request = ReadFile FilePath\n    | WriteFile FilePath String\n    | ....\n\n    data Response = RequestFailed\n    | ReadSucceeded String\n    | WriteSucc    \n    | ....\n\nBut then goes on to say that this didn't work well so we now use monadic IO.\n\nElm seems to sit kind of in the middle of these two patterns. There are messages into the program (similar to `response`) however outputs from the program can sometimes be composed using [`andThen`](http://package.elm-lang.org/packages/elm-lang/core/latest/Task#andThen) (Elm's version of `>>=`).\n\nTo me the request and response version is highly testable because you can just give different responses to your program and see if it produces the correct requests. Monadic IO doesn't seem to have the same testability. \n\nElm looks like it has struck a nice medium between testability and composition of IO. I haven't worked with Haskell for long but as far as I have seen there is no [time travelling debugger](http://elm-lang.org/blog/the-perfect-bug-report) like Elm. Is this even possible with monadic IO?\n\nDo you have a preference for the method of IO used? Do you think IO in Haskell should be changed or do you prefer it as it is?", 
            "subreddit": "haskell", 
            "title": "What do Haskellers thing of the Elm way of IO?", 
            "url": "https://www.reddit.com/r/haskell/comments/71229x/what_do_haskellers_thing_of_the_elm_way_of_io/"
        }, 
        {
            "author": "seestevecode", 
            "created_utc": 1505812051.0, 
            "domain": "self.haskell", 
            "id": "711qxo", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/711qxo/which_version_of_cis_194_is_the_best_and_why/", 
            "score": 7, 
            "selftext": "I'm trying to self-learn Haskell from scratch and a lot of resources recommend CIS 194 as the best starting point for someone with some programming background, but new to FP/Haskell.\n\nThe Spring 2013 version of CIS 194 seems to be the one everyone is recommending, but there are other (more recent) versions available too. I was just wondering if someone could let me know why this version is the most recommended, if indeed it still is.", 
            "subreddit": "haskell", 
            "title": "Which version of CIS 194 is the best and why?", 
            "url": "https://www.reddit.com/r/haskell/comments/711qxo/which_version_of_cis_194_is_the_best_and_why/"
        }, 
        {
            "author": "nokidd", 
            "created_utc": 1505800866.0, 
            "domain": "greenlab.di.uminho.pt", 
            "id": "7111gt", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7111gt/energy_efficiency_across_programming_languages/", 
            "score": 43, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Energy Efficiency across Programming Languages", 
            "url": "http://greenlab.di.uminho.pt/wp-content/uploads/2017/09/paperSLE.pdf"
        }, 
        {
            "author": "funandprofit", 
            "created_utc": 1505793021.0, 
            "domain": "self.haskell", 
            "id": "710fdo", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/710fdo/why_do_we_need_and_from_profunctor/", 
            "score": 27, 
            "selftext": "Forgive me for bringing up an old issue, I know this has been discussed before but I can't seem to find the answer I'm looking for.\n\n[previously](https://www.reddit.com/r/haskell/comments/3kbj9r/edward_kmett_the_unreasonable_effectiveness_of/cuwucle/) Edward Kmett mentioned that they're needed in lens. But [here](https://hackage.haskell.org/package/base-4.10.0.0/docs/Data-Coerce.html#t:Coercible) in the docs it says:\n\n> every type constructor there is an instance that allows to coerce under the type constructor\n\nSo it looks like the compiler should be able to derive `Coercible` for `p` so long as you're not doing anything funny with GADTs, which is exactly what the user is promising when using `Profunctor.Unsafe`.\n\nI suspect the answer is here:\n> We can't even rely on representational arguments because of libraries that are 'morally' functors but contain separate constructors to manage the change rather than using Yoneda.\nBut I can't think of any reason this would be necessary - is it just to interop with \"bad\" libraries?\n\nIs there a nice concrete example of when a simple `Coercible` can't be used?", 
            "subreddit": "haskell", 
            "title": "Why do we need (#.) and (.#) from Profunctor?", 
            "url": "https://www.reddit.com/r/haskell/comments/710fdo/why_do_we_need_and_from_profunctor/"
        }, 
        {
            "author": "ismail-s", 
            "created_utc": 1505770587.0, 
            "domain": "self.haskell", 
            "id": "70y85l", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70y85l/why_cant_we_distribute_cmm_or_ghc_core/", 
            "score": 27, 
            "selftext": "As far as I understand, GHC compiles Haskell code to GHC Core, then something called STG, then C-- and this is then somehow turned to native code (depending on the backend).\n\nAre any of these intermediate languages platform-independent? If so, why don't we distribute code on hackage or stackage that has been pre-compiled to one of these intermediate languages? Wouldn't this speed up compilation with GHC?\n\nThis thought came to me as I've had to recompile some code from scratch (taking ~1.5 hours or so). I expect others will have thought of it before me.", 
            "subreddit": "haskell", 
            "title": "Why can't we distribute Cmm or GHC Core?", 
            "url": "https://www.reddit.com/r/haskell/comments/70y85l/why_cant_we_distribute_cmm_or_ghc_core/"
        }, 
        {
            "author": "edsko", 
            "created_utc": 1505749565.0, 
            "domain": "well-typed.com", 
            "id": "70vuml", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70vuml/new_tool_visualizing_lazy_evaluation/", 
            "score": 89, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "New tool: Visualizing lazy evaluation", 
            "url": "http://www.well-typed.com/blog/2017/09/visualize-cbn/"
        }, 
        {
            "author": "gallais", 
            "created_utc": 1505744481.0, 
            "domain": "blog.vmchale.com", 
            "id": "70vart", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70vart/mixing_supercompilers_and_recursion_using_elgot/", 
            "score": 22, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Mixing Supercompilers and Recursion Using Elgot Algebras", 
            "url": "http://blog.vmchale.com/article/elgot"
        }, 
        {
            "author": "cocreature", 
            "created_utc": 1505711449.0, 
            "domain": "fpcomplete.com", 
            "id": "70swlo", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70swlo/cryptographic_hashing_in_haskell/", 
            "score": 40, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Cryptographic Hashing in Haskell", 
            "url": "https://www.fpcomplete.com/blog/2017/09/cryptographic-hashing-haskell"
        }, 
        {
            "author": "shane7881", 
            "created_utc": 1505709153.0, 
            "domain": "self.haskell", 
            "id": "70sq8z", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 23, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70sq8z/can_someone_teach_me_how_to_make_pong/", 
            "score": 6, 
            "selftext": "I just want to do a simple project to get me started with making games in haskell.", 
            "subreddit": "haskell", 
            "title": "Can someone teach me how to make pong?", 
            "url": "https://www.reddit.com/r/haskell/comments/70sq8z/can_someone_teach_me_how_to_make_pong/"
        }, 
        {
            "author": "dogweather", 
            "created_utc": 1505707997.0, 
            "domain": "self.haskell", 
            "id": "70smza", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70smza/articlebook_request_hackage_howto/", 
            "score": 13, 
            "selftext": "...written from the perspective of watching over the shoulder of an experienced Haskell developer. Because Hackage is still pretty mysterious to me, even though I've deployed production apps in Haskell now. And I've never seen docs that lay out what I'd like to know. (And I bet most people learning the ecosystem.) \n\nTreating Hackage as a tool:\n\n**Generally**\n\n* How often do you use the Hackage website?\n* Are you usually logged in with an account, or not?\n* Do you keep it open in browser tab?\n* What questions do you go to the site to answer?\n* Is there some other app or resource that you use to get the Hackage content besides the `hackage.haskell.org` app?\n\n**Information**\n\n* When you go to a package's home page what do you use it for? E.g. https://hackage.haskell.org/package/hspec\n* Do you use the **Modules** section on the home page? Does it serve as the initial link into the API docs?\n* How do you figure out if a library is well maintained, or is abandonware?\n* On a particular library page (nomenclature?) e.g. https://hackage.haskell.org/package/inflections-0.4.0.0/docs/Text-Inflections.html what do the `Instances` sections tell you?\n* Do you upvote libraries you like?\n\n**Workflows**\n\n* What are some use cases that takes you to the hackage web app, and what do you do? I.e., where do you look, and what do you click? What areas are important, and which do you ignore?\n\n\nEtc. I came up with these off the top of my head, as someone who finds it pretty difficult to use.", 
            "subreddit": "haskell", 
            "title": "Article/book request: \"Hackage How-To\"", 
            "url": "https://www.reddit.com/r/haskell/comments/70smza/articlebook_request_hackage_howto/"
        }, 
        {
            "author": "dalaing", 
            "created_utc": 1505706464.0, 
            "domain": "blog.qfpl.io", 
            "id": "70sicf", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70sicf/an_introduction_to_reflex/", 
            "score": 81, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "An introduction to reflex", 
            "url": "https://blog.qfpl.io/posts/reflex/basics/introduction/"
        }, 
        {
            "author": "f0rgot", 
            "created_utc": 1505685144.0, 
            "domain": "self.haskell", 
            "id": "70qjrd", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70qjrd/integrating_katip_logging_library_into_servant/", 
            "score": 11, 
            "selftext": "Hi folks, \n\nI am trying to integrate katip (https://hackage.haskell.org/package/katip) into an existing project (https://github.com/parsonsmatt/servant-persistent). \n\nI know that there katip provides examples (https://github.com/Soostone/katip/tree/master/katip/examples), but I am still not getting it. \n\nThe haddocks for the katip module (https://hackage.haskell.org/package/katip-0.5.0.1/docs/Katip.html) outline a general \"checklist\" of what I have to do, so I am just doing that and letting the type errors lead me.\n\nI have the first two items on that checklist done (https://github.com/StevenXL/servant-persistent/tree/add-katip), but I have no idea what the third step means:\n\nEither use KatipT or KatipContextT for a pre-built transformer stack or add Katip and KatipContext instances to your own transformer stack. If you do the latter, you may want to look in the examples dir for some tips on composing contexts and namespaces.\n\nCan anyone point me down the correct path? I'm getting on a flight now and downloaded a tutorial on monad transformers, because I think that's what that third part is referring to. ", 
            "subreddit": "haskell", 
            "title": "Integrating katip logging library into servant", 
            "url": "https://www.reddit.com/r/haskell/comments/70qjrd/integrating_katip_logging_library_into_servant/"
        }, 
        {
            "author": "fintanh", 
            "created_utc": 1505658243.0, 
            "domain": "medium.com", 
            "id": "70nqxp", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70nqxp/free_me_exploring_the_free_data_type/", 
            "score": 31, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Free Me \u2014 Exploring the Free Data Type", 
            "url": "https://medium.com/@fintan.halpenny/free-me-exploring-the-free-data-type-c863499a82f8"
        }, 
        {
            "author": "mcapodici", 
            "created_utc": 1505634941.0, 
            "domain": "haskell.fun", 
            "id": "70ma8n", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70ma8n/making_google_tasks_better_in_haskell_part_2/", 
            "score": 29, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Making Google Tasks Better [In Haskell] - Part 2", 
            "url": "https://haskell.fun/2017/09/17/making-google-tasks-better-part-2/"
        }, 
        {
            "author": "binobi", 
            "created_utc": 1505608752.0, 
            "domain": "self.haskell", 
            "id": "70kj0v", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70kj0v/im_building_an_app_related_to_dota/", 
            "score": 36, 
            "selftext": "This is my first real-worldish Haskell project - might be useful to fellow haskell beginners.\n\nhttps://github.com/binobi/dotafeed\n\nIf you love dota and/or would like to contribute, let me know. Also, would appreciate any feedback.\n\nCheers!\n\n", 
            "subreddit": "haskell", 
            "title": "I'm building an app related to dota", 
            "url": "https://www.reddit.com/r/haskell/comments/70kj0v/im_building_an_app_related_to_dota/"
        }, 
        {
            "author": "WarDaft", 
            "created_utc": 1505590923.0, 
            "domain": "self.haskell", 
            "id": "70ixk0", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 35, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70ixk0/code_challenge_bad_id/", 
            "score": 54, 
            "selftext": "For this challenge, you must create a function of type `a -> a` that is total, correct for almost all types, but if passed a boolean will negate it. \n\nOne of my friends at first thought this would be easy, but since it was proposed, none of us have been able to think of a way to make this, no matter what level of unsafe functions we use (basically we nerd sniped ourselves). I'm curious to see if anyone else can, or prove it impossible.", 
            "subreddit": "haskell", 
            "title": "Code challenge: Bad id", 
            "url": "https://www.reddit.com/r/haskell/comments/70ixk0/code_challenge_bad_id/"
        }, 
        {
            "author": "zoetebeer", 
            "created_utc": 1505560060.0, 
            "domain": "self.haskell", 
            "id": "70gbaq", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70gbaq/unsafe_subscript_operator_on_infinite_lists/", 
            "score": 7, 
            "selftext": "Morning,\nI am a newcomer. Lately I have been following [Haskell Book](http://haskellbook.com) and was tasked to write a Ceaser cipher. I did my my best and it kind of works but one question came to my mind. I am aware that **!!** subscript operator is unsafe but what would you do if you had an infinite list ? Would you use it without any hesitation or still access it using safer methods?\n\nHope it is not a stupid question. Thanks", 
            "subreddit": "haskell", 
            "title": "Unsafe subscript operator on infinite lists", 
            "url": "https://www.reddit.com/r/haskell/comments/70gbaq/unsafe_subscript_operator_on_infinite_lists/"
        }, 
        {
            "author": "MagicMurderBagYT", 
            "created_utc": 1505554921.0, 
            "domain": "self.haskell", 
            "id": "70g1jd", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 111, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70g1jd/weekly_beginner_saturday_hask_anything_4/", 
            "score": 34, 
            "selftext": "If you have a question or would like to help, then feel free to participate. :)\n\nLast week: https://www.reddit.com/r/haskell/comments/6yy9we/weekly_beginner_saturday_hask_anything_3/\n\nEdit: ~~I can't post in this sub anymore as my posts are deleted immediately. If someone wants to take over, go for it.~~", 
            "subreddit": "haskell", 
            "title": "[Weekly] Beginner Saturday: Hask Anything - #4", 
            "url": "https://www.reddit.com/r/haskell/comments/70g1jd/weekly_beginner_saturday_hask_anything_4/"
        }, 
        {
            "author": "piyushkurur", 
            "created_utc": 1505536328.0, 
            "domain": "self.haskell", 
            "id": "70f045", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70f045/making_the_wiki_a_submodule_of_the_main_repo/", 
            "score": 12, 
            "selftext": "Refer the post below due to /u/snoyberg \nhttp://www.yesodweb.com/blog/2015/08/thoughts-on-documentation\n\nMy observation after developing raaz for some time is that most of what he says on wikis are true. The raaz wiki is languishing with outdated information. His solution seems to be to maintain the docs right in the repository. In this context I want to know the opinion on the following idea which can work in the case of github wikis. Keep the wiki as a submodule of the main repository. Thus the docs are \"in the repository\" and we get the advantage of a hosted wiki on github.\n\nObviously just keeping a submodule is not magically going to improve the situation of the docs. But I want to know whether some one has tried this.", 
            "subreddit": "haskell", 
            "title": "Making the wiki a submodule of the main repo", 
            "url": "https://www.reddit.com/r/haskell/comments/70f045/making_the_wiki_a_submodule_of_the_main_repo/"
        }, 
        {
            "author": "roboboticus", 
            "created_utc": 1505531350.0, 
            "domain": "self.haskell", 
            "id": "70enel", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70enel/what_drives_the_ordering_of_type_signature/", 
            "score": 12, 
            "selftext": "I'm reading \"Haskell Programming from first principles\", and lots of the type signatures involving numbered variables like t1, t2, etc. appear reversed compared to what I see when I try them out in GHCi.\n\nI know the names are not taken to be significant, but clearly something is assigning variable names according to some incrementing scheme and I'm curious what that might be and why it differs in my environment from that of the author's.\n\nFor example, the book shows:\n\n    Prelude> let uncurry f (a, b) = f a b\n    Prelude> :t uncurry\n    uncurry :: (t1 -> t2 -> t) -> (t1, t2) -> t\n\nWhen I try this, I see the following type signature:\n\n    uncurry :: (t2 -> t1 -> t) -> (t2, t1) -> t", 
            "subreddit": "haskell", 
            "title": "What drives the ordering of type signature variables (e.g. t1, t2, etc.)?", 
            "url": "https://www.reddit.com/r/haskell/comments/70enel/what_drives_the_ordering_of_type_signature/"
        }, 
        {
            "author": "arkaros", 
            "created_utc": 1505519548.0, 
            "domain": "self.haskell", 
            "id": "70dpfg", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70dpfg/how_do_you_use_databases/", 
            "score": 17, 
            "selftext": "So I really like Haskell but I have no idea how to use databases in a production environment. Like migration handling and what libraries to actually use. I feel like most of the articles I find on this are old.\n\nSo my question for you guys are in the title. Looking forward to the responses!", 
            "subreddit": "haskell", 
            "title": "How do you use databases", 
            "url": "https://www.reddit.com/r/haskell/comments/70dpfg/how_do_you_use_databases/"
        }, 
        {
            "author": "haskellgr8", 
            "created_utc": 1505510234.0, 
            "domain": "self.haskell", 
            "id": "70cttz", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 45, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70cttz/i_have_given_up_on_haskell_more_times_than_i_can/", 
            "score": 52, 
            "selftext": "Just two example of countless:\n\n* A while back, I gave up for weeks and returned to the \"more efficient and predictable\" C++.\n* Today, I got a bit pissed off and swore to abandon Haskell for good. I came crawling back after 1-2 hours :) \n\nIt's strange IMO. I don't quite get what's going on yet.\n\nHas anyone else here had similar experiences?", 
            "subreddit": "haskell", 
            "title": "I have given up on Haskell more times than I can count. Although I keep liking it more as the years go by, it really is a wildly fluctuating love-hate relationship.", 
            "url": "https://www.reddit.com/r/haskell/comments/70cttz/i_have_given_up_on_haskell_more_times_than_i_can/"
        }, 
        {
            "author": "alex-v", 
            "created_utc": 1505508723.0, 
            "domain": "hackage.haskell.org", 
            "id": "70coem", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70coem/ann_statictensor_tensors_of_statically_known_size/", 
            "score": 29, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "[ANN] static-tensor: Tensors of statically known size", 
            "url": "https://hackage.haskell.org/package/static-tensor"
        }, 
        {
            "author": "chak", 
            "created_utc": 1505505410.0, 
            "domain": "tweag.io", 
            "id": "70cblj", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70cblj/java_from_haskell_a_tutorial/", 
            "score": 64, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Java from Haskell: a tutorial", 
            "url": "http://www.tweag.io/posts/2017-09-15-inline-java-tutorial.html"
        }, 
        {
            "author": "jaspervdj", 
            "created_utc": 1505504089.0, 
            "domain": "summer.haskell.org", 
            "id": "70c6k1", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70c6k1/summer_of_haskell_2017_final_results/", 
            "score": 97, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Summer of Haskell 2017 - Final results", 
            "url": "https://summer.haskell.org/news/2017-09-15-final-results.html"
        }, 
        {
            "author": "duckducktype", 
            "created_utc": 1505495748.0, 
            "domain": "self.haskell", 
            "id": "70b9j7", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 72, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70b9j7/haskellers_do_you_still_code_in_other_programming/", 
            "score": 34, 
            "selftext": "If so, what are the reasons?\n\n\"Other languages\" don't include things like Idris, Agda, Coq, etc.\n\nI'm asking because, as a novice Haskeller, I don't find Haskell offer a ton of advantages over, say, Python when I'm using it to write automation scripts. Curious to see if people more experienced in Haskell feel the same.", 
            "subreddit": "haskell", 
            "title": "Haskellers, do you still code in other programming languages *by choice*?", 
            "url": "https://www.reddit.com/r/haskell/comments/70b9j7/haskellers_do_you_still_code_in_other_programming/"
        }, 
        {
            "author": "ThreeFx", 
            "created_utc": 1505480971.0, 
            "domain": "self.haskell", 
            "id": "709q2t", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/709q2t/integrating_alexhappy_parser_with_monad/", 
            "score": 13, 
            "selftext": "Hey /r/haskell,\n\nwhat is the current \"best practice\" regarding integration of the Alex and Happy generated Parsers with custom monads? Currently, I combine the monadic Alex lexer with the Happy parser to construct an AST and feed that to my program.\n\nEven though this works perfectly, I lose information about source location in my constructed AST. Furthermore, if I want to log certain stuff while parsing/lexing using a custom monad transformer I use everywhere else in my program.\n\nMy current approach would be to solve this is using a reader monad, which will hold any lexer/parser state I deem necessary. However, to implement this I'd have to manually add this information to (almost) every parser case, which is tedious and seems like violating the DRY principle. Also, the problem of logging from the lexer/parser still persists.\n\nBeing able to modify the Alex monad would solve this problem, although this feels hacky and is probably not recommended. An `AlexT` monad transformer would as well, however I haven't found one yet (it probably doesn't exist).\n\nHow can I combine my custom used-everywhere-else-monad with the Alex monad to log from the lexer/parser and retain source information?", 
            "subreddit": "haskell", 
            "title": "Integrating Alex/Happy parser with monad transformers", 
            "url": "https://www.reddit.com/r/haskell/comments/709q2t/integrating_alexhappy_parser_with_monad/"
        }, 
        {
            "author": "hverr", 
            "created_utc": 1505479473.0, 
            "domain": "deliquus.com", 
            "id": "709l8i", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/709l8i/haskey_userdefined_schemas_monad_transformers_and/", 
            "score": 26, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Haskey: User-defined Schemas, Monad Transformers and Future Work (Summer of Haskell 2017)", 
            "url": "https://deliquus.com/posts/2017-09-14-haskey-user-defined-schemas-and-monad-transformers.html"
        }, 
        {
            "author": "reactormonk", 
            "created_utc": 1505466402.0, 
            "domain": "self.haskell", 
            "id": "708oaz", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/708oaz/executing_conduit_streams_in_parallel_leads_to/", 
            "score": 14, 
            "selftext": "When I run my conduit without any additions, it works as expected,\nwith low constant memory usage, as advertised. It's a bit slow, so I\ntried to speed it up with worker pools (via parallel-io) and staged\nfolding (via stm-conduit). However, then the memory usage indicates\nall the ByteString from the file readings are being fully allocated\nand kept in memory, even though they're [not being used](https://github.com/reactormonk/non-constant-memory/blob/master/src/Lib.hs#L51) after a step of\nconduit.\n\nI thought maybe because of the closing IO, the release of the file\nhandle somehow keeps the read string in memory, so I wanted to [make\nabsolutely sure](https://github.com/reactormonk/non-constant-memory/blob/master/src/Lib.hs#L62) that's not the problem. Switch out the\n`Lib.readFile` with `B.readFile` to undo that specific part.\n\nI was not using a worker pool in the beginning, so maybe the\n`mapConcurrently_` somehow allocated all the threads, but with the\npooled solution, that should be solved as well.\n\nWhat else could cause all the ByteStrings to be kept in memory in the\nparallel version?\nThe example is available on:\nhttps://github.com/reactormonk/non-constant-memory\n\nX-post from the haskell-cafe list", 
            "subreddit": "haskell", 
            "title": "Executing conduit streams in parallel leads to memory leaks", 
            "url": "https://www.reddit.com/r/haskell/comments/708oaz/executing_conduit_streams_in_parallel_leads_to/"
        }, 
        {
            "author": "flexibeast", 
            "created_utc": 1505455496.0, 
            "domain": "arxiv.org", 
            "id": "70816t", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70816t/combining_static_and_dynamic_contract_checking/", 
            "score": 12, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Combining Static and Dynamic Contract Checking for Curry [PDF]: \"Based on a formal model of contract checking for functional logic programming, we propose an automatic method to verify contracts at compile time.\"", 
            "url": "https://arxiv.org/pdf/1709.04816.pdf"
        }, 
        {
            "author": "OHQbBeCWiqP3fio3", 
            "created_utc": 1505440731.0, 
            "domain": "self.haskell", 
            "id": "706vrh", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/706vrh/looking_for_applicative_functor_examples_and_what/", 
            "score": 16, 
            "selftext": "Often times when I start reading an article or book chapter about what they are, I'm sort of lost by the time I reach the end of the article. Maybe even the beginner friendly reading materials do too much explaining for me... I think side by side examples would probably be the best thing to look at to really get it. (Same result if you used AF's in Haskell, vs if you didn't in Haskell)  \nOf course, the same thing is true of monads. Since AF's are said to be about halfway between plain old functors and monads, I think first thing's first.   \nSo what I'm hoping to get out of Haskell is a new way of thinking about programming, and I hope for Haskell programs that I write to be as concise or more as Python.  \n**edit** thanks everyone, especially /u/ephrion and /u/chrisdoner for the most thorough examples. ", 
            "subreddit": "haskell", 
            "title": "Looking for applicative functor examples, and what you would have to write if they weren't available.", 
            "url": "https://www.reddit.com/r/haskell/comments/706vrh/looking_for_applicative_functor_examples_and_what/"
        }, 
        {
            "author": "Gigi14", 
            "created_utc": 1505434401.0, 
            "domain": "self.haskell", 
            "id": "706av5", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/706av5/university_of_glasgow_online_course/", 
            "score": 54, 
            "selftext": "University of Glasgow is doing a free online introduction to Haskell beginning on Sep 18!\n\nhttps://www.futurelearn.com/courses/functional-programming-haskell", 
            "subreddit": "haskell", 
            "title": "University of Glasgow Online Course", 
            "url": "https://www.reddit.com/r/haskell/comments/706av5/university_of_glasgow_online_course/"
        }, 
        {
            "author": "skyBreak9", 
            "created_utc": 1505423103.0, 
            "domain": "self.haskell", 
            "id": "7056me", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7056me/discovered_that_one_can_do_this_data_t_a_where_t/", 
            "score": 25, 
            "selftext": "I just discovered that one can parametrize a GADT with a constraint. This allows me to literally embed some other type into my type, and also specify which class constraints it needs to satisfy -- this was exactly what I was after!\n\nSome questions though:\n- Does this pattern have a name?\n- Has this been been possible to mimic prior to ConstraintKinds?\n\nThanks!", 
            "subreddit": "haskell", 
            "title": "Discovered that one can do this: `data T a where T :: (a b) => b -> T a`", 
            "url": "https://www.reddit.com/r/haskell/comments/7056me/discovered_that_one_can_do_this_data_t_a_where_t/"
        }, 
        {
            "author": "JeffreyBenjaminBrown", 
            "created_utc": 1505420286.0, 
            "domain": "self.haskell", 
            "id": "704vh0", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/704vh0/strategies_for_readability_enhancement_and/", 
            "score": 6, 
            "selftext": "[An item in the latest Haskell Weekly](https://www.joachim-breitner.de/blog/730-Less_parentheses) proposes a strategy for reducing the need for parentheses: Let adjacent (i.e. without whitespace) operators bind before any other kind. So, for instance, 1+1 * 4 = 8.\n\nAnother would be to declare $$ with fixity -1, $$$ with fixity -2, etc. \n\nI dig both ideas. In fact I have been using them both for a few years, albeit in a [knowledge graph](https://github.com/synchrony/smsn/wiki), not code.", 
            "subreddit": "haskell", 
            "title": "Strategies for readability enhancement and parenthesis reduction", 
            "url": "https://www.reddit.com/r/haskell/comments/704vh0/strategies_for_readability_enhancement_and/"
        }, 
        {
            "author": "Buttons840", 
            "created_utc": 1505415298.0, 
            "domain": "self.haskell", 
            "id": "704bxg", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/704bxg/is_stackage_having_issues/", 
            "score": 8, 
            "selftext": "I get `(StatusCodeException (Response {responseStatus = Status {statusCode = 503, statusMessage = \"Slow Down\"}, responseVersion = HTTP/1.1, responseHeaders = [(\"x-amz-request-id\",\"6932608DFE355E5A\"),(\"x-amz-id-2\",\"5iIxwtqzcVvC0QNeXZo2APkVwlDb6gGbSY4/eF3YVHr5qoRI7u3G+RSnAbz6eTTkerwtAcbOscI=\"),(\"Content-Type\",\"application/xml\"),(\"Transfer-Encoding\",\"chunked\"),(\"Date\",\"Thu, 14 Sep 2017 18:53:15 GMT\"),(\"Connection\",\"close\"),(\"Server\",\"AmazonS3\")], responseBody = (), responseCookieJar = CJ {expose = []}, responseClose' = ResponseClose}) \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<Error><Code>SlowDown</Code><Message>Please reduce your request rate.</Message><RequestId>6932608DFE355E5A</RequestId><HostId>5iIxwtqzcVvC0QNeXZo2APkVwlDb6gGbSY4/eF3YVHr5qoRI7u3G+RSnAbz6eTTkerwtAcbOscI=</HostId></Error>\")` when trying to use `stack`.\n\nThis looks like a S3 error. Anyone else having issues?", 
            "subreddit": "haskell", 
            "title": "Is Stackage having issues?", 
            "url": "https://www.reddit.com/r/haskell/comments/704bxg/is_stackage_having_issues/"
        }, 
        {
            "author": "rampion", 
            "created_utc": 1505405901.0, 
            "domain": "chrispenner.ca", 
            "id": "703a55", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 44, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/703a55/monadio_considered_harmful/", 
            "score": 78, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "MonadIO Considered Harmful", 
            "url": "http://chrispenner.ca/posts/monadio-considered-harmful"
        }, 
        {
            "author": "haskellweekly", 
            "created_utc": 1505397420.0, 
            "domain": "haskellweekly.news", 
            "id": "702dey", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/702dey/issue_72_haskell_weekly/", 
            "score": 29, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Issue 72 :: Haskell Weekly", 
            "url": "https://haskellweekly.news/issues/72.html"
        }, 
        {
            "author": "Ford_O", 
            "created_utc": 1505387206.0, 
            "domain": "self.haskell", 
            "id": "701ijf", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/701ijf/whats_wrong_with_ghci_error_messages/", 
            "score": 11, 
            "selftext": "    > echo \"main = pure ( 1 2 )\" >> m.hs\n    > ghci\n    ...\n    \u03bb pure ( 1 2 )\n\n    <interactive>:2:1: error:\n        * Non type-variable argument in the constraint: Num (t -> a)\n          (Use FlexibleContexts to permit this)\n        * When checking the inferred type\n            main :: forall t a (f :: * -> *).\n                    (Num (t -> a), Num t, Applicative f) => f a\n\n    \u03bb :load m.hs\n\n    [1 of 1] Compiling Main             ( m.hs, interpreted )\n\n    m.hs:1:14: error:\n        * No instance for (Num (t1 -> t0)) arising from the literal `1'\n            (maybe you haven't applied a function to enough arguments?)\n        * In the expression: 1\n          In the first argument of `pure', namely `(1 2)'\n          In the expression: pure (1 2)\n\n    m.hs:1:16: error:\n        * Ambiguous type variable `t1' arising from the literal `2'\n          prevents the constraint `(Num t1)' from being solved.\n          Probable fix: use a type annotation to specify what `t1' should be.\n          These potential instances exist:\n            instance Num Integer -- Defined in `GHC.Num'\n            instance Num Double -- Defined in `GHC.Float'\n            instance Num Float -- Defined in `GHC.Float'\n            ...plus two others\n            (use -fprint-potential-instances to see them all)\n        * In the first argument of `1', namely `2'\n          In the first argument of `pure', namely `(1 2)'\n          In the expression: pure (1 2)\n    Failed, modules loaded: none.\n", 
            "subreddit": "haskell", 
            "title": "Whats wrong with GHCI error messages?", 
            "url": "https://www.reddit.com/r/haskell/comments/701ijf/whats_wrong_with_ghci_error_messages/"
        }, 
        {
            "author": "luispedro", 
            "created_utc": 1505384653.0, 
            "domain": "self.haskell", 
            "id": "701cjc", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 33, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/701cjc/how_to_keep_many_up_to_a_billion_of_short_strings/", 
            "score": 15, 
            "selftext": "What is the most efficient way to keep many millions of short strings in memory in a Haskell programme? Each string is ~30 characters. I need to associate a bit of data. My current solution is:\n\n    data AnnotatedString = AnnotatedString {-# UNPACK #-} !ShortByteString {-# UNPACK #-} !Double\n    type StringCollection = Vector AnnotatedString\n\nI sort the array and use binary search to find the key I need. The overhead of this solution is huge, though: ~5GB of string data needs >50GB in memory.\n\nIn C, I would compact all the strings into contiguous blocks (with null terminator) and store pointers directly in an array. I have been considering doing the same in Haskell, but was wondering if there is a better way or a library that already does this.\n\n**updated**: I had left out the ! in the constructor (strictness annotation).", 
            "subreddit": "haskell", 
            "title": "How to keep many (up to a billion) of short strings in memory?", 
            "url": "https://www.reddit.com/r/haskell/comments/701cjc/how_to_keep_many_up_to_a_billion_of_short_strings/"
        }, 
        {
            "author": "Kootle", 
            "created_utc": 1505361234.0, 
            "domain": "github.com", 
            "id": "6zzvgh", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zzvgh/tutorial_building_a_simple_rts_game_with_apecs/", 
            "score": 50, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Tutorial - Building a simple RTS game with apecs", 
            "url": "https://github.com/jonascarpay/apecs/blob/master/tutorials/RTS.md"
        }, 
        {
            "author": "mcapodici", 
            "created_utc": 1505349271.0, 
            "domain": "haskell.fun", 
            "id": "6zytmr", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zytmr/haskell_project_making_google_tasks_better/", 
            "score": 34, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Haskell Project: Making Google Tasks Better", 
            "url": "https://haskell.fun/2017/09/14/project-making-google-tasks-better/"
        }, 
        {
            "author": "fgaz_", 
            "created_utc": 1505349062.0, 
            "domain": "fgaz.me", 
            "id": "6zyszk", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zyszk/haskell_summer_of_code_2017_last_mile_for_cabal/", 
            "score": 73, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Haskell Summer of Code 2017: Last Mile for `cabal new-build`: first and last status update \u00b7 fgaz", 
            "url": "http://fgaz.me/posts/2017-09-13-hsoc-cabal-new-build-status-update-1/"
        }, 
        {
            "author": "ephrion", 
            "created_utc": 1505346540.0, 
            "domain": "parsonsmatt.org", 
            "id": "6zykgl", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zykgl/debugging_types_a_stream_of_thought/", 
            "score": 16, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Debugging Types: A Stream of Thought", 
            "url": "http://www.parsonsmatt.org/2017/09/13/debugging_types_a_stream_of_thought.html"
        }, 
        {
            "author": "haskell_fun", 
            "created_utc": 1505333731.0, 
            "domain": "haskell.fun", 
            "id": "6zx8a1", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zx8a1/project_making_google_tasks_better/", 
            "score": 3, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Project: Making Google Tasks Better", 
            "url": "https://haskell.fun/2017/09/14/project-making-google-tasks-better/"
        }, 
        {
            "author": "marcosdumay", 
            "created_utc": 1505329924.0, 
            "domain": "self.haskell", 
            "id": "6zwsyz", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zwsyz/request_for_comments_applicativesettings/", 
            "score": 12, 
            "selftext": "Since I couldn't find anything similar on Hackage, I have started changing some code for reading setting files that I keep copying into every project into a usable library. This one:\n\nhttps://github.com/marcosdumay/applicative-settings\n\nThe library is different from `settings` and similar ones because I want it to be able to append multiple files with different prioritization, read files in well known hierarchical formats (and append files in different formats), and supports an applicative syntax that I consider easier than what most libraries provide. By its turn, it only supports reading files, not writing them (although I plan to create default files in the future).\n\nNow, as my usual workflow in Hackage consists on: 1 - spend days looking for a library and not finding it; 2 - writing it and pushing into Hackage; 3 - within 3 hours of pushing, stumbling on the library I wanted all the time, more complete and stable than my version... I would like to know if somebody around here knows of some similar project (I don't care much about the applicative syntax, but care a lot about the other features), or if you have any better ideas on how it should be structured.", 
            "subreddit": "haskell", 
            "title": "Request for comments: applicative-settings", 
            "url": "https://www.reddit.com/r/haskell/comments/6zwsyz/request_for_comments_applicativesettings/"
        }, 
        {
            "author": "paf31", 
            "created_utc": 1505325525.0, 
            "domain": "medium.com", 
            "id": "6zwapf", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 14, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zwapf/migrating_from_rethinkdb_to_postgres_using_haskell/", 
            "score": 46, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Migrating from RethinkDB to Postgres (using Haskell)", 
            "url": "https://medium.com/fuzzy-sharp/migrating-to-postgres-2dc1519a6dc7"
        }, 
        {
            "author": "luceat-lux-vestra", 
            "created_utc": 1505320403.0, 
            "domain": "self.haskell", 
            "id": "6zvpmc", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zvpmc/have_you_tried_benchmark_real_world_haskell/", 
            "score": 0, 
            "selftext": "I searched a lot about functional programming/languages before and still searching about it sometimes.\n\nIt looks fp languages usually slower than traditional procedural/oop languages and uses more hardware resources(CPU/RAM).\n\nI agree that fp has some pros but my curiosity is do they really well done on performance/resource wise.\n\nHow do you think?\n\nThanks.", 
            "subreddit": "haskell", 
            "title": "Have you tried benchmark real world Haskell program with other languages?", 
            "url": "https://www.reddit.com/r/haskell/comments/6zvpmc/have_you_tried_benchmark_real_world_haskell/"
        }, 
        {
            "author": "deque-blog", 
            "created_utc": 1505301899.0, 
            "domain": "deque.blog", 
            "id": "6ztwxi", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ztwxi/monoids_what_they_are_why_they_are_useful_and/", 
            "score": 55, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Monoids: what they are, why they are useful, and what they teach us about software", 
            "url": "https://deque.blog/2017/09/13/monoids-what-they-are-why-they-are-useful-and-what-they-teach-us-about-software/"
        }, 
        {
            "author": "Tysonzero", 
            "created_utc": 1505294297.0, 
            "domain": "self.haskell", 
            "id": "6ztfp7", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 26, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ztfp7/i_propose_adding_deferffierrors_flag_to_ghc/", 
            "score": 16, 
            "selftext": "Not really a particularly cool or elegant proposal. But I have noticed that many GHCJS projects (such as react-hs and my personal front end projects) end up having to write things like:\n\n    #ifdef __GHCJS__\n    foreign import javascript unsafe\n        \"foo($1)\"\n        js_foo :: JSString -> IO JSString\n    #else\n    js_foo :: JSString -> IO JSString\n    js_foo = error \"js_foo only works with GHCJS\"\n    #endif\n\nWhich is more than twice as much code as it should be. And it also kind of pins me to GHCJS, it won't work with any other JS supporting compiler.\n\nBut unfortunately without this GHC is unable to typecheck or in any way interact with the code. Which is annoying because various extremely useful/crucial tooling is GHC specific (or at least doesn't work with GHCJS). It also means that if another library doesn't write their imports this way you just can't use it in your project without breaking all your tooling. \n\nI propose adding a defer-ffi-errors flag to GHC that will automatically swap out the body of an FFI call in an unsupported format into a reasonable `error \"...\"` call instead.\n\nThis seems to me as though it should be simple to implement and not have any real downside. And it would help massively with mine and many others front end web dev experience. ", 
            "subreddit": "haskell", 
            "title": "I propose adding defer-ffi-errors flag to GHC", 
            "url": "https://www.reddit.com/r/haskell/comments/6ztfp7/i_propose_adding_deferffierrors_flag_to_ghc/"
        }, 
        {
            "author": "gabriel-rf", 
            "created_utc": 1505294201.0, 
            "domain": "self.haskell", 
            "id": "6ztfil", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ztfil/overflow_throwing_on_intn_addition_and_product/", 
            "score": 4, 
            "selftext": "I have worked out an implementation on safe Int{N} addition and product.\n\nhttps://www.schoolofhaskell.com/user/griba/safe_int_addition_and_product\n\nI would like comments if you have a better implementation.", 
            "subreddit": "haskell", 
            "title": "Overflow throwing on Int{N} addition and product", 
            "url": "https://www.reddit.com/r/haskell/comments/6ztfil/overflow_throwing_on_intn_addition_and_product/"
        }, 
        {
            "author": "Toricon", 
            "created_utc": 1505286946.0, 
            "domain": "self.haskell", 
            "id": "6zt10o", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zt10o/i_accidentally_made_a_superfunction_data_type_are/", 
            "score": 16, 
            "selftext": "The code is:\n\n    {-# LANGUAGE RankNTypes, GADTs, TypeInType #-}\n    \n    import Data.Kind\n    \n    data MetaFun k (f :: k) (g :: k) where\n        BaseFun :: (a -> b) -> MetaFun * a b\n        LiftFun :: (forall (a :: v). MetaFun k (f a) (g a))\n                -> MetaFun (v -> k) f g\n\nPlus a couple assistant functions, of course.\n\nA quick search couldn't find anything, but I could have easily missed stuff. Does anyone have anything?\n\nI don't know what it would be practical for, but it seems to have at least a few theoretical uses. You can write:\n\n    safehead :: [a] -> Maybe a\n    safehead = foldr (const . Just) Nothing\n\n    meta_safehead = LiftFun $ BaseFun safehead\n    meta_safehead = MetaFun (* -> *) [] Maybe\n\nThis gives the idea of `safehead :: [] -> Maybe`, which feels more elegant than `forall a. [a] -> Maybe a`.\n\nThere are some pretty obvious issues, especially with its convenience (or rather, its lack thereof, especially as a wrapped function needs to be extracted before its use), but I think it has some theoretical potential, at least.\n\nAlso, does anyone know of similar poly-kinded ideas? I haven't found all that many, but think they're pretty cool.\n\n&nbsp;\n\nEDIT: Realized that currying doesn't work, as this has kind `forall k -> k -> k -> *`, but \"returns\" a \"value\" of kind `k`. So currying only works for cases where k = *. And the kind `forall k -> k -> k -> k` doesn't work, because the kind needs to end in a *. Does anyone have an idea for a workaround?", 
            "subreddit": "haskell", 
            "title": "I accidentally made a super-function data type; are there any resources about it?", 
            "url": "https://www.reddit.com/r/haskell/comments/6zt10o/i_accidentally_made_a_superfunction_data_type_are/"
        }, 
        {
            "author": "agnishom", 
            "created_utc": 1505273406.0, 
            "domain": "self.haskell", 
            "id": "6zs37b", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zs37b/what_project_demonstration_theoretical_ideas_to/", 
            "score": 7, 
            "selftext": "I am TA'ing an undergraduate programming course in Haskell, which is also the first programming course for a large number of them.\n\nThe tutorial is supposed to be slightly longer than 1 hour and I hope to do something fun, interactive and inviting problem solving skills.\n\nSo, what are some interesting projects that I could discuss in a tutorial like this? Some ideas I have are:\n\n* A sudoku solver\n* A BrainFuck Interpretter\n* An Arithmetic Expression Parser and Interpretter\n\nOr I could also give a talk on some more theoretical ideas in this time. Suggestions?", 
            "subreddit": "haskell", 
            "title": "What project demonstration / theoretical ideas to do in an 1 hour tutorial?", 
            "url": "https://www.reddit.com/r/haskell/comments/6zs37b/what_project_demonstration_theoretical_ideas_to/"
        }, 
        {
            "author": "verbosemode", 
            "created_utc": 1505250789.0, 
            "domain": "functionalgeekery.com", 
            "id": "6zpzpa", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zpzpa/functional_geekery_episode_107_julie_moronuki/", 
            "score": 54, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Functional Geekery Episode 107 - Julie Moronuki", 
            "url": "https://www.functionalgeekery.com/episode-107-julie-moronuki/"
        }, 
        {
            "author": "Wizek", 
            "created_utc": 1505234490.0, 
            "domain": "gist.github.com", 
            "id": "6zo651", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zo651/announce_a_givenwhenthen_implementation_for/", 
            "score": 13, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "[announce] A Given-When-Then implementation for Haskell's HSpec. In similar vein to Ruby's rspec-given and Javascript's (Node's) jasmine-given. Makes it relatively easy to specify and test a largish branching state-space.", 
            "url": "https://gist.github.com/Wizek/1553ca002a1d66cf4dde5c0eaaaa8663/96fa1bebbd7119499ea5bb949c88403d4d5359aa#file-givenwhenthenspec-hs-L23"
        }, 
        {
            "author": "galapag0", 
            "created_utc": 1505229018.0, 
            "domain": "samcoope.com", 
            "id": "6znjzm", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6znjzm/generating_simple_haskell_programs_with_deep/", 
            "score": 30, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Generating Simple Haskell Programs With Deep Learning", 
            "url": "http://www.samcoope.com/posts/deep_code_generation"
        }, 
        {
            "author": "protomikron", 
            "created_utc": 1505228632.0, 
            "domain": "self.haskell", 
            "id": "6znim3", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6znim3/performance_enumerating_all_3674160/", 
            "score": 12, 
            "selftext": "At https://github.com/protomikron/r222-bench there are several implementations to enumerate all configurations of the small cube (see [Wikipedia](https://en.wikipedia.org/wiki/Pocket_Cube)).\n\nAs you can see the Haskell implementation is currently behind and takes over a minute (see [results](https://github.com/protomikron/r222-bench#results)). In particular I think there is a better way to describe the [move](https://github.com/protomikron/r222-bench/blob/master/r222.hs#L15) function - it seems pure and with constant memory requirements.\n\nWhat improvements (hopefully using the standard library) could decrease total runtime? ", 
            "subreddit": "haskell", 
            "title": "Performance: Enumerating all 3674160 configurations of the 2x2x2 cube", 
            "url": "https://www.reddit.com/r/haskell/comments/6znim3/performance_enumerating_all_3674160/"
        }, 
        {
            "author": "Buttons840", 
            "created_utc": 1505228095.0, 
            "domain": "self.haskell", 
            "id": "6zngjw", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zngjw/suggest_an_outline_for_a_20_minute_haskell/", 
            "score": 10, 
            "selftext": "I've been asked to teach a \"lunch and learn\" at my company about Haskell. Most of the developers know Python, Ruby, or JavaScript. Any suggestions for what I should cover about Haskell in 20 minutes?\n\nA future lunch and learn will likely cover Elm, so I could help prep people for that by covering pattern matching or ADTs in depth.\n\nI've also written some basic gloss games years ago. I thought I might show it and take questions since the code doesn't use any advance features.\n\nMost of the developers are unlikely to learn Haskell on their own. What principles can I demonstrate for them to adopt in their JavaScript or Python code?", 
            "subreddit": "haskell", 
            "title": "Suggest an outline for a 20 minute Haskell presentation", 
            "url": "https://www.reddit.com/r/haskell/comments/6zngjw/suggest_an_outline_for_a_20_minute_haskell/"
        }, 
        {
            "author": "ipe369", 
            "created_utc": 1505221571.0, 
            "domain": "self.haskell", 
            "id": "6zmtfn", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zmtfn/auto_generated_function_for_accessing_record/", 
            "score": 8, 
            "selftext": "Hey!\n\nBeen getting into haskell lately, really like a lot of the cool functional stuff you can do AND have it very strongly typed.\n\nHowever, I recently encountered a problem - I had all my types in 1 module, and I couldn't define 2 records which had fields the same name, because when the compiler generated the accessor functions the names clashed - \n\n```\ndata Employee = Employee { id :: Int, name :: String, customersServed :: [Customer] }\n\ndata Customer = Customer { id :: Int, name :: String, server :: Employee }\n```\n\nThis is the error: `Multiple declarations of `name'`\n\nAlright, that's fine, just a quirk. I can deal with that. Let's just split them into separate modules, go all java on this:\n\n```\n-- In Customer.hs\n\nimport Customer (Customer)\n\ndata Employee = Employee { id :: Int, name :: String, customersServed :: [Customer] }\n```\n```\n-- In Employee.hs\n\nimport Employee (Employee)\n\ndata Customer = Customer { id :: Int, name :: String, server :: Employee }\n```\n\nNow I get this: \n```\nModule imports form a cycle:\n         module `Customer' (Employee.hs)\n\n        imports `Employee' (Customer.hs)\n\n  which imports `Customer' (Employee.hs)\n```\n\nAfter searching a little bit, it doesn't seem like haskell supports fwd declarations to alleviate this problem, soooo....???\n\nI resorted to putting all my types in 1 file, and prefixing all the record names like `cName customer` and `eName employee`, but this seems super stupid.\n\nAm I just missing something here? Is there really that much of a benefit to having accessor methods done with module scope functions? Or was it just done b/c 'yeah functions are great woo'\n\nThis is really close to a total dealbreaker for me picking up this language as a hobby, how do you gals & guys cope?\n\nThanks!", 
            "subreddit": "haskell", 
            "title": "Auto generated function for accessing record fields AND no way to fwd declare data structures??", 
            "url": "https://www.reddit.com/r/haskell/comments/6zmtfn/auto_generated_function_for_accessing_record/"
        }, 
        {
            "author": "ThreeFx", 
            "created_utc": 1505216906.0, 
            "domain": "self.haskell", 
            "id": "6zmfoy", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 40, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zmfoy/the_state_of_logging_in_haskell/", 
            "score": 31, 
            "selftext": "Cheers /r/haskell,\n\nI'm stuck deciding how to integrate logging in my small client-side program to inform the user what is currently happening under the hood of my program. At the heart of my program is a (pure) monad transformer stack, and I'd hate to introduce stuff which composes badly with it. Throughput doesn't matter, as there will never be a situation where I have to log great amounts of stuff.\n\nGathering from [this](https://www.reddit.com/r/haskell/comments/2fxjcg/how_do_you_structure_a_program_to_support_logging/) three year old post, I have a few options:\n\n  - Using just the IO monad as base for my monad transformer stack. I don't like this approach as it feels like using a sledgehammer to crack a nut.\n\n  - Using the Pipes framework. This feels like a good solution, except having to implement the log-specifics such as severity, etc. manually, which I think is a solved problem.\n\n  - Using [hslogger](https://hackage.haskell.org/package/hslogger-1.2.10/docs/System-Log-Logger.html). This solution has the perfect interface, except that I am limited to `String`s and `IO`, which I don't like.\n\n  - On hackage I found the [logging-effect](https://hackage.haskell.org/package/logging-effect-1.2.1/docs/Control-Monad-Log.html#t:LoggingT) package, which seems to do exactly what I want to do with pipes and exports a convenient monad transformer. This doesn't log messages in real time, which would be fixed by adding the `IO` monad at the bottom.\n\nCan somebody recommend or rule out some solutions? I favour the last option, as I can integrate it seamlessly with my existing program but then, I'm a beginner in \"real-world\" programming with Haskell.\n\nOh and a quick second question: Real-time logging forces me to use IO anyway, right?", 
            "subreddit": "haskell", 
            "title": "The state of logging in Haskell", 
            "url": "https://www.reddit.com/r/haskell/comments/6zmfoy/the_state_of_logging_in_haskell/"
        }, 
        {
            "author": "sibip", 
            "created_utc": 1505197270.0, 
            "domain": "fpcomplete.com", 
            "id": "6zl88c", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 83, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zl88c/all_about_strictness/", 
            "score": 100, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "All About Strictness", 
            "url": "https://www.fpcomplete.com/blog/2017/09/all-about-strictness"
        }, 
        {
            "author": "schmook", 
            "created_utc": 1505179916.0, 
            "domain": "self.haskell", 
            "id": "6zjuu7", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zjuu7/is_there_a_way_to_encode_typeclasses_in/", 
            "score": 9, 
            "selftext": "That's it. Any pointers on literature to read about this for people with not a lot of background in type theory?", 
            "subreddit": "haskell", 
            "title": "Is there a way to encode typeclasses in Boehm-Berarducci encodings or any other similar encodings?", 
            "url": "https://www.reddit.com/r/haskell/comments/6zjuu7/is_there_a_way_to_encode_typeclasses_in/"
        }, 
        {
            "author": "psygnisfive", 
            "created_utc": 1505175586.0, 
            "domain": "languagengine.co", 
            "id": "6zjgbf", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zjgbf/differentiating_functional_programs/", 
            "score": 37, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Differentiating Functional Programs", 
            "url": "http://languagengine.co/blog/differentiating-functional-programs/"
        }, 
        {
            "author": "WickdSh", 
            "created_utc": 1505170090.0, 
            "domain": "self.haskell", 
            "id": "6zixjp", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zixjp/help_function_using_halffull_adders/", 
            "score": 0, 
            "selftext": "So am kinda stuck and need your help.\nHow is it possible to draw a function let's say\nF = 2A + 3B, using only Half/Full Adders?\nA,B being 2bit numbers (a0,a1,b0,b1).\nMy only thought is adding A two times, adding B three times and then adding both sums together.\nBut is that the most effective way? Thanks.", 
            "subreddit": "haskell", 
            "title": "[Help] Function using Half/Full Adders", 
            "url": "https://www.reddit.com/r/haskell/comments/6zixjp/help_function_using_halffull_adders/"
        }, 
        {
            "author": "noZone", 
            "created_utc": 1505166167.0, 
            "domain": "news.uchicago.edu", 
            "id": "6zijjc", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zijjc/one_wonders_if_haskell_will_have_any_impact_on/", 
            "score": 23, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "One wonders if Haskell will have any impact on this study.", 
            "url": "https://news.uchicago.edu/article/2017/09/06/computer-programming-languages-can-impact-science-and-thought"
        }, 
        {
            "author": "sstewartgallus", 
            "created_utc": 1505165588.0, 
            "domain": "self.haskell", 
            "id": "6zihdq", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zihdq/equality_over_all_kinds/", 
            "score": 5, 
            "selftext": "Bugs with equality over all kinds.\n\nTypically, equality between types is defined as:\n\n    newtype MyEq a b = MyEq (forall f. f a -> f b)\n\nHowever, I wrote the code below in order to experiment with equality for all kinds. However, I'm getting type errors with `coerce3'`.\n\n    data Dict (f :: k -> *) (ctx :: k) where\n      Dict :: f ctx -> Dict f ctx\n    \n    class MyEq (a :: k) (b :: k) where\n          to :: Dict f a -> Dict f b\n    instance MyEq a a where\n          to (Dict x) = Dict x\n    \n    newtype MyId a = MyId a\n    \n    fromDict :: Dict MyId a -> a\n    fromDict (Dict (MyId x)) = x\n    \n    toDict :: a -> Dict MyId a\n    toDict x = Dict (MyId x)\n    \n    coerce :: MyEq a b => a -> b\n    coerce x = fromDict (to (toDict x))\n    \n    data Reify (c :: Constraint) = Reify\n    \n    toDict2 :: Reify c -> Dict Reify c\n    toDict2 r = Dict r\n    \n    fromDict2 :: Dict Reify c -> Reify c\n    fromDict2 (Dict r) = r\n    \n    coerce2 :: MyEq c d => Reify c -> Reify d\n    coerce2 x = fromDict2 (to (toDict2 x))\n    \n    data Reify2 (c :: * -> Constraint) = forall a. c a => Reify2 a\n    \n    toDict3 :: Reify2 c -> Dict Reify2 c\n    toDict3 r = Dict r\n    \n    fromDict3 :: Dict Reify2 c -> Reify2 c\n    fromDict3 (Dict r) = r\n    \n    coerce3 :: MyEq c d => Reify2 c -> Reify2 d\n    coerce3 x = fromDict3 (to (toDict3 x))\n    \n    unreify2 :: Reify2 c -> (forall a. c a => a -> b) -> b\n    unreify2 (Reify2 x) f = f x\n    \n    -- coerce3' :: (MyEq c1 c, c1 a) => a -> (forall a1. c a1 => a1 -> b) -> b\n    coerce3' x = unreify2 (coerce3 (Reify2 x))\n", 
            "subreddit": "haskell", 
            "title": "Equality over all kinds?", 
            "url": "https://www.reddit.com/r/haskell/comments/6zihdq/equality_over_all_kinds/"
        }, 
        {
            "author": "b00thead", 
            "created_utc": 1505140975.0, 
            "domain": "self.haskell", 
            "id": "6zft41", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zft41/tips_and_tricks_for_type_level_development/", 
            "score": 15, 
            "selftext": "How are people doing type level development in Haskell? In the course of normal development I use spacemacs/intero along with all the nice things we're used to like typeholes. I'm very happy with the tooling we have for vanilla haskell dev. I just wonder what tips and tricks people have when they venture into singletons, typefamilies and the like. What's the type level equivalent of scattering undefineds around and filling in the pieces afterwards for example?", 
            "subreddit": "haskell", 
            "title": "Tips and tricks for type level development", 
            "url": "https://www.reddit.com/r/haskell/comments/6zft41/tips_and_tricks_for_type_level_development/"
        }, 
        {
            "author": "nomeata", 
            "created_utc": 1505132375.0, 
            "domain": "joachim-breitner.de", 
            "id": "6zf0n3", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 86, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zf0n3/new_syntax_ideas_for_less_parentheses/", 
            "score": 49, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "New Syntax ideas for less parentheses", 
            "url": "http://www.joachim-breitner.de/blog/730-Less_parentheses"
        }, 
        {
            "author": "joehillen", 
            "created_utc": 1505105892.0, 
            "domain": "mail.haskell.org", 
            "id": "6zdc73", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zdc73/ghcdevs_a_type_checker_plugin_for_row_types/", 
            "score": 52, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "[ghc-devs] A type checker plugin for row types", 
            "url": "https://mail.haskell.org/pipermail/ghc-devs/2017-September/014635.html"
        }, 
        {
            "author": "Chrisdone2", 
            "created_utc": 1505073226.0, 
            "domain": "self.haskell", 
            "id": "6zag17", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zag17/idea_tracking_exceptions/", 
            "score": 24, 
            "selftext": "I wonder how hard it'd be to create an exception-throwing profile of a package using the GHC API with Intero (or whatevs) as a driver. To give a list of what exceptions the exported functions of a given module throw.\n\nLike, just compile the file, and find all functions that use throw and the type of the argument passed to throw, and all functions defined in terms of said functions.\n\nThen while developing you could use that profile to inform you whether you'd like to catch exceptions or not. People are divided on whether checked exceptions are a good idea, but this would have practical use without being invasive.\n\nPolymorphic throws would be tricky to track, but I'd probably do some statistics on a subset of most common packages and see.\n\nThe idea is a bit like Catch but I think might be simpler. Thoughts?", 
            "subreddit": "haskell", 
            "title": "Idea: tracking exceptions", 
            "url": "https://www.reddit.com/r/haskell/comments/6zag17/idea_tracking_exceptions/"
        }, 
        {
            "author": "deech", 
            "created_utc": 1505067365.0, 
            "domain": "self.haskell", 
            "id": "6z9up7", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z9up7/a_media_player_in_fltkhs/", 
            "score": 57, 
            "selftext": "In the spirit of friendly competition, in response to [the movie monad post](https://www.reddit.com/r/haskell/comments/6xjy70/movie_monad_an_open_source_desktop_video_player/)  I made a [very simple media player](https://github.com/deech/fltkhs-media-player) using [FLTKHS](https://hackage.haskell.org/package/fltkhs) and included a [comparison](https://github.com/deech/fltkhs-media-player#comparison) of the two projects and underlying toolkits.\n\nAlso please excuse the potato quality of the [screenshot](https://github.com/deech/fltkhs-media-player#fltkhs-media-player), it actually looks quite a bit nicer but the uncompressed GIF was 120MB.", 
            "subreddit": "haskell", 
            "title": "A Media Player In FLTKHS!", 
            "url": "https://www.reddit.com/r/haskell/comments/6z9up7/a_media_player_in_fltkhs/"
        }, 
        {
            "author": "saurabhnanda", 
            "created_utc": 1505052320.0, 
            "domain": "medium.com", 
            "id": "6z8e3m", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 62, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z8e3m/benchmarks_ghcjs_reflex_miso_purescript_thermite/", 
            "score": 95, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Benchmarks: GHCJS (Reflex, Miso) & Purescript (Thermite, Pux, Halogen)", 
            "url": "https://medium.com/@saurabhnanda/benchmarks-fp-languages-libraries-for-front-end-development-a11af0542f7e"
        }, 
        {
            "author": "joehillen", 
            "created_utc": 1505052076.0, 
            "domain": "hackage.haskell.org", 
            "id": "6z8de0", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z8de0/typeofhtml_high_performance_typedriven_html/", 
            "score": 45, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "type-of-html: High performance type-driven HTML generation.", 
            "url": "https://hackage.haskell.org/package/type-of-html/docs/Html.html"
        }, 
        {
            "author": "haskellgr8", 
            "created_utc": 1505038817.0, 
            "domain": "self.haskell", 
            "id": "6z7jaj", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 45, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z7jaj/i_am_not_a_fan_of_exceptions_if_i_have_to_use/", 
            "score": 27, 
            "selftext": "Would you consider this bad practice?", 
            "subreddit": "haskell", 
            "title": "I am not a fan of exceptions. If I have to use functions that (according to their docs) can throw exceptions, I wrap them in functions that return Either or Maybe.", 
            "url": "https://www.reddit.com/r/haskell/comments/6z7jaj/i_am_not_a_fan_of_exceptions_if_i_have_to_use/"
        }, 
        {
            "author": "takenobu-hs", 
            "created_utc": 1505034839.0, 
            "domain": "github.com", 
            "id": "6z7ca4", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z7ca4/thankyoustars_give_your_dependencies_stars_on/", 
            "score": 52, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "thank-you-stars - Give your dependencies stars on GitHub!", 
            "url": "https://github.com/y-taka-23/thank-you-stars"
        }, 
        {
            "author": "sstewartgallus", 
            "created_utc": 1504991780.0, 
            "domain": "self.haskell", 
            "id": "6z4a60", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z4a60/is_there_a_type_level_map_package_available/", 
            "score": 14, 
            "selftext": "I'm working on an interpreter for an imperative language and something more convenient than the usual State monad.\n\n    {-# LANGUAGE ConstraintKinds, TypeFamilies, KindSignatures, GADTs, DataKinds, TypeOperators, UndecidableInstances #-}\n    import GHC.Exts (Constraint)\n    \n    data Nat = Ze | Su !Nat\n    data SNat (n :: Nat) where\n      SZe :: SNat Ze\n      SSu :: SNat n -> SNat (Su n)\n    \n    type family Compare (m :: Nat) (n :: Nat) :: Ordering\n    type instance Compare Ze Ze = EQ\n    type instance Compare Ze (Su n) = LT\n    type instance Compare (Su n) Ze = GT\n    type instance Compare (Su n) (Su m) = Compare n m\n    \n    type family Choose (a :: Ordering) lt eq gt\n    type instance Choose LT lt eq gt = lt\n    type instance Choose EQ lt eq gt = eq\n    type instance Choose GT lt eq gt = gt\n    \n    type family ChooseHeapShape (a :: Ordering) (lt :: HeapShape) (eq :: HeapShape) (gt :: HeapShape) :: HeapShape\n    type instance ChooseHeapShape LT lt eq gt = lt\n    type instance ChooseHeapShape EQ lt eq gt = eq\n    type instance ChooseHeapShape GT lt eq gt = gt\n    \n    data SOrdering (a :: Ordering) where\n      SLT :: SOrdering LT\n      SEQ :: SOrdering EQ\n      SGT :: SOrdering GT\n    \n    snatCompare :: SNat m -> SNat n -> SOrdering (Compare m n)\n    snatCompare SZe SZe = SEQ\n    snatCompare SZe (SSu _) = SLT\n    snatCompare (SSu _) SZe = SGT\n    snatCompare (SSu m) (SSu n) = snatCompare m n\n    \n    choose :: SOrdering a -> lt -> eq -> gt -> Choose a lt eq gt\n    choose SLT lt eq gt = lt\n    choose SEQ lt eq gt = eq\n    choose SGT lt eq gt = gt\n    \n    chooseHeapShape :: SOrdering a -> Heap lt -> Heap eq -> Heap gt -> Heap (ChooseHeapShape a lt eq gt)\n    chooseHeapShape SLT lt eq gt = lt\n    chooseHeapShape SEQ lt eq gt = eq\n    chooseHeapShape SGT lt eq gt = gt\n    \n    data HeapShape where\n      ShapeCorrupt :: HeapShape\n      ShapeEmpty :: HeapShape\n      ShapeSet :: Nat -> a -> HeapShape -> HeapShape\n    \n    type family SetType (c :: HeapShape) (n :: Nat) a :: HeapShape\n    type instance SetType ShapeEmpty (n :: Nat) a = ShapeCorrupt\n    type instance SetType (ShapeSet n b t) (m :: Nat) a = ChooseHeapShape (Compare n m)\n     ShapeCorrupt\n     (ShapeSet n a t)\n     (ShapeSet n b (SetType t m a))\n    \n    type family NewIndex (c :: HeapShape) :: Nat\n    type instance NewIndex ShapeEmpty = Ze\n    type instance NewIndex (ShapeSet n b t) = Su n\n    \n    type family DeleteType (c :: HeapShape) (n :: Nat) :: HeapShape\n    type instance DeleteType ShapeEmpty (n :: Nat) = ShapeCorrupt\n    type instance DeleteType (ShapeSet n b t) (m :: Nat) = ChooseHeapShape (Compare n m)\n     ShapeCorrupt\n     t\n     (ShapeSet n b (DeleteType t m))\n    \n    data NotInHeap = NotInHeap deriving Show\n    \n    type family GetType (c :: HeapShape) (n :: Nat)\n    type instance GetType ShapeEmpty (m :: Nat) = NotInHeap\n    type instance GetType (ShapeSet n b t) (m :: Nat) = Choose (Compare n m)\n     NotInHeap\n     b\n     (GetType t m)\n    \n    data Instr (c :: HeapShape) (d :: HeapShape) a where\n      InstrSet :: !(SNat n) -> !a -> Instr c (SetType c n a) ()\n      InstrNew :: !a -> Instr c (ShapeSet (NewIndex c) a c) (SNat (NewIndex c))\n      InstrGet :: !(SNat n) -> Instr c c (GetType c n)\n      InstrDelete :: !(SNat n) -> Instr c (DeleteType c n) ()\n    \n    data Program (instr :: HeapShape -> HeapShape -> * -> *) (c :: HeapShape) (d :: HeapShape) a where\n      Return :: !a -> Program instr c c a\n      Then :: !(instr c d a) -> !(a -> Program instr d e b) -> Program instr c e b\n    \n    type HeapProgram c d a = Program Instr c d a\n    \n    run :: HeapProgram ShapeEmpty ShapeEmpty a -> a\n    run prog = snd (runImpl prog Empty)\n    \n    bind :: HeapProgram c d a -> (a -> HeapProgram d e b) -> HeapProgram c e b\n    bind (Return x) f = f x\n    bind (x `Then` f) g = x `Then` (\\a -> f a `bind` g)\n    \n    pure :: a -> HeapProgram c c a\n    pure = Return\n    \n    set :: SNat n -> a -> HeapProgram c (SetType c n a) ()\n    set ix val = InstrSet ix val `Then` Return\n    \n    get :: SNat n -> HeapProgram c c (GetType c n)\n    get ix = InstrGet ix `Then` Return\n    \n    new :: a -> HeapProgram c (ShapeSet (NewIndex c) a c) (SNat (NewIndex c))\n    new val = InstrNew val `Then` Return\n    \n    delete :: SNat n -> HeapProgram c (DeleteType c n) ()\n    delete ix = InstrDelete ix `Then` Return\n    \n    recurse :: (a -> a) -> a\n    recurse f = go where\n      go = f go\n    \n    prog :: Int -> HeapProgram ShapeEmpty ShapeEmpty String\n    prog count =\n      new count `bind`  \\countIx ->\n      new \"\" `bind` \\strIx ->\n      recurse (\\loop ->\n         get countIx `bind` \\ii ->\n         if ii == 0 then\n           pure ()\n         else\n           get strIx `bind` \\str ->\n           set strIx ('a' : str) `bind` \\() ->\n           set countIx (ii - 1) `bind` \\() ->\n           loop\n      ) `bind` \\() ->\n      get strIx `bind` \\val ->\n      delete strIx `bind` \\() ->\n      delete countIx `bind` \\() ->\n      pure val\n    \n    main = do\n      str <- getLine\n      putStrLn (run (prog (read str)))\n    \n    type family ShowableShape (a :: HeapShape) :: Constraint\n    type instance ShowableShape ShapeEmpty = ()\n    type instance ShowableShape (ShapeSet n b t) = (Show b, ShowableShape t)\n    \n    instance ShowableShape a => Show (Heap a) where\n      show Empty = \"Empty\"\n      show (Set n val t) = \"Set \" ++ show n ++ \" \" ++ show val ++ \" (\" ++ show t ++ \")\"\n    \n    instance Show (SNat n) where\n      show SZe = \"SZe\"\n      show (SSu n) = \"SSu (\" ++ show n ++ \")\"\n    \n    data Heap t where\n      Corrupt :: Heap ShapeCorrupt\n      Empty :: Heap ShapeEmpty\n      Set :: !(SNat n) -> !a -> !(Heap t) -> Heap (ShapeSet n a t)\n    \n    deletePrim :: SNat n -> Heap c -> Heap (DeleteType c n)\n    deletePrim m Empty = Corrupt\n    deletePrim m (Set n x t) = chooseHeapShape (snatCompare n m)\n        Corrupt\n        t\n        (Set n x (deletePrim m t))\n    \n    newPrim :: a -> Heap c -> (SNat (NewIndex c), Heap (ShapeSet (NewIndex c) a c))\n    newPrim val Empty = (SZe, Set SZe val Empty)\n    newPrim val heap@(Set n x t) = (SSu n, Set (SSu n) val heap)\n    \n    setPrim :: SNat n -> a -> Heap c -> Heap (SetType c n a)\n    setPrim m x Empty = Corrupt\n    setPrim m val (Set n x t)  = chooseHeapShape (snatCompare n m)\n        Corrupt\n        (Set n val t)\n        (Set n x (setPrim m val t))\n    \n    getPrim :: SNat n -> Heap c -> GetType c n\n    getPrim m Empty = undefined\n    getPrim m (Set n x t) = choose (snatCompare n m)\n        NotInHeap\n        x\n        (getPrim m t)\n    \n    runImpl :: HeapProgram c d a -> Heap c -> (Heap d, a)\n    runImpl (Return x) heap = (heap, x)\n    runImpl (InstrSet ix val `Then` f) heap = let\n        newHeap = setPrim ix val heap\n      in runImpl (f ()) newHeap\n    runImpl (InstrNew val `Then` f) heap = let\n        (ix, newHeap) = newPrim val heap\n      in runImpl (f ix) newHeap\n    runImpl (InstrGet ix `Then` f) heap = let\n        val = getPrim ix heap\n      in runImpl (f val) heap\n    runImpl (InstrDelete ix `Then` f) heap = let\n        newHeap = deletePrim ix heap\n      in runImpl (f ()) newHeap\n\nHowever, I'm having difficulties working with my HeapShape type which I now realize is actually a map between natural numbers and types. Is there a preexisting package which already implements this concept?", 
            "subreddit": "haskell", 
            "title": "Is there a type level map package available?", 
            "url": "https://www.reddit.com/r/haskell/comments/6z4a60/is_there_a_type_level_map_package_available/"
        }, 
        {
            "author": "gallais", 
            "created_utc": 1504980471.0, 
            "domain": "lukas.convnet.de", 
            "id": "6z37dg", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z37dg/enhancing_a_modular_effectful_programming_language/", 
            "score": 23, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Enhancing a Modular Effectful Programming Language", 
            "url": "http://lukas.convnet.de/proj/master/"
        }, 
        {
            "author": "longlivedeath", 
            "created_utc": 1504972772.0, 
            "domain": "coldwa.st", 
            "id": "6z2gja", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 47, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z2gja/whats_new_in_cabalcabalinstall_20_improved/", 
            "score": 76, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "What's new in Cabal/cabal-install 2.0 \u2014 improved new-build, Backpack, foreign libraries and more!", 
            "url": "http://coldwa.st/e/blog/2017-09-09-Cabal-2-0.html"
        }, 
        {
            "author": "eckyp", 
            "created_utc": 1504965534.0, 
            "domain": "github.com", 
            "id": "6z1tk7", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z1tk7/haskellscotty_realworld_example_app/", 
            "score": 33, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Haskell/Scotty RealWorld Example App", 
            "url": "https://github.com/eckyputrady/haskell-scotty-realworld-example-app"
        }, 
        {
            "author": "Blaberg", 
            "created_utc": 1504959325.0, 
            "domain": "self.haskell", 
            "id": "6z1dsg", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z1dsg/cant_find_testquickcheck_module/", 
            "score": 1, 
            "selftext": "Hi!\n\nSo I started studying computer engineering a couple of weeks ago and our first language is Haskell. The assignment we have is to program a blackjack game, and I am required to make it function using QuickCheck. However, when I try to import the files I get the error message \" Could not find module \u2018Test.QuickCheck\u2019\n    Use -v to see a list of the files searched for.\"\nAnyone have any idea that might get it to work? I've tried reinstalling the full version and the cabal command, but none have worked. \n\n", 
            "subreddit": "haskell", 
            "title": "Cant find Test.QuickCheck module", 
            "url": "https://www.reddit.com/r/haskell/comments/6z1dsg/cant_find_testquickcheck_module/"
        }, 
        {
            "author": "owickstrom", 
            "created_utc": 1504953255.0, 
            "domain": "github.com", 
            "id": "6z11d0", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z11d0/neovimghci_interactive_haskell_development_using/", 
            "score": 43, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "neovim-ghci - Interactive Haskell development using GHCi in Neovim (fork of intero-neovim)", 
            "url": "https://github.com/owickstrom/neovim-ghci"
        }, 
        {
            "author": "Keltek228", 
            "created_utc": 1504936850.0, 
            "domain": "self.haskell", 
            "id": "6z06ih", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 14, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z06ih/how_to_uninstall_stack/", 
            "score": 16, 
            "selftext": "This should be obvious but I can't quite figure it out. I installed stack by getting the script with curl running it but couldn't get it to actually work. Stack setup would keep failing and I couldn't figure out why. Rather than debug further I found out that Arch Linux (what I'm currently using) has a package for stack. I figured I would try running the arch package before seeing if something was really broken. I can't figure out how to uninstall stack first though to then reinstall it with pacman. Any help is appreciated.", 
            "subreddit": "haskell", 
            "title": "How to uninstall stack?", 
            "url": "https://www.reddit.com/r/haskell/comments/6z06ih/how_to_uninstall_stack/"
        }, 
        {
            "author": "vem_", 
            "created_utc": 1504914581.0, 
            "domain": "github.com", 
            "id": "6yyjc2", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yyjc2/syntax_highlighting_for_cabalproject_files_in_vim/", 
            "score": 15, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Syntax highlighting for cabal.project files in vim.", 
            "url": "https://github.com/vmchale/cabal-project-vim"
        }, 
        {
            "author": "MagicMurderBagYT", 
            "created_utc": 1504911714.0, 
            "domain": "self.haskell", 
            "id": "6yy9we", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 51, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yy9we/weekly_beginner_saturday_hask_anything_3/", 
            "score": 21, 
            "selftext": "If you have a question or would like to help, then feel free to participate. :)\n\nLast week: https://www.reddit.com/r/haskell/comments/6xsht4/weekly_beginner_saturday_hask_anything_2/", 
            "subreddit": "haskell", 
            "title": "[Weekly] Beginner Saturday: Hask Anything - #3", 
            "url": "https://www.reddit.com/r/haskell/comments/6yy9we/weekly_beginner_saturday_hask_anything_3/"
        }, 
        {
            "author": "NorfairKing", 
            "created_utc": 1504911590.0, 
            "domain": "github.com", 
            "id": "6yy9fn", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yy9fn/signature_inference_for_functional_property/", 
            "score": 30, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Signature Inference for Functional Property Discovery: Thesis document", 
            "url": "https://github.com/NorfairKing/thesis/raw/master/pdfs/thesis-tom-sydney-kerckhove.pdf"
        }, 
        {
            "author": "Bollu", 
            "created_utc": 1504894137.0, 
            "domain": "self.haskell", 
            "id": "6ywhw6", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ywhw6/what_is_this_combinator_called/", 
            "score": 12, 
            "selftext": "        weaveEffect :: (Traversable f, Applicative f, Monad t, Traversable t) => \n            (a -> f (t b)) ->\n            t a ->\n            f (t b)\n        weaveEffect f as = join <$> intermediate -- f (t t b)\n      where\n        intermediate = for as f\n        -- join :: t (t b) -> t b\n        join ttb = ttb >>= (\\tb -> tb)\n\n\n", 
            "subreddit": "haskell", 
            "title": "What is this combinator called?", 
            "url": "https://www.reddit.com/r/haskell/comments/6ywhw6/what_is_this_combinator_called/"
        }, 
        {
            "author": "bkushigian", 
            "created_utc": 1504873223.0, 
            "domain": "self.haskell", 
            "id": "6yuelo", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 25, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yuelo/internship_for_haskellers/", 
            "score": 40, 
            "selftext": "I'm a grad student in CS and I'm thinking of focusing on PL. I really want to make the dive into Haskell and I'm wondering if there are companies out there who work in Haskell who hire interns over the summer.", 
            "subreddit": "haskell", 
            "title": "Internship for Haskellers?", 
            "url": "https://www.reddit.com/r/haskell/comments/6yuelo/internship_for_haskellers/"
        }, 
        {
            "author": "ChrisPenner", 
            "created_utc": 1504833279.0, 
            "domain": "github.com", 
            "id": "6yrkql", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yrkql/firefly_minimalist_http_server/", 
            "score": 42, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Firefly - minimalist http server", 
            "url": "https://github.com/ChrisPenner/firefly#readme"
        }, 
        {
            "author": "echatav", 
            "created_utc": 1504828757.0, 
            "domain": "morphism.tech", 
            "id": "6yr5v6", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 38, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yr5v6/announcing_squeal_a_deep_embedding_of_sql_in/", 
            "score": 75, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Announcing Squeal, a deep embedding of SQL in Haskell", 
            "url": "https://www.morphism.tech/announcing-squeal/"
        }, 
        {
            "author": "ForrestTrump", 
            "created_utc": 1504816973.0, 
            "domain": "gist.github.com", 
            "id": "6ypzfs", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ypzfs/learn_you_a_haskell_in_a_nutshell/", 
            "score": 51, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Learn you a Haskell - In a nutshell", 
            "url": "https://gist.github.com/mikehaertl/3258427"
        }, 
        {
            "author": "cocreature", 
            "created_utc": 1504815872.0, 
            "domain": "github.com", 
            "id": "6ypv2f", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ypv2f/ann_llvmhs_and_llvmhspure_500_with_support_for/", 
            "score": 46, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "[ANN] llvm-hs and llvm-hs-pure 5.0.0 with support for LLVM 5.0", 
            "url": "https://github.com/llvm-hs/llvm-hs"
        }, 
        {
            "author": "phadej", 
            "created_utc": 1504810475.0, 
            "domain": "youtube.com", 
            "id": "6yp9rt", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Metosin", 
                    "author_url": "https://www.youtube.com/channel/UC1lFJanm5Wp6IpNk-2C1Sxw", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/5PZh0BcjIbY?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/5PZh0BcjIbY/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "Have Your Cookie and Eat it Too \u2013 Josef Svenningsson", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yp9rt/have_your_cookie_and_eat_it_too_josef_svenningsson/", 
            "score": 7, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Have Your Cookie and Eat it Too - Josef Svenningsson", 
            "url": "https://www.youtube.com/watch?v=5PZh0BcjIbY"
        }, 
        {
            "author": "ethercrow", 
            "created_utc": 1504810068.0, 
            "domain": "yi-editor.github.io", 
            "id": "6yp830", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 25, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yp830/improving_on_vi_improved_yi_blog/", 
            "score": 31, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Improving on Vi Improved :: Yi Blog", 
            "url": "https://yi-editor.github.io/posts/2017-09-07-improving-on-vi-improved/"
        }, 
        {
            "author": "haskellgr8", 
            "created_utc": 1504803303.0, 
            "domain": "stackoverflow.blog", 
            "id": "6yohio", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 25, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yohio/the_incredible_growth_of_python_stack_overflow/", 
            "score": 16, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "\"The Incredible Growth of Python - Stack Overflow Blog\" <-- Meanwhile, no growth in Haskell by the same metrics. I cannot help but wonder why. Your thoughts?", 
            "url": "https://stackoverflow.blog/2017/09/06/incredible-growth-python/?cb=1"
        }, 
        {
            "author": "gallais", 
            "created_utc": 1504801207.0, 
            "domain": "jyp.github.io", 
            "id": "6yo9ew", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yo9ew/controlling_fusion_in_haskell/", 
            "score": 18, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Controlling Fusion In Haskell", 
            "url": "https://jyp.github.io/posts/controlled-fusion.html"
        }, 
        {
            "author": "Mrpheh", 
            "created_utc": 1504800386.0, 
            "domain": "self.haskell", 
            "id": "6yo65e", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yo65e/kmeans_in_haskell_as_beginner_project/", 
            "score": 5, 
            "selftext": "Hi, I'm still a beginner and learning haskell in my spare time. \n\nI'm feeling like I find the worst implementation possible for everything in Haskell. So I'd like your review on my little script (you wise haskellers and I beg mercy for my ignorance) that tries to implement the k-means algorithm using hmatrix (for vectors) and vector imported as `V.${function}`\n\n    kmeans :: V.Vector (Vector R) -> V.Vector (Vector R) -> V.Vector (Int, Vector R)\n    kmeans cs e \n        | newCs == cs = classifiedPoints\n        | otherwise      = kmeans newCs e\n        where\n            classifiedPoints = classify cs e\n            newCs = V.imap (\\i _ -> recalculateCentroid classifiedPoints i) cs\n    -- dst is the function that evaluates the distance between 2 vectors (of type Vector R -> Vector R -> R)\n    classify :: V.Vector (Vector R) -> V.Vector (Vector R) -> V.Vector (Int, Vector R)\n    classify cs s = V.zip (fmap (\\p -> V.minIndex (fmap (`dst` p) cs)) s) s\n    \n    recalculateCentroid :: V.Vector (Int, Vector R) -> Int -> V.Vector R\n    recalculateCentroid m i = \n        let l = fmap snd (V.filter (\\(a,_) -> a == i) m) in \n            (1 / fromIntegral (length l)) * sum l ", 
            "subreddit": "haskell", 
            "title": "K-Means in Haskell as Beginner \"project\"", 
            "url": "https://www.reddit.com/r/haskell/comments/6yo65e/kmeans_in_haskell_as_beginner_project/"
        }, 
        {
            "author": "ssyrek", 
            "created_utc": 1504799456.0, 
            "domain": "github.com", 
            "id": "6yo2e4", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yo2e4/now_you_can_start_your_own_haskell_study_groupi/", 
            "score": 49, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Now you can start your own Haskell study group\u2014I did all the work for you.", 
            "url": "https://github.com/sjsyrek/haskell-study-startup"
        }, 
        {
            "author": "haskellweekly", 
            "created_utc": 1504794833.0, 
            "domain": "haskellweekly.news", 
            "id": "6ynkop", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ynkop/issue_71_haskell_weekly/", 
            "score": 24, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Issue 71 :: Haskell Weekly", 
            "url": "https://haskellweekly.news/issues/71.html"
        }, 
        {
            "author": "sirhcreffot", 
            "created_utc": 1504784438.0, 
            "domain": "self.haskell", 
            "id": "6ymnda", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 14, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ymnda/in_september_2017_what_is_the_best_book_to_get_if/", 
            "score": 14, 
            "selftext": "In September 2017, what is the best book (or other resource) to use if you want to get going with Haskell?\n\nPreferably a book that does not teach computer programming from scratch through Haskell, but instead assumes an at least intermediate knowledge of computer programming with various languages, since that is the demographic I will be recommending the book to.", 
            "subreddit": "haskell", 
            "title": "In September 2017, what is the best book to get if you want to get going with Haskell?", 
            "url": "https://www.reddit.com/r/haskell/comments/6ymnda/in_september_2017_what_is_the_best_book_to_get_if/"
        }, 
        {
            "author": "meekale", 
            "created_utc": 1504769421.0, 
            "domain": "self.haskell", 
            "id": "6ylqcg", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ylqcg/viewpatterns_and_patternsynonyms_enable_easy/", 
            "score": 26, 
            "selftext": "Some cool extensions:\n\n    {-# Language PatternSynonyms #-}\n    {-# Language ViewPatterns #-}\n    {-# Language ScopedTypeVariables #-}\n\nImport the non-partial function that would just be called `read` in an ideal world:\n\n    import Text.Read (readMaybe)\n\nMake a pattern synonym with a view pattern inside:\n\n    pattern Reads :: Read a => a -> String\n    pattern Reads x <- (readMaybe -> Just x)\n    \nWrite a pattern like this:\n\n    foo :: String -> String\n    foo (Reads (x :: Int)) = \"int \" ++ show x\n    foo (Reads True) = \"yes\"\n    foo _ = \"unrecognized fluff\"\n\nDemo:\n\n    > foo \"123\"\n    \"int 123\"\n    > foo \"True\"\n    \"yes\"\n    > foo \"x\"\n    \"unrecognized fluff\"\n\nI stumbled on this while working on a simple serialization tool. It was kind of a lucky shot because I haven't used pattern synonyms or view patterns much, but I think I'll be appreciating them a lot from now on.\n\nOf course you could make similar patterns for deserializing via `aeson`, `attoparsec`, `binary`, or whatever parser you want!", 
            "subreddit": "haskell", 
            "title": "ViewPatterns and PatternSynonyms enable easy pattern matching on successful reads", 
            "url": "https://www.reddit.com/r/haskell/comments/6ylqcg/viewpatterns_and_patternsynonyms_enable_easy/"
        }, 
        {
            "author": "nmattia", 
            "created_utc": 1504768471.0, 
            "domain": "tweag.io", 
            "id": "6ylo9v", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ylo9v/tracking_performance_over_the_entire_software/", 
            "score": 30, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Tracking performance over the entire software lifecyle", 
            "url": "http://www.tweag.io/posts/2017-09-06-hyperion.html"
        }, 
        {
            "author": "vaibhavsagar", 
            "created_utc": 1504763003.0, 
            "domain": "github.com", 
            "id": "6ylbn7", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ylbn7/just_build_it_a_do_what_i_mean_abstraction_for/", 
            "score": 9, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Just Build It - a \"do what I mean\" abstraction for Haskell build tools", 
            "url": "https://github.com/ivan-m/jbi"
        }, 
        {
            "author": "ephrion", 
            "created_utc": 1504762765.0, 
            "domain": "parsonsmatt.org", 
            "id": "6ylb1i", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 25, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ylb1i/overcoming_the_record_problem_slides_press_s_for/", 
            "score": 20, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Overcoming the Record Problem (slides, press S for speaker notes)", 
            "url": "http://www.parsonsmatt.org/overcoming-records/"
        }, 
        {
            "author": "isovector", 
            "created_utc": 1504746380.0, 
            "domain": "reasonablypolymorphic.com", 
            "id": "6yjxrl", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yjxrl/modeling_basic_music_theory_in_haskell/", 
            "score": 45, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Modeling basic music theory in Haskell", 
            "url": "http://reasonablypolymorphic.com/blog/modeling-music"
        }, 
        {
            "author": "bkushigian", 
            "created_utc": 1504745167.0, 
            "domain": "self.haskell", 
            "id": "6yjtoy", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yjtoy/what_are_some_quintessential_early_haskell_papers/", 
            "score": 36, 
            "selftext": "I'm digging into the depths of Haskell and its implementation/design decisions and I'm looking for some good papers to read (either by the Haskell guys or other PL papers that are related). A few things I'd like to find:\n\n* The paper(s) introducing/refining list comprehensions: I really liked the treatment I saw in Wadler's Comprehending Monads and I'm wondering if there are any other papers out there about comprehensions in particular\n* Using the type system for static proof analysis. I'm about to start reading Theorems for Free but I'd love to see what else is out there\n* Any other cool PL papers.\n\nI'm pretty new to the field so I'm bootstrapping as I go. Any suggestions are welcome!\n\nCheers, and thanks", 
            "subreddit": "haskell", 
            "title": "What are some quintessential early Haskell papers I should read?", 
            "url": "https://www.reddit.com/r/haskell/comments/6yjtoy/what_are_some_quintessential_early_haskell_papers/"
        }, 
        {
            "author": "vasanthaganesh", 
            "created_utc": 1504734517.0, 
            "domain": "blog.hustlr.in", 
            "id": "6yiscq", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 31, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yiscq/you_wont_believe_how_we_reduced_more_than_4000/", 
            "score": 18, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "You won't believe how we reduced more than 4000 LOC in Haskell Mode for Emacs", 
            "url": "https://blog.hustlr.in/posts/2017-08-07-Wrapping-up-HSoC-2017.html"
        }, 
        {
            "author": "thebitter1", 
            "created_utc": 1504717449.0, 
            "domain": "hackage.haskell.org", 
            "id": "6ygxrv", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ygxrv/accursedunutterableperformio/", 
            "score": 30, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "accursedUnutterablePerformIO", 
            "url": "https://hackage.haskell.org/package/bytestring-0.10.8.1/docs/src/Data-ByteString-Internal.html#accursedUnutterablePerformIO"
        }, 
        {
            "author": "physicologist", 
            "created_utc": 1504714177.0, 
            "domain": "self.haskell", 
            "id": "6ygkjy", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6ygkjy/i_think_ive_sort_of_made_an_instance_of_void/", 
            "score": 4, 
            "selftext": "So I was playing around and I did something stupid that looks kind of like I made an instance of void.  It starts with making a a fairly pointless infinite type:\n\n    data Trick x = Either x (Trick (Maybe x))\n\nAnd then wrapping this type in in an even more pointless wrapper.\n\n    data Wrapper x = Maybe (Maybe Bool, Bool, Bool, x)\n\nFinally, we make an instance in the laziest possible way\n\n    totallyNotVoid :: Wrapper (Trick ())\n    totallyNotVoid = Nothing\n\nNow for my claim that `totallyNotVoid` is actually Void.  This mostly comes from doing the algebra on the type definitions\n\n    Wrapper (Trick ()) = 1 + ((1+2)*2*2*(Trick ())) = 1+12*(Trick ())\n    Trick () = () + Trick (()+1)\n    () = 1\n    Trick () = 1 + Trick (2) = 1 + 2 + Trick(3) = 1 + 2 + 3 + 4 + \u2026 = -1/12\n    Wrapper (Trick ()) = 1 + 12*-1/12 = 0 = Void\n\nFor the curious, I'm getting line 4 from [Wikipedia](https://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%E2%8B%AF).\n\nNow, I have no great delusions of creativity.  I highly doubt that I'm the first person to figure out this construction.  I'm just curious if there's anything interesting about it or if it's nothing more than a parlour trick.\n", 
            "subreddit": "haskell", 
            "title": "I think I've sort of made an instance of Void", 
            "url": "https://www.reddit.com/r/haskell/comments/6ygkjy/i_think_ive_sort_of_made_an_instance_of_void/"
        }, 
        {
            "author": "stevana", 
            "created_utc": 1504706159.0, 
            "domain": "self.haskell", 
            "id": "6yfrio", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yfrio/testing_a_crud_web_application_using_quickcheck/", 
            "score": 47, 
            "selftext": "A while ago u/saurabhnanda\n[asked](https://www.reddit.com/r/haskell/comments/5jatdg/how_to_use_quickcheck_for_stateful_testing/)\nhow to test a CRUD web application using QuickCheck. I just finished an\n[example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/example/src/CrudWebserverDb.hs)\nof how to do it, using the\n[quickcheck-state-machine](https://github.com/advancedtelematic/quickcheck-state-machine)\nlibrary, and I thought it might be of interest to others so I decided to\npost it here.\n\nFor those who haven't heard of\n[quickcheck-state-machine](https://github.com/advancedtelematic/quickcheck-state-machine)\nbefore; it's a library, based on QuickCheck, for testing monadic\nprograms in general. The library is different from the\nTest.QuickCheck.Monadic approach in that it lets the user specify the\ncorrectness by means of a state machine based model using pre- and\npost-conditions a la Quiviq's Erlang version of QuickCheck. See the\n[README](https://github.com/advancedtelematic/quickcheck-state-machine#quickcheck-state-machine)\nfor a more detailed description and further examples.\n\nThe implementation of the CRUD web application is based on Servant's\n[example-servant-persistent](https://github.com/haskell-servant/example-servant-persistent)\nrepo. While testing two bugs were found (one of which was caught using\nthe parallel testing machinery), they are documented at the end of the\n[example](https://github.com/advancedtelematic/quickcheck-state-machine/blob/master/example/src/CrudWebserverDb.hs).\n\nQuestions or comments about the example and or the\nquickcheck-state-machine library in general are, of course, appreciated!", 
            "subreddit": "haskell", 
            "title": "Testing a CRUD web application using QuickCheck and a state machine based model", 
            "url": "https://www.reddit.com/r/haskell/comments/6yfrio/testing_a_crud_web_application_using_quickcheck/"
        }, 
        {
            "author": "witoldsz", 
            "created_utc": 1504705711.0, 
            "domain": "self.haskell", 
            "id": "6yfq10", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yfq10/trouble_with_application_state_novice_here/", 
            "score": 4, 
            "selftext": "I am having hard time trying to port a simple application from Java. This is actually a microservice, working like this:\n\n    - connect to AMQP server (Rabbit MQ),\n    - bind a query response consumer to a query queue,\n    - bind event consumers to event queues.\n\nQuery consumer's job is to listen to the responses issued by event handlers. In Java, all handlers have access to the \"mq\" object having a `publishQuery` method. When query gets published, kind of deferred promise is inserted into a map hidden inside that object. When query response arrives, the \"mq\" picks corresponding deferred promise and resolves it.\n\nI am using `amqp` library, it looks like this:\n\n\n    -- subscribe to the queue\n    consumeMsgs chan \"myQueue\" Ack myCallback\n\n\nTrouble is, I do not have an idea how to implement query consumer i.e. `myCallback`, in Haskell. There is no way I could share some context between this function and events handlers. That would be perfect if I could create some wrapper around callback handlers, so they would receive extra argument, some app model, and return some kind of commands being able to merge new model. \n\nMy only FP experience so far is Elm and it has very nice architecture (called TEA) where everything rotates around model updates and commands. So, if one subscribes to an event, the callback functions has always model (with current application state) available.\n\nThere are, I guess, other solutions, but so far I am stuck. Advanced topics of Haskell Programming from first principles are still long ahead of me, so I though maybe you could give me some advice?", 
            "subreddit": "haskell", 
            "title": "Trouble with application state (novice here :)", 
            "url": "https://www.reddit.com/r/haskell/comments/6yfq10/trouble_with_application_state_novice_here/"
        }, 
        {
            "author": "mickduprez", 
            "created_utc": 1504691846.0, 
            "domain": "self.haskell", 
            "id": "6yeokp", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yeokp/code_snippet_review_please/", 
            "score": 7, 
            "selftext": "Hi All, \nI'm working my way through the 'Haskle Book' (HPFFP) and would like some comments on one of my exercise solutions.\n\nI'm sure there are many ways to do this but I'm trying to stay with what I've learned up to now (I'm at ch9 - lists). I find myself using this pattern to solve most of the recursive exercises at the moment and I'm worried I'm not using some other/better patterns I may have learned.\n\nThe exercise is to create a function that takes a string and to split it with a delimiter character and return a list of strings.\n\nhere it is:\n\n    mySplitStr :: String -> Char -> [String]\n    mySplitStr str char = go str char []\n      where go s c ss\n              | s == \"\" = ss\n              | head s == c = go (tail s) c ss\n              | otherwise = go (dropWhile (/= c) s) c (ss ++ [takeWhile(/= c) s])\n\nThanks for any feedback and examples to mull over,\nCheers,\nMick", 
            "subreddit": "haskell", 
            "title": "Code snippet review, please?", 
            "url": "https://www.reddit.com/r/haskell/comments/6yeokp/code_snippet_review_please/"
        }, 
        {
            "author": "Darwin226", 
            "created_utc": 1504690424.0, 
            "domain": "self.haskell", 
            "id": "6yelke", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yelke/multiple_type_signatures/", 
            "score": 16, 
            "selftext": "I think it would be pretty great if we could write more than one type signature for a top-level function. Something like this:\n\n    a :: Num a => a\n    a = 5\n    a :: Int\n    a :: Double\n\nOnly the first signature interacts with type checking BUT the other ones are also checked for correctness. To be more precise, they must be a specialization of the main signature.\n\nYou can see things like this in the lens library where a function is often given multiple signatures in the docs because the actual signature is very general and not really instructive in how to use the function.\n\nThese extra signatures could be picked up and properly rendered by haddock, they could be used by tooling etc. \n\nI don't really see any drawbacks to this and it seems relatively undisruptive to implement since it doesn't really interact with anything.\n\nWhat do you think?", 
            "subreddit": "haskell", 
            "title": "Multiple type signatures", 
            "url": "https://www.reddit.com/r/haskell/comments/6yelke/multiple_type_signatures/"
        }, 
        {
            "author": "skyBreak9", 
            "created_utc": 1504690206.0, 
            "domain": "self.haskell", 
            "id": "6yel3u", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yel3u/is_it_possible_to_append_tuples_by_some_popular/", 
            "score": 3, 
            "selftext": "What I'd like to do is literally:\n(1, \"2\") \\`op\\` (True, 9) = (1, \"2\", True, 9)\n\nThis could for sure be implemented, just wondering if I can avoid it.", 
            "subreddit": "haskell", 
            "title": "Is it possible to append tuples (by some popular library, e.g lens)?", 
            "url": "https://www.reddit.com/r/haskell/comments/6yel3u/is_it_possible_to_append_tuples_by_some_popular/"
        }, 
        {
            "author": "taktoa", 
            "created_utc": 1504689034.0, 
            "domain": "self.haskell", 
            "id": "6yeio9", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6yeio9/recordwildcards_as_an_import_mechanism/", 
            "score": 16, 
            "selftext": "Consider the following code:\n\n    module Data.Text (Text, TMod (..), tmod) where\n    \n    data Text = \u2026 -- implementation is irrelevant\n    \n    data TMod\n      = TMod\n        { pack   :: String -> Text\n        , unpack :: Text -> String\n        , length :: Text -> Int\n        }\n\n    tmod :: TMod\n    tmod = TMod { pack = \u2026, unpack = \u2026, length = \u2026 }\n\n    module Foo where\n\n    import Data.Text\n    \n    foo = \u2026 -- code using pack, unpack, length\n      where\n        TMod {..} = tmod -- this is like ML's `open` keyword\n\nThus, RecordWildCards give us something pretty close to first-class modules and `open` from ML derivatives; the only problem is that record fields are globally namespaced, so `pack` et al. end up  in your namespace anyway, defeating the purpose (though you might be able to recover some of this behavior with OverloadedLabels).\n\nAny future work on the \"record problem\" in Haskell should probably keep this fact in mind, as it would be pretty great if we could kill two birds with one stone (i.e.: we might be able to get qualified exports / nested modules if we also had namespaced record fields).", 
            "subreddit": "haskell", 
            "title": "RecordWildCards as an import mechanism", 
            "url": "https://www.reddit.com/r/haskell/comments/6yeio9/recordwildcards_as_an_import_mechanism/"
        }, 
        {
            "author": "sn10therealbatman", 
            "created_utc": 1504630275.0, 
            "domain": "self.haskell", 
            "id": "6y99w7", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y99w7/whats_the_difference_between_trifecta_and_parsec/", 
            "score": 15, 
            "selftext": "Just a noob, trying to implement Scheme following Write You a Scheme 2.0", 
            "subreddit": "haskell", 
            "title": "Whats the difference between Trifecta and parsec?", 
            "url": "https://www.reddit.com/r/haskell/comments/6y99w7/whats_the_difference_between_trifecta_and_parsec/"
        }, 
        {
            "author": "man-vs-spider", 
            "created_utc": 1504624768.0, 
            "domain": "self.haskell", 
            "id": "6y8nhh", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 32, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y8nhh/is_it_possible_to_make_a_vector_or_array_during/", 
            "score": 13, 
            "selftext": "I have a lookup array that is constant but has to generated every time the program runs. Is it possible to generate the array while compiling and have it baked into the executable itself?", 
            "subreddit": "haskell", 
            "title": "Is it possible to make a vector or array during compile phase.", 
            "url": "https://www.reddit.com/r/haskell/comments/6y8nhh/is_it_possible_to_make_a_vector_or_array_during/"
        }, 
        {
            "author": "oddasat", 
            "created_utc": 1504623361.0, 
            "domain": "youtube.com", 
            "id": "6y8hp9", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Boston Haskell", 
                    "author_url": "https://www.youtube.com/channel/UCUCpgCWjaniUkX88wZrK_Ig", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/wjyiOXRuUdo?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/wjyiOXRuUdo/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "Thomas Dietert - Introduction to Cryptocurrencies in Haskell", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y8hp9/thomas_dietert_introduction_to_cryptocurrencies/", 
            "score": 58, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Thomas Dietert - Introduction to Cryptocurrencies in Haskell", 
            "url": "https://www.youtube.com/watch?v=wjyiOXRuUdo"
        }, 
        {
            "author": "tuxkimo", 
            "created_utc": 1504610957.0, 
            "domain": "self.haskell", 
            "id": "6y7d1n", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 39, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y7d1n/a_little_debugging_help_for_our_haskell_backend/", 
            "score": 27, 
            "selftext": "Hi there! We at [gonimo](https://gonimo.com) are facing a problem with our backend. From time to time (timespan days to weeks) our backend hangs. It will consume all CPU time and won't serve requests any longer. Code can be found [here](https://github.com/gonimo/gonimo/tree/master/back).\n\nMaybe someone has an idea/a hint what could cause such a behaviour. Or equally well appreciated, any pointers on how to debug this. It just happened again on our alpha deployment, any ideas how I'd get some info out of this hanging process to see what is going on?\n\nMany thanks, any help, ideas would be very much appreciated!\n\nEDIT: Wow, I am really impressed by the amount of comments and suggestions. Many thanks for this awesome community support! There were some good pointers! For the curious, I will write a separate post when I found the culprit!", 
            "subreddit": "haskell", 
            "title": "A little debugging help for our Haskell backend", 
            "url": "https://www.reddit.com/r/haskell/comments/6y7d1n/a_little_debugging_help_for_our_haskell_backend/"
        }, 
        {
            "author": "sn10therealbatman", 
            "created_utc": 1504606305.0, 
            "domain": "self.haskell", 
            "id": "6y71ll", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y71ll/what_are_actions/", 
            "score": 5, 
            "selftext": "Will it be wrong to think of them like promises and futures of other languages that is guranteed to resolve in a value of particular type?", 
            "subreddit": "haskell", 
            "title": "What are actions?", 
            "url": "https://www.reddit.com/r/haskell/comments/6y71ll/what_are_actions/"
        }, 
        {
            "author": "cjlarose", 
            "created_utc": 1504596194.0, 
            "domain": "self.haskell", 
            "id": "6y6fe3", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y6fe3/haskell_code_review_request_questions_about/", 
            "score": 6, 
            "selftext": "I'm writing a Kafka-compatible log server. Kafka's custom binary protocol is request-response oriented. There are different API Keys that correspond to different types of requests you might do (such as [Produce][1] or [Fetch][2]). For each API Key, there are different versions. Different versions of the same API Key often have different fields. So, for example, if the client sends a ProduceRequest Version 0, the server understands the format of that specific version of that type of request, processes the request, and returns a ProduceResponse Version 0.\n\n[1]: https://kafka.apache.org/protocol#The_Messages_Produce\n[2]: https://kafka.apache.org/protocol#The_Messages_Fetch\n\nTo represent different request types, I was originally using a Sum Type, i. e.\n\n    newtype ApiVersion = ApiVersion Int16\n    data KafkaRequest = ProduceRequest ApiVersion Int16 TimeoutMs [TopicData]\n                      | FetchRequest ApiVersion Int32 Int32 Int32 [FetchRequestTopic]\n                      | OffsetListRequest ApiVersion Int32 [OffsetListRequestTopic]\n\nThis worked okay, but I found that it was possible for be to run into some runtime errors that I'd rather know about at compile-time.\n\nFor example if I wrote a function whose input type was KafkaRequest, I could pattern-match on a bunch of different constructors for KafkaRequest, but that code was very repetitive, and worse, the program would still compile even if I missed a constructor. The best example of this was my [respondToRequest][3] function.\n\n[3]: https://github.com/cjlarose/kafkaesque/blob/cfbebfefe03065a344553f7b6dc2ae26ca92efa1/app/RequestHandlers.hs#L19-L29\n\nI later replaced the KafkaRequest Sum Type with different types for each (API Key, Version) combination (ProduceRequestV0, ProduceRequestV1, FetchRequestV0, etc) and a KafkaRequest typeclass with one required member. I did a similar thing with the response types.\n\n    class KafkaResponse a where\n      put :: a -> Put\n\n    data KafkaResponseBox =\n      forall a. KafkaResponse a =>\n                KResp a\n\n    class KafkaRequest a where\n      respond :: Pool.Pool PG.Connection -> a -> IO KafkaResponseBox\n\n    data KafkaRequestBox =\n      forall a. KafkaRequest a =>\n                KReq a\n\nI used ExistentialQuantification here for the first time so that I could have functions that specified as their return type semantically as \"a value that belongs to a type for which there exists an instance of KafkaRequest\" (my request parser) and functions that specified their result type as \"a value that belongs to a type for which there exists an instance of KafkaResponse\" (`respond`).\n\nThis worked really well in that it was now basically impossible for me to try to service a request of a particular type without having specified a function `respond` that would actually handle the request. It also made it impossible for me to respond with a response type for which I haven't yet defined a serializer function (the member `put`).\n\nWhat I want to know now is if it is possible for me to specify my `respond` members more precisely. As written, it's possible for me to write an implementation of `respond` for the ProduceRequestV0 type that sometimes gives a ProduceRequestV0 and other times a ProduceResponseV1 and maybe other times a FetchResponseV0. I'd like to make this very hard for me to do accidentally.\n\nI tried experimenting with MultiParamTypeClasses, but I couldn't figure out if that was the right tool for the job and I couldn't get anything to compile.\n\n    class KafkaRequest a b where\n      respond :: Pool.Pool PG.Connection -> a -> IO b\n\n    instance KafkaRequest ProduceRequestV0 ProduceResponseV0 where\n      respond pool (ProduceRequestV0 _ _ topics) = do\n        topicResponses <- respondToRequest pool topics\n        return $ ProduceResponseV0 topicResponses\n\nIdeally, I'd love it if I could specify in the type system that for each `k` that is an API Key and for each `v` that is an API Version there exists a unique function  `respond` that takes a `Request k v` and returns a `Response k v`.\n\nIs what I'm trying to do possible? Is it overkill? I'd appreciate any input on this specific question or on anything at all related to my current implementation. I'm very new to Haskell, so if there's something I should be using that I'm not, I'd love to know about it. Thanks!\n\nThe source code for the project is available at https://github.com/cjlarose/kafkaesque/tree/3286143a057af0af82b36ada6f3fcab3fd76973c", 
            "subreddit": "haskell", 
            "title": "Haskell code review request & questions about typeclasses", 
            "url": "https://www.reddit.com/r/haskell/comments/6y6fe3/haskell_code_review_request_questions_about/"
        }, 
        {
            "author": "ChrisPenner", 
            "created_utc": 1504567249.0, 
            "domain": "self.haskell", 
            "id": "6y3zvt", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 23, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y3zvt/motivation_of_liquidhaskell/", 
            "score": 31, 
            "selftext": "I hear about it all the time but haven't ever gotten a straight answer about what LiquidHaskell does or what it's for. I get the idea it's vaguely about Dependent Types, but the docs seem extremely unfocused; and the Examples section in the Github Readme shows: \"Jump to examples here [TODO]\" which isn't so helpful.\n\nCan someone please explain separately WHAT LiquidHaskell adds to Haskell, and HOW I could currently use those features? Thanks! Bonus points for links to a small readable example for LH beginners ", 
            "subreddit": "haskell", 
            "title": "Motivation of LiquidHaskell?", 
            "url": "https://www.reddit.com/r/haskell/comments/6y3zvt/motivation_of_liquidhaskell/"
        }, 
        {
            "author": "mightybyte", 
            "created_utc": 1504565118.0, 
            "domain": "youtube.com", 
            "id": "6y3se2", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Compose Conference", 
                    "author_url": "https://www.youtube.com/channel/UC0pEknZxL7Q1j0Ok8qImWdQ", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/dj4j_3M4K-0?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/dj4j_3M4K-0/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "Typed Tagless Final Bioinformatics", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y3se2/compose_conference_typed_tagless_final/", 
            "score": 15, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Compose Conference - Typed Tagless Final Bioinformatics", 
            "url": "https://www.youtube.com/watch?v=dj4j_3M4K-0"
        }, 
        {
            "author": "dtellerulam", 
            "created_utc": 1504554951.0, 
            "domain": "self.haskell", 
            "id": "6y2qbw", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y2qbw/what_happened_to/", 
            "score": 11, 
            "selftext": "does anyone still have haskell-email-11Sep1990-27Oct2000.gz from research.microsoft.com/~simonpj/haskell?", 
            "subreddit": "haskell", 
            "title": "What happened to code.haskell.org/~dons/haskell-1990-2000/maillist.html?", 
            "url": "https://www.reddit.com/r/haskell/comments/6y2qbw/what_happened_to/"
        }, 
        {
            "author": "zenforyen", 
            "created_utc": 1504552529.0, 
            "domain": "self.haskell", 
            "id": "6y2gu5", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y2gu5/funny_i_also_wanted_to_write_a_configuration/", 
            "score": 9, 
            "selftext": "https://github.com/apirogov/yaml-conf\n\nI wanted something that is not bloated, works mostly transparently with an arbitrary regular Haskell record type as the configuration and that it can automatically handle field updates from different sources, just like you often see in practice, e.g. system config, user config, command line arguments, but that each config needs only to state the changes from the lower priority/default configurations.\n\nMy first approach, using lenses to apply updates, was not as transparent as I wanted, so I dropped lenses and now I generate a new datatype where each field is wrapped with Maybe and generate a Monoid instance that does all the update accumulation work. The user is never confronted with these auxilliary types directly.\n\nWhat do you think about this approach? Is there a library I am not aware of that does exactly the same thing? What do you think about the implementation? Is the way I use template-haskell ok? It's not much code, but I spent quite some time to get it right, learning enough of TH on the way... Do you see how this could be replicated without TH, using only type-level magic extensions, without exposing the details to the user? Thanks for any feedback!", 
            "subreddit": "haskell", 
            "title": "Funny, I also wanted to write a configuration library. What do you think about it?", 
            "url": "https://www.reddit.com/r/haskell/comments/6y2gu5/funny_i_also_wanted_to_write_a_configuration/"
        }, 
        {
            "author": "sn10therealbatman", 
            "created_utc": 1504537940.0, 
            "domain": "self.haskell", 
            "id": "6y0vn8", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 24, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6y0vn8/where_is_reader_monad_used/", 
            "score": 22, 
            "selftext": "I am kinda confused with reader monad, and I am feeling like a real world example will help me think in the right direction.", 
            "subreddit": "haskell", 
            "title": "Where is Reader Monad used?", 
            "url": "https://www.reddit.com/r/haskell/comments/6y0vn8/where_is_reader_monad_used/"
        }, 
        {
            "author": "ssyrek", 
            "created_utc": 1504510374.0, 
            "domain": "meetu.ps", 
            "id": "6xyx50", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xyx50/haskell_study_group_in_berlin_germany_starts_on/", 
            "score": 38, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Haskell study group in Berlin, Germany starts on Sunday", 
            "url": "http://meetu.ps/e/D93Vg/k1x18/a"
        }, 
        {
            "author": "nish2575", 
            "created_utc": 1504461912.0, 
            "domain": "self.haskell", 
            "id": "6xupoq", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xupoq/best_fit_consultants_for_custom_javascript/", 
            "score": 4, 
            "selftext": "Given these shops (or others I don't know of yet): Well-Typed, Obsidian, FP Complete, StackBuilders, ThoughtBot, how effective would each be at developing brief custom training in all things Javascript for people with little background in Haskell and probably would have some reluctance to encounter something like typeclassopedia, but are generally liked their first taste of Elm and know React well. In particular, the following topics might be useful:\n\n1. hitchhikers guides to Elm, Purescript, Reflex-dom\n2. brief reviews of FP in Javascript - akh, fantasyland, ramda, immutable, other stuff [MutantM](http://mutanatum.com/posts/2017-01-12-Browser-FP-Head-to-Head.html) mentioned; reactivejs\n3. deep dive into advanced type system and functional programming in a very beginner friendly, independent/self-learning setting possibly in Haskell or Elm then Haskell\n4. Brief training on FRP concepts generally, using reactive banana or anything else (Haskell or JavaScript) \n\nThe end goal would be to seed an interest and reduce any fear of Haskell and Reflex-dom, but allow the trainee to take what they learned and independently choose a variety of libraries and languages with a good global view of how their choices fit within the possibilities out there. They may start out with very comfortable choices, then branch out later.\n\nI imagine (3) is pretty easy to find. Consultant trainers willing to do and excited to do (1) and (2) seem more rare. For example, Obsidian might find it boring to train on alternatives to reflex-dom, other consultants might find it tedious generally to dive into the Javascript libraries.\n\nI know about three people who might pool together their training stipends on such a course. I am not interested myself, mostly for front end people that I am working with.", 
            "subreddit": "haskell", 
            "title": "Best fit consultants for custom Javascript problem survey", 
            "url": "https://www.reddit.com/r/haskell/comments/6xupoq/best_fit_consultants_for_custom_javascript/"
        }, 
        {
            "author": "hardwaresofton", 
            "created_utc": 1504460096.0, 
            "domain": "vadosware.io", 
            "id": "6xuiy7", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xuiy7/building_static_binaries_program_a_convoluted/", 
            "score": 21, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Building static binaries program: A convoluted docker-based approach", 
            "url": "https://vadosware.io/post/static-binaries-for-haskell-a-convoluted-approach/"
        }, 
        {
            "author": "iamkeyur", 
            "created_utc": 1504451997.0, 
            "domain": "lettier.github.io", 
            "id": "6xtpa0", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xtpa0/lets_make_a_gtk_video_player_with_haskell/", 
            "score": 59, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Let's Make a GTK Video Player with Haskell", 
            "url": "https://lettier.github.io/posts/2017-08-30-haskell-gtk-video-player.html"
        }, 
        {
            "author": "MagicMurderBagYT", 
            "created_utc": 1504435297.0, 
            "domain": "self.haskell", 
            "id": "6xsht4", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 66, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xsht4/weekly_beginner_saturday_hask_anything_2/", 
            "score": 40, 
            "selftext": "Ask your question or help someone. No stupid questions. :)\n\nI've been gone and the bot didn't post the thread for some reason, so it's a bit later now. ", 
            "subreddit": "haskell", 
            "title": "[Weekly] Beginner Saturday: Hask Anything - #2", 
            "url": "https://www.reddit.com/r/haskell/comments/6xsht4/weekly_beginner_saturday_hask_anything_2/"
        }, 
        {
            "author": "wizzup", 
            "created_utc": 1504431530.0, 
            "domain": "self.haskell", 
            "id": "6xsac6", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xsac6/is_there_any_library_that_closely_resemble_the/", 
            "score": 13, 
            "selftext": "I currently trying [precesing-for-hasell](https://github.com/anton-k/processing-for-haskell) with ghc but I miss the live-reload capability of p5js combine with [live-server](https://github.com/tapio/live-server)", 
            "subreddit": "haskell", 
            "title": "Is there any library that closely resemble the functionality of [p5js](https://github.com/processing/p5.js) (processing) that I can use with ghcjs?", 
            "url": "https://www.reddit.com/r/haskell/comments/6xsac6/is_there_any_library_that_closely_resemble_the/"
        }, 
        {
            "author": "sn10therealbatman", 
            "created_utc": 1504416969.0, 
            "domain": "self.haskell", 
            "id": "6xri4d", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 27, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xri4d/whats_the_difference_between_newtype_type_and_data/", 
            "score": 10, 
            "selftext": "As far as I get `data` lets us construct one or more types that can have zero or more values. `newtype` is data constructor that is constrained to a single type. And `type` just declares new a synonym for an already existing type?", 
            "subreddit": "haskell", 
            "title": "Whats the difference between newtype, type and data?", 
            "url": "https://www.reddit.com/r/haskell/comments/6xri4d/whats_the_difference_between_newtype_type_and_data/"
        }, 
        {
            "author": "crocket_", 
            "created_utc": 1504407340.0, 
            "domain": "self.haskell", 
            "id": "6xqsqj", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xqsqj/i_want_to_write_a_configuration_management_system/", 
            "score": 24, 
            "selftext": "There are a few configuration management systems written in haskell, but they don't have functionalities that I want.\n\nI decided that it would be substantially cheaper to make a new simple configuration management system than to wait for my patches to be merged or rejected. To reduce friction in communication, I'll adopt C4 community process and split the core from extension libraries.\n\nNow, the question is whether I should delay the project until I learn lens, template haskell, and Free Monad.\n\nAccording to my brief research, lens makes it difficult for most haskell programmers to read. Most haskell programmers aren't familiar with Free Monad, either. Unfamiliar concepts could deter contributors.\n\nWhat tradeoffs should I be aware of when I adopt those concepts?", 
            "subreddit": "haskell", 
            "title": "I want to write a configuration management system in haskell.", 
            "url": "https://www.reddit.com/r/haskell/comments/6xqsqj/i_want_to_write_a_configuration_management_system/"
        }, 
        {
            "author": "chrisdoner", 
            "created_utc": 1504368836.0, 
            "domain": "gist.github.com", 
            "id": "6xmxxq", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xmxxq/unlet/", 
            "score": 19, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Unlet", 
            "url": "https://gist.github.com/chrisdone/74180331c64e8cff47e447cb15087ad0"
        }, 
        {
            "author": "singpolyma", 
            "created_utc": 1504366835.0, 
            "domain": "self.haskell", 
            "id": "6xmq68", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xmq68/haskell_on_lobsters/", 
            "score": 16, 
            "selftext": "Given the Reddit announcement that they're abandoning open source for the product, I'm looking to engage with platforms that still care. https://lobste.rs/t/haskell exists already and seems like a great option -- hit me up if you need an invite.", 
            "subreddit": "haskell", 
            "title": "Haskell on Lobste.rs", 
            "url": "https://www.reddit.com/r/haskell/comments/6xmq68/haskell_on_lobsters/"
        }, 
        {
            "author": "deltaSquee", 
            "created_utc": 1504342502.0, 
            "domain": "self.haskell", 
            "id": "6xkqk7", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 46, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xkqk7/why_has_row_polymorphism_not_made_it_into_haskell/", 
            "score": 68, 
            "selftext": "Like, not even a restricted form (e.g. for sets of types)?", 
            "subreddit": "haskell", 
            "title": "Why has row polymorphism not made it into Haskell?", 
            "url": "https://www.reddit.com/r/haskell/comments/6xkqk7/why_has_row_polymorphism_not_made_it_into_haskell/"
        }, 
        {
            "author": "MichaelBurge", 
            "created_utc": 1504341816.0, 
            "domain": "michaelburge.us", 
            "id": "6xkowd", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xkowd/visualizing_graphs_in_haskell/", 
            "score": 22, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Visualizing Graphs in Haskell", 
            "url": "http://www.michaelburge.us/2017/09/01/how-to-use-graphviz-in-haskell.html"
        }, 
        {
            "author": "sn10therealbatman", 
            "created_utc": 1504340209.0, 
            "domain": "self.haskell", 
            "id": "6xkktl", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 33, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xkktl/why_do_haskell_needs_monad_for_io/", 
            "score": 10, 
            "selftext": "[So I started learning Haskell two days back,](https://www.reddit.com/r/haskell/comments/6x6e09/if_i_am_just_starting_haskell_what_should_i_know/) but I am kinda still stuck on monads and IO. Why are Haskell functions pure? Is it just because the Haskell committe doesn't like impure functions, or is there something inherent about the language that makes pure functions unavailable?Also, as far as I understand monad is just a wrapper for any value, which has a bind operation defined for it. How does this let  us manage IO in Pure functions?", 
            "subreddit": "haskell", 
            "title": "Why do Haskell needs monad for io?", 
            "url": "https://www.reddit.com/r/haskell/comments/6xkktl/why_do_haskell_needs_monad_for_io/"
        }, 
        {
            "author": "joehillen", 
            "created_utc": 1504329188.0, 
            "domain": "twitter.com", 
            "id": "6xjy70", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 33, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xjy70/movie_monad_an_open_source_desktop_video_player/", 
            "score": 109, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Movie Monad - an open source desktop video player. Electron free, written in Haskell.", 
            "url": "https://twitter.com/lettier/status/903755820197974016"
        }, 
        {
            "author": "shane7881", 
            "created_utc": 1504328260.0, 
            "domain": "self.haskell", 
            "id": "6xjvuv", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xjvuv/discord_bot_in_haskell/", 
            "score": 10, 
            "selftext": "Has anyone been able to create one before, and are there existing libraries for doing so?", 
            "subreddit": "haskell", 
            "title": "Discord bot in Haskell?", 
            "url": "https://www.reddit.com/r/haskell/comments/6xjvuv/discord_bot_in_haskell/"
        }, 
        {
            "author": "venju", 
            "created_utc": 1504316147.0, 
            "domain": "self.haskell", 
            "id": "6xizmt", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xizmt/experience_at_haskell_jobs/", 
            "score": 34, 
            "selftext": "Hi, I'm trying to decide where to work after graduating and I am looking for the magic fun software job that won't slowly drain my youthful soul. I have interned at the \"hip\" companies (Google, Facebook, two startups, etc) and worked on the \"hip\" problems (NLP, Machine Translation, Security, etc) but I none of them have been the myth.\n\nI believe the myth is feasible because it's how I feel writing haskell by myself: dope, consistently, without much that feels like manual labor, and without the discouraging emotional compromises in correctness and \"good\"ness I have to make in the languages and tooling at work.\n\nI've read some posts on here from people who also worked jobs that college students generally think are the myth (e.g. ML @ Facebook) but found it terrible and then went back to working haskell jobs.\n\nThat gives me hope. It's an unexplored frontier. Could the myth be out there? Are you living the myth?\n\nTell me. What is your first person experience working these haskell jobs?", 
            "subreddit": "haskell", 
            "title": "Experience at Haskell Jobs", 
            "url": "https://www.reddit.com/r/haskell/comments/6xizmt/experience_at_haskell_jobs/"
        }, 
        {
            "author": "sn10therealbatman", 
            "created_utc": 1504293649.0, 
            "domain": "self.haskell", 
            "id": "6xgsw3", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xgsw3/what_does_do_do_in_haskell/", 
            "score": 13, 
            "selftext": "How does it relate to >>=?", 
            "subreddit": "haskell", 
            "title": "What does `do` do in Haskell?", 
            "url": "https://www.reddit.com/r/haskell/comments/6xgsw3/what_does_do_do_in_haskell/"
        }, 
        {
            "author": "Ford_O", 
            "created_utc": 1504291845.0, 
            "domain": "self.haskell", 
            "id": "6xglwe", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xglwe/cheers_for_haskell/", 
            "score": 58, 
            "selftext": "I had to convert string representation of ip4 to number representation in a ~10 000 000 line .csv file. For illustration:\n\nBefore\n\n    \"1.0.64.0\",\"1.0.127.255\",\"JP\",\"Hiroshima-ken\", ...\n    \"1.0.128.0\",\"1.0.128.255\",\"TH\",\"\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\", ...\n    \"1.0.129.0\",\"1.0.129.255\",\"TH\",\"\u0e08\u0e31\u0e07\u0e2b\u0e27\u0e31\u0e14 \u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\", ...\n\nAfter\n\n    16793600,16809983,\"JP\",\"Hiroshima-ken\", ...\n    16809984,16810239,\"TH\",\"\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\", ...\n    16810240,16810495,\"TH\",\"\u0e08\u0e31\u0e07\u0e2b\u0e27\u0e31\u0e14 \u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\", ...\n\nSo I naturally reached out for Haskell.\n\n    main = interact $\n        unlines . map (intercalate \",\" . convert . splitBy ',') . lines\n\nBut Windows10 refused to speak Chinese, after some googling I ended up with\n\n    PS> chcp 65001\n    PS> Get-Content -Encoding utf8 input | runghc main.hs | Out-File -Encoding utf8 output\n\n[And it still did not work!](https://stackoverflow.com/questions/45965471/haskell-winx-utf8-stdin-causes-problems) I got pretty mad at this point and decided to use different language. Perhaps some with *actual* support of unicode. I ended up with [Julia](https://julialang.org).\n\n    old = readcsv(input) # returns Array\n    new = map(convert, old)\n    writecsv(output, new)\n\nI was quite happy since `readcsv` and `writecsv` were part of the standard library as well as `IPv4 : String -> Number` which was exactly what I needed.\n\nBut uh, the conversion took around 20 minutes and consumed 1.5 GB of my RAM. Strictness sucks right? But my second version\n\n    while(!eof(input))\n        old = readline(input)\n        new = convert(old)\n        println(output, new)\n    end\n\nwas even worse. Although consuming only 150MB it took much longer to compute...\n\nIt should have been a trivial task... I had enough of it.\n\n-----------------\n\nNew day, new hopes.\n\nI decided to give Haskell another spin. Maybe if I will read and write directly to file, the problem will disappear... And it really did!\n\nAnd what amazed me: *it took only 4 minutes and 3 MB of RAM!* I expected a low memory footprint, but this completely exceeded my expectations.\n\nSo here I am, cheering for Haskell and the people who made this possible.", 
            "subreddit": "haskell", 
            "title": "Cheers for Haskell!", 
            "url": "https://www.reddit.com/r/haskell/comments/6xglwe/cheers_for_haskell/"
        }, 
        {
            "author": "MoltarTheGreat", 
            "created_utc": 1504291282.0, 
            "domain": "self.haskell", 
            "id": "6xgjml", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xgjml/trouble_installing_ghcmod_with_ghc_version_821/", 
            "score": 8, 
            "selftext": "For some reason I cannot find a way to install ghc-mod, and trust me I have been trying for 2 days now. Two actual days, because I've tried so many hackish 'fixes' that ended up breaking everything and caused more trouble than it was worth. I tried manually `unpack`ing it and changing the constraints, but I believe that also caused issues. I also tried installing with stack, which ended up installing `ghc-8.0.1`, which also ended up causing me to lose the most amount of time I've ever had to from setting up a program. I know you're not supposed to mix cabal and stack, but literally everything I've found said either to use 'cabal', which did not work, or to use 'stack', so I decided to switch over to 'stack' but it turns out I had a lot of conflicts trying to commit to 'stack' in that some programs still tried to use 'cabal', and blah blah blah.\n\nNeedless to say, I have spent 2 days, going on 3, trying to set this up. This time instead of trying a hackish workaround, I'd just ask the community instead. I know that current GHC-Mod has some problems GHC 8.2.1, so what do I do? I know that having multiple versions causes annoying issues, so what do I do? Do I uninstall Haskell Platform 8.2.1 and look for an archived Haskell Platform 8.0.2/8.0.1? I'm seriously lost, because I need to start development soon.\n\n\nEdit:\n\nThe actual error...\n\n    $ cabal install ghc-mod\n    Resolving dependencies...\n    cabal.exe: Could not resolve dependencies:\n    trying: ghc-mod-5.8.0.0 (user goal)\n    next goal: base (dependency of ghc-mod-5.8.0.0)\n    rejecting: base-4.10.0.0/installed-4.1... (conflict: ghc-mod => base<4.10 &&\n    >=4.6.0.1)\n    rejecting: base-4.10.0.0, base-4.9.1.0, base-4.9.0.0, base-4.8.2.0,\n    base-4.8.1.0, base-4.8.0.0, base-4.7.0.2, base-4.7.0.1, base-4.7.0.0,\n    base-4.6.0.1, base-4.6.0.0, base-4.5.1.0, base-4.5.0.0, base-4.4.1.0,\n    base-4.4.0.0, base-4.3.1.0, base-4.3.0.0, base-4.2.0.2, base-4.2.0.1,\n    base-4.2.0.0, base-4.1.0.0, base-4.0.0.0, base-3.0.3.2, base-3.0.3.1\n    (constraint from non-upgradeable package requires installed instance)\n    After searching the rest of the dependency tree exhaustively, these were the\n    goals I've had most trouble fulfilling: base, ghc-mod, syb\n   \n\nEdit:\n\n8.0.2 seems to work fine, so it seems specific to 8.2.1 (the version that is the first thing people see on the haskell-platform website).", 
            "subreddit": "haskell", 
            "title": "Trouble installing GHC-Mod with GHC Version 8.2.1", 
            "url": "https://www.reddit.com/r/haskell/comments/6xgjml/trouble_installing_ghcmod_with_ghc_version_821/"
        }, 
        {
            "author": "rodrigosetti", 
            "created_utc": 1504235396.0, 
            "domain": "github.com", 
            "id": "6xbwil", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xbwil/property_based_testing_for_apis/", 
            "score": 16, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Property based testing for APIs", 
            "url": "https://github.com/rodrigosetti/swagger-test"
        }
    ], 
    "subreddit_creation_utc": 1201271843.0, 
    "subscribers": 29045, 
    "title": "Haskell :: Reddit", 
    "title_word_count_occurrences": {
        " c ": 1, 
        "deep learning": 1, 
        "docker": 1, 
        "emacs": 1, 
        "github": 2, 
        "google": 4, 
        "haskell": 68, 
        "html": 2, 
        "java": 5, 
        "javascript": 3, 
        "python": 1, 
        "ruby": 1, 
        "shell": 1, 
        "sql": 1, 
        "tex": 2, 
        "vim": 2
    }, 
    "top_score_submissions": [
        {
            "author": "hmemcpy", 
            "created_utc": 1506767273.0, 
            "domain": "self.haskell", 
            "id": "73e7l3", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 28, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73e7l3/i_made_bartosz_milewskis_book_category_theory_for/", 
            "score": 253, 
            "selftext": "Recently, Bartosz had completed his epic series on Category Theory on his blog.\n\nI took it upon myself to try and convert this work into a PDF, and with his permission, so I have!\n\nI scraped the blog, converted it to LaTeX using pandoc, and manually tweaked a whole bunch of things. The result is one beautifully-typeset PDF, if I say so myself :)\n\nSo please **download the complete PDF here**: https://github.com/hmemcpy/milewski-ctfp-pdf\n\nNote: this is just the beginning, there's probably a lot still wrong, and it should be further \"mathified\". Please feel free to contribute (PRs, issues!)\n\nThank you!", 
            "subreddit": "haskell", 
            "title": "I made Bartosz Milewski's book \"Category Theory for Programmers\" into a PDF!", 
            "url": "https://www.reddit.com/r/haskell/comments/73e7l3/i_made_bartosz_milewskis_book_category_theory_for/"
        }, 
        {
            "author": "joehillen", 
            "created_utc": 1504329188.0, 
            "domain": "twitter.com", 
            "id": "6xjy70", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 33, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6xjy70/movie_monad_an_open_source_desktop_video_player/", 
            "score": 109, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Movie Monad - an open source desktop video player. Electron free, written in Haskell.", 
            "url": "https://twitter.com/lettier/status/903755820197974016"
        }, 
        {
            "author": "sibip", 
            "created_utc": 1505197270.0, 
            "domain": "fpcomplete.com", 
            "id": "6zl88c", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 83, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6zl88c/all_about_strictness/", 
            "score": 100, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "All About Strictness", 
            "url": "https://www.fpcomplete.com/blog/2017/09/all-about-strictness"
        }, 
        {
            "author": "jaspervdj", 
            "created_utc": 1505504089.0, 
            "domain": "summer.haskell.org", 
            "id": "70c6k1", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/70c6k1/summer_of_haskell_2017_final_results/", 
            "score": 97, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Summer of Haskell 2017 - Final results", 
            "url": "https://summer.haskell.org/news/2017-09-15-final-results.html"
        }, 
        {
            "author": "saurabhnanda", 
            "created_utc": 1505052320.0, 
            "domain": "medium.com", 
            "id": "6z8e3m", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 62, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/6z8e3m/benchmarks_ghcjs_reflex_miso_purescript_thermite/", 
            "score": 95, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Benchmarks: GHCJS (Reflex, Miso) & Purescript (Thermite, Pux, Halogen)", 
            "url": "https://medium.com/@saurabhnanda/benchmarks-fp-languages-libraries-for-front-end-development-a11af0542f7e"
        }
    ], 
    "total_submissions": 226, 
    "utc_of_data_collection_completion": "2017-10-16 18:50:51", 
    "utc_of_data_collection_start": "2017-10-16 18:50:50"
}