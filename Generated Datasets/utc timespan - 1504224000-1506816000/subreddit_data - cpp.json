{
    "active_user_count": 296, 
    "advertiser_category": "Technology", 
    "audience_target": "programming", 
    "avg_comment_num_per_submission": 23, 
    "avg_submission_score": 38, 
    "collection_range_end_unix_timestamp": 1506816000, 
    "collection_range_end_utc": "2017-10-01 00:00:00", 
    "collection_range_start_unix_timestamp": 1504224000, 
    "collection_range_start_utc": "2017-09-01 00:00:00", 
    "description": "Discussions, articles, and news about the C++ programming language or programming in C++.\n\n\n\n**For C++ questions, answers, help, and advice see [r/cpp_questions](http://reddit.com/r/cpp_questions) or [StackOverflow](http://stackoverflow.com)**.\n\n---\n\n**Get Started**\n\nThe [C++ Standard Home](http://isocpp.org/) has a nice _[getting started](http://isocpp.org/get-started)_ page.\n\n**Slack**\n\nJoin [the C++ community on Slack](https://cpplang.now.sh).\n\n**Reference**\n\n[cppreference.com](http://en.cppreference.com/w/)\n\n**Books**\n\nThere is a useful list of books on [Stack Overflow](http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list). In most cases reading a book is the best way to learn C++.\n\n---\n\n[Show all links](http://www.reddit.com/r/cpp/#all)\n\n[Filter out CppCon links](http://nc.reddit.com/r/cpp/#nc)\n\n[Show only CppCon links](http://oc.reddit.com/r/cpp/#oc)\n", 
    "display_name": "cpp", 
    "domain_occurrences": {
        "akrzemi1.wordpress.com": 1, 
        "alexpolt.github.io": 1, 
        "baptiste-wicht.com": 2, 
        "bfilipek.com": 3, 
        "bitbashing.io": 1, 
        "blog.benoitblanchon.fr": 1, 
        "blog.llvm.org": 1, 
        "blog.qt.io": 1, 
        "blog.tartanllama.xyz": 2, 
        "blogs.msdn.microsoft.com": 2, 
        "bluescarni.github.io": 1, 
        "chrisbeck.co": 1, 
        "codeofconnor.wordpress.com": 1, 
        "codinglio.com": 1, 
        "cpp.libhunt.com": 3, 
        "cppcast.com": 5, 
        "cppcon.org": 2, 
        "cpplang.now.sh": 1, 
        "cs.columbia.edu": 1, 
        "david-grs.github.io": 2, 
        "deque.blog": 2, 
        "doar-e.github.io": 1, 
        "eliasdaler.github.io": 1, 
        "fluentcpp.com": 4, 
        "foonathan.net": 1, 
        "gcc.godbolt.org": 1, 
        "github.com": 15, 
        "godbolt.org": 2, 
        "goldsborough.me": 1, 
        "gracicot.github.io": 1, 
        "gridem.blogspot.com": 1, 
        "groups.google.com": 1, 
        "hackernoon.com": 2, 
        "herbsutter.com": 1, 
        "ithare.com": 1, 
        "jandeinhard.de": 2, 
        "kdab.com": 1, 
        "kristerw.blogspot.com": 1, 
        "kristerw.blogspot.in": 1, 
        "lewissbaker.github.io": 1, 
        "lists.boost.org": 1, 
        "medium.com": 3, 
        "meetingcpp.com": 1, 
        "meetingcpp.net": 1, 
        "michaelburge.us": 1, 
        "nibblestew.blogspot.com": 1, 
        "nickdesaulniers.github.io": 1, 
        "onqtam.com": 1, 
        "opensource.googleblog.com": 1, 
        "philippegroarke.com": 1, 
        "reddit.com": 1, 
        "releases.llvm.org": 1, 
        "self.cpp": 45, 
        "shaharmike.com": 1, 
        "sites.google.com": 1, 
        "slideshare.net": 1, 
        "study.marearts.com": 1, 
        "techiedelight.com": 1, 
        "twitter.com": 1, 
        "upcoder.com": 1, 
        "videocortex.io": 1, 
        "webtoolkit.eu": 1, 
        "weliveindetail.github.io": 1, 
        "youtu.be": 1, 
        "youtube.com": 8
    }, 
    "id": "2qi27", 
    "num_external_website_posts": 107, 
    "num_text_posts": 45, 
    "public_description": "Discussions, articles and news about the C++ programming language or programming in C++.", 
    "submissions": [
        {
            "author": "laqq3", 
            "created_utc": 1506796264.0, 
            "domain": "youtube.com", 
            "id": "73gl9d", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/YWiAUUblD34?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/YWiAUUblD34/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Lars Knoll \u201cQt as a C++ Framework: History, Present State and Future\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 38, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73gl9d/cppcon_2017_lars_knoll_qt_as_a_c_framework/", 
            "score": 55, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Lars Knoll \u201cQt as a C++ Framework: History, Present State and Future\u201d", 
            "url": "https://www.youtube.com/watch?v=YWiAUUblD34"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506783033.0, 
            "domain": "github.com", 
            "id": "73faz3", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73faz3/strong_type_an_experimental_c_strong_typedefish/", 
            "score": 47, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "strong_type: An experimental C++ strong typedef-ish thingie", 
            "url": "https://github.com/rollbear/strong_type"
        }, 
        {
            "author": "Socapex", 
            "created_utc": 1506754613.0, 
            "domain": "philippegroarke.com", 
            "id": "73djo1", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73djo1/friendly_dataoriented_entitycomponent_managers/", 
            "score": 11, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Friendly Data-Oriented Entity-Component Managers", 
            "url": "https://philippegroarke.com/blog/2017/09/30/friendly-data-oriented-entity-component-managers/"
        }, 
        {
            "author": "cblume", 
            "created_utc": 1506741691.0, 
            "domain": "github.com", 
            "id": "73cq98", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73cq98/transwarp_10_released_a_headeronly_library_for/", 
            "score": 33, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "transwarp 1.0 released: A header-only library for task concurrency", 
            "url": "https://github.com/bloomen/transwarp"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506707062.0, 
            "domain": "slideshare.net", 
            "id": "739g6h", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Sumant Tambe", 
                    "author_url": "https://www.slideshare.net/SumantTambe", 
                    "description": "Variants have been around in C++ for a long time and C++17 now has std::variant. We will compare inheritance and std::variant for their ability to model sum-ty...", 
                    "height": 500, 
                    "html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.slideshare.net%2Fslideshow%2Fembed_code%2Fkey%2FjT0C8yaZZsl02J&url=https%3A%2F%2Fwww.slideshare.net%2FSumantTambe%2Fnew-tools-for-a-more-functional-c-80294483&image=https%3A%2F%2Fcdn.slidesharecdn.com%2Fss_thumbnails%2Fnewtoolsforamorefunctionalc-170929153923-thumbnail-4.jpg%3Fcb%3D1506701214&key=2aa3c4d5f3de4f5b9120b660ad850dc9&type=text%2Fhtml&schema=slideshare\" width=\"600\" height=\"500\" scrolling=\"no\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "SlideShare", 
                    "provider_url": "https://www.slideshare.net/", 
                    "thumbnail_height": 432, 
                    "thumbnail_url": "https://cdn.slidesharecdn.com/ss_thumbnails/newtoolsforamorefunctionalc-170929153923-thumbnail-4.jpg?cb=1506701214", 
                    "thumbnail_width": 768, 
                    "title": "New Tools for a More Functional C++", 
                    "type": "rich", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "slideshare.net"
            }, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/739g6h/new_tools_for_a_more_functional_c/", 
            "score": 3, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "New Tools for a More Functional C++", 
            "url": "https://www.slideshare.net/SumantTambe/new-tools-for-a-more-functional-c-80294483"
        }, 
        {
            "author": "kfunk87", 
            "created_utc": 1506703880.0, 
            "domain": "kdab.com", 
            "id": "7393e9", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7393e9/hotspot_linux_perf_gui_v110_adds_timeline_and/", 
            "score": 48, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Hotspot (Linux perf GUI) v1.1.0 adds timeline and recording features - KDAB", 
            "url": "https://www.kdab.com/hotspot-v1-1-0-adds-timeline-recording-features/"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1506669859.0, 
            "domain": "cpplang.now.sh", 
            "id": "736azc", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/736azc/come_join_the_c_community_on_slack/", 
            "score": 25, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Come join the C++ community on Slack!", 
            "url": "https://cpplang.now.sh/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506666259.0, 
            "domain": "fluentcpp.com", 
            "id": "7362kl", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7362kl/tee_get_debug_info_with_little_impact_on_code/", 
            "score": 12, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "tee - Get Debug Info With Little Impact On Code", 
            "url": "https://www.fluentcpp.com/2017/09/29/tee-getting-precious-debug-info-easily/"
        }, 
        {
            "author": "tallassrob", 
            "created_utc": 1506659789.0, 
            "domain": "cppcast.com", 
            "id": "735mca", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/735mca/cppcast_java_with_patricia_aas/", 
            "score": 11, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCast: Java with Patricia Aas", 
            "url": "http://cppcast.com/2017/09/patricia-aas/"
        }, 
        {
            "author": "AbsoluteCaSe", 
            "created_utc": 1506658839.0, 
            "domain": "self.cpp", 
            "id": "735jnv", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/735jnv/is_there_a_livecollaborative_c_environmentide/", 
            "score": 0, 
            "selftext": "Like for instance, Visual Studios spits out files when you build. \n\nIs there an online ide that allows collaboration that will accept all of these files and run them w/out any re-configurations/fiddling? \n\nThis is only for console-based things. \n\nI know Visual Studio Online is a thing but it only allows five people to work on something at a time.\n\nIf I try to upload the files that were built by Visual Studio and run it in an online IDE that has a collaborative environment, it just doesn't work. But in VS it does.", 
            "subreddit": "cpp", 
            "title": "Is there a live-collaborative C++ environment/ide that will accept Visual Studio files right off the bat & you can just run it?", 
            "url": "https://www.reddit.com/r/cpp/comments/735jnv/is_there_a_livecollaborative_c_environmentide/"
        }, 
        {
            "author": "stanislavb", 
            "created_utc": 1506646424.0, 
            "domain": "cpp.libhunt.com", 
            "id": "734gdi", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/734gdi/awesome_c_weekly_issue_68/", 
            "score": 1, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Awesome C++ Weekly - Issue 68", 
            "url": "https://cpp.libhunt.com/newsletter/68"
        }, 
        {
            "author": "14ned", 
            "created_utc": 1506641899.0, 
            "domain": "self.cpp", 
            "id": "7340zo", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7340zo/outcome_v2_now_in_boostified_form_help_with/", 
            "score": 8, 
            "selftext": "Outcome v2, a C++14 library for reporting and handling function failures (https://ned14.github.io/outcome/) which was discussed here a fair bit previously, has finished its post-Boost-review maturation phase and now has a Boost-ready edition at https://github.com/ned14/boost-outcome. This will be the version presented for a second Boost review before the end of 2017, this time hopefully being approved as a reasonable consensus design from the May peer review. Standalone single file non-Boost edition remains available at https://github.com/ned14/outcome/raw/develop/single-header/outcome.hpp\n\nIf anyone feels like helping me not write unintelligible documentation like I normally do, please do reach out. Immortalised credit will be given in the Boost docs if it gets in.\n\nBTW @foonathan, how is that rewrite of Standardese going? I kinda need that now, if it's not ready then I'll have to write the reference API docs by hand :(\n\nAlso, to that person here (I forget the name) who hates the auto-throwing nature of `result<T, E>` and `outcome<T, EC, E>`, I've added an Expected-like typedef called `checked<T, E>` which does exactly what you prefer. Check it out, and tell me what else you dislike about it :)", 
            "subreddit": "cpp", 
            "title": "Outcome v2 now in Boostified form, Help with writing documentation requested", 
            "url": "https://www.reddit.com/r/cpp/comments/7340zo/outcome_v2_now_in_boostified_form_help_with/"
        }, 
        {
            "author": "c0r3ntin", 
            "created_utc": 1506639342.0, 
            "domain": "youtube.com", 
            "id": "733s51", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/4AfRAVcThyA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/4AfRAVcThyA/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Herb Sutter \u201cMeta: Thoughts on generative C++\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 59, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/733s51/cppcon_2017_herb_sutter_meta_thoughts_on/", 
            "score": 144, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Herb Sutter \u201cMeta: Thoughts on generative C++\u201d", 
            "url": "https://www.youtube.com/watch?v=4AfRAVcThyA"
        }, 
        {
            "author": "IRSmoh", 
            "created_utc": 1506630896.0, 
            "domain": "self.cpp", 
            "id": "732wfw", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/732wfw/custom_zip_iterator_implementation/", 
            "score": 0, 
            "selftext": "So unfortunately boost::zip_iterator does not work for sort functions; or similar functions. But since it'd be incredibly convenient to be able to do so I wrote my own implementation (rather easy honestly). \n\nhttps://bitbucket.org/IRSmoh/zip_iterator/overview\n\nSupports all the standard features of an iterator (or at least that's the goal). Along with the added bonus of being lazy, aka you can intialize structs with a dereference of the iterator. Licensed under Boost's license.\n\non feature tweaks:\n\nI'm fine with how the features work for most of the cases but I can't decide how I want comparison to default. Currently default comparison assumes that all the iterators are the same length.. But that's not very useful if the iterators that are fed in differ in length; which is also supported under creating the iterators with the tag zip::fuzzy_equality_tag which checks to see if any iterator satisfies the == or != conditions... Basically I can't decide if I should leave the comparisons for checking totality and individuality; or if I should cheat a little bit and if the user verifies that the iterators all have the same length just check the first iterator for terminal condition instead of all (since they'd all reach terminal at the same time).\n\nalso incredibly long godbolt link for showing how well it optimizes down: [link](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZSBnVAV2OUxAHIBSAJgGY8AO2QAbZlgDU3fgGECzAA6jMM7NwAMAQT6CR4qTNnIGBdFgBmazVqEBDALaYGiu%2B0kAvPIpvcA7ABCvhoAnKbEzMgEkpZ2zKIEAPqYAI7MdqKEAJ6JBHbA0oH%2BACIyQdqaIQD0VQSYxMR4AEaiWZL2TugAdF3B1VVNzNEMeMD2ogySBAh20TKl/MWSdkLokmBg85IA7niiopLICJjIANaSivWSDMxNkoT1sySSFs9oDq6NTEJ9NZhdwC69wsklQQkw9zqxCexHukwYCBIUKmMyEyyEqGmVxWa2mzEmmFW8NQYKu0zwk12%2B0OcQYEKxDimqEOqA%2BdmIENSzDwADcMoSCL0KqFwpFohZmB4PDkuRlsrl8n1/OUdAI8CDLMJMOgIIlEmIVsA9QBKQqyfyyGKYCxanV6gDiADkAKqyE2%2BASa8GSABiAHkADLFRLYAAaAAUAErYADKMYAkn7HTHEjHneHw37IwAVbClCoCQn4KzCkKVOofUSzVRyAhZS4delKFS5euYUjXPAeTC5SQ9IHCdAMaylyqmWZ4ZCSJokg4SqU5d6fTAQNBCUxTZs9uuXPgANkkKgsBA7a43CmU27b%2B8kjWACBP1zMIBAg8wAA9EnS0oT2EZBww/ZqMaSqhMqHqCBYli%2BoGwZhlGsYJkmKZphmWa5vmOhgdhIQcgoxBolApjoC%2BwCYAQ/5EmoEBHgQprzFsxGkeRlFDtRd4Psa9F%2BOaPF9j0ZoWi8GR0iB/AqromATKoo44XERCHo40iLNIACsQSqcUEDycytEdjpt6jJxoFlmBRSyaZll4awaK0cpCxLBxFHiSZlQlGUrmhDU2wEHcPIUukBymBIeDMjciiKEiwgFK8ohrB%2BigcgwIxgpMpzTO%2BQpYZZlQzqgBzssQ3DqcVpSBIpDgQExIBkc5sgAdRtHGh21W1axw78NgEBOVx/aFAsEk4ZUrywtpQxhXkCiTCAywNCBFlueZ2VuTh6qSFVk34vNy1DTh1kEU%2Bsz4h5C1mZhK1WeRNnCdJJ2qvwRbqq5fjnWqGrWraur6lWQhGok3G8ZaXral9Tquu6Bb8MwqzWjBQYhhG0ZxomyapummY5nmEGPSWy0vXd5aYJW1ZGDuhKOE2l6tpcLVdtu/EDlRnV9Hlc6StK%2Bqssuq6pdEF4tmTN56Sy6581u1OqLwB5OS1z6vjDn7fswv41vVRJAZ122LYNl34WiFgiTWAQ1OtrUsXIDWdTR1p0fZjFy21FtM11PUA0JGs6%2B5pYVsoJO1m2jaSLKmR1gqwAdmTgeEMQEsRwHFN9UlznqKWBrJZCjxEEVo5LZUiWYicdQkSZ%2BLRZCMf8xC9skSAlf/gQFdth2Sca%2BoLkWdHuRbuXHWDdlii3JkyAgCZPtVnUpPx04DOblTZMdSnO1hA3Yqzy22zQhF9TPZ7OGl79t7Wl3l72U%2BNd17W4vz/urcE7tuFH5XOyb5c6DHyod85aECVD4Qa89hvOwW9iDdUflufcN4LynhmLCPIwBTQzUAVvN%2BlcIAXm4kEfGwol6E2JhPf2DYKYix5LHM%2BL5yYtB7OqXIRgNjVQpF%2BCmRg1wkLJs3MBl41Avj5OIKuUsbx0LlgwhgTC5AsNIZXRISDLhFU6twjIysOyszUKfFeNZF4XUqKgGRMJiESwgKaM80QMQfnYIoCip0yy53vpUfaaIWH1BSkIRIxxRAyOYWCVh14rbVQcHYU4VCFZfi5CrIwIxuyoAsP2NBV82wMDEuoIoL0xK7xylgnBoQx5%2B3kFPSmAtvEaPvpI6R28pagh0VneYPNRb/wljeHqnkrGpIuiUlB3cthOU/po0IdjJAACpyS90aV7DJIRWblMziQIw1TzzixKUVMpPURYbhMe%2BMxFjRngUsbYq6B1WnvyrnIQy95BT7Ivs0s6jTxnaMmbIhyMyxZU3mfUoytsjHtFQKYzA5jhnWK/rra6Zz2mLA6a8roQLOHt02ek7pYzZwTOhFnDYVT3nFJfqU6WrzDG8w%2BV8n52y/mwt6RsCAAyEAUjtipBpULYUjNhdcipUyraormeihZmKTnYpqas9ZvyLkAr2eitpJ8VFOXBUKg5XShowvvgy25RgUU4rRUA9xiysXLOMZ8tZ3yNm0sJffYlkAyUUtFViqVaTzqyvhTcxFTK25aRZU8tlLzOUatxdq/F0L%2BU7L1usI1gzlKWmpd6mV/ysn4JyYQ6eqAmhUElczSxcrbWyNkA80EsbJVqtde8nlOq%2BXDJ6bstEEKVCBuOQ%2Bc1i1LVhqJr7CNkciExrjRfQp/yk0wgYosNNTbM0cs4m63Nnq9XesLb6kthyHLluciG6tF1w2qwbdGjNLarnWsZcQZFXb3k9rrlm/tOatW8oJSOh%2BvqSXGsmJ2xyZqaU2NDXO2t48F25PTc28BCbRntsqcynFO7wF7reTiwduq70nt6eO5S2Ap2VsuZY%2Bdk8o0Qj/ZC1tF0v1MvNFu39y7/19sA9yw9ebj0FtPddc9AbTWcpg1Y2dOF4MEPJkut9KHV35QRR25mWGanIY/gBrlKzCNDtAyRw1pKKNHODb82jll6ORsY0hnDLHLEWEaEWaca75VyG7Yp3jB5haOvXs6vj7qj1epE0Ww8Nsy1ivHdRulRTH3ZMXQp5jH8P2wpU3gNT6G7mKu4zpyWembaniVaylVGKp2mmA/m7Zo7rp2SvVO8V4XhVuZnY02TznX3xtQzhTz3mNPJs3Q67DrnAuWePCFmpyrgEuv7dF4jsXSMHTssVpLtnb3/PszWvBz7EPZZXcp1Tqx1NsZtRxrq26AtC2C26mrqq8NRcEyBrr%2Br/m9IS51drErzlSYy45%2BtL6ePqMaflkbPnrBcY3MdmblW5thdq8ZhrZmmsbas5d69JzkvIPjeluDB2%2BvyYG%2B%2B3LlkztrAu3IPz13ptlP06Fp14X2WRZM0Rl7my4stfe1DqlYKOt/aXolXk1YR7/d6whoH4i2Gdm7L2PqltQeVCp22YhjjQrONcTIjaNc3yKxCSIVWAFW78c1Xilbmi1sXV6cz3c5UzZ1QZxAcdxo%2BruU6xL6TavUk1DsNIXgvA/HAEnHwXghwqzp2mLMHYxw0ThWUF5tYuxpj3FWJOLzlI9gFX2KgbYkh8RMj90IVwZxlj/xRFbtceRhCTAeMmhgHYsAcgsCrFERN9IjY5IMPYaxddPxU6ycPgoTI1ADRSpgOwITIBWJIBweBa9Tl1xiYgfiDix5hEooYywIqtEhAHhw8QCDeFLRAf4gJQ/5xkZ4bwiQ29Zy6FrOjAOKeBz6sAdkTR8jqNFFESQtUDmJDsJepJA1R5L7kOE7c9PXfsAXiZbf0Q9%2BSMP2EoRQSlahKdvgG/t93PSv5TriKdkAUHvKvfYMuDkBwVAHkHsJPeoFWDqWQLAMQMmUlR2NWL/ZwaiSuLiLhWuNsPqdAT5BgIQMATgaIbYEgc4bYKSUQLKWFTLF9Pqa%2BX/f5feAoYpQgBARICAqAmA60OAgXS9FSaqC%2BOTQOaqHg6A7g/gjkAXCnBeF8MmH/PuWFNg2pJ3Lg2A2Qm/U%2BEQ99RAk4BINsUleXViScTAq2TuVBLiFXHoS7FQ%2B%2BNQqw4FJYPQyFeqBuUhFuOwzjflNQpPA5VRB7dxOQJAowy4Ewh2c2dA8wheCAZwy8AxXqHwtuPwkYA%2BY7IIp5Tg6QyAqQrQ%2BAowMIlAvpUwz/WI6iBIlQJI2w3oXwxpNQ8xCuFwshWufQ4o4w/cSImuNAwcCoywzw6wmw5Q4IUZccQfKcAIp%2BJPBgNNKo8rSRaOeJGLDHZrNEKYrcbnF8PIlcDg6YaQ5PbQ5wbo5iBXa/CwrqRYhueJfsLiDsA2aSFJPbSxcYycYHE%2BJtWY95eYyBcWJYhfVbMDCzY7E4mqaIvom/LAv4642op4glTXEUSaN4nkVAPANYYQZACAgUeIwY3DWpf4lY2lUII4dkcpYqDSJYLYZUU2KIs4jAuIq44geJDsUg4qWQDQUg2o/qE6foGYEPEaZYb3XYA%2Bf3BSBKHEUEVgMPCU0Ag4FgWEcbLOUENEQgOgmxUICAFEtE40bRHkmocKJKSYaGfEbUSQPkRoOwShF4Z4aYVAOkFkD4PYRxQvHYFgOKB032YQNU1bBE5eCcKcLUtYJArEoQAgHE5ozhMpRk5YxrVYkkhUnwEqTSU%2BakiAAAWjTLKJiMhKtmjOanWB4FUnZM5NV3xnV3vk1NRPQB1J8HLItUaVeKnHmJd0xKJgFESHwHHAF3DN7XxOuI7CaOLAsF7E7LyAFwBIlyBN9XmKIlpLMJzMuOhKZPol4ACBiApDHPYFhLs3vUuTrNkwvzpwEkHHfBHCXg6IiJ0lNBmK2PliwD5x/DkM/0yhSInLMn5V6TcLcwMOQOMNKLnOfMqJhNqOon/J6PBNWFPIGOXNuMrV3JCCcNxKpmhmDwCVhC2Ef3Fmf3Pzlj8QCRnzf35z/BwvPnFgv3rgjLc2wHkV4Uu1SOL1qDbEsEmAUjwqQylMyGgIJEPy81kTXIlKaBOFpAhFnxIFIMmA5DSDwA5FT0ZGEFTyfFEAGBJA3Dr0vCcFDInFSm9MqBqEGD5nJUmA33tLJlBBBFEthApWcDpFDLwAyB73BGgNhDt0yFNPkqxBeGko3F9ncAUmrwyGABIE4MZHL2oJiDBFIL5iYthkIEmCrzqECuICyDVKXn8JkJTy2Cy3mMSBQrcDQpfA2MhVSTUJ4WVgllURfWytyrOHqBfBuzrMaNRNDKuEysqqQpbGqvypACaN%2BxLnSIKCHIEPYHKq2EHPVGHOnVGIugsoMUKEwWkxmveS/MF0GKbkPlMFvjKU7lQoQR7h7J2rmu60qEWpxSsOvDKRtCZKSGjiqw3CThvgEiThnxhMkFJ1GSWJ7NQUutMGerIHWuuuuNuIwSOtCBmrOt3H4Quq8oBr%2Bvushr3ETmcBhviVesaQ%2BpnOqhGm2HZHQAorqStm%2BphvzMxpIGxuIFxrkHuqtiev%2BKBsOplSXkDJbJDLDLfKaTRvap7E6tqvllbI0rDIJLrJBpCHBzNKrOuGxsUBxPlTh1mwsrqzoh3gbLlgYElutju0kwWngvlrKUVKmVXL4ACAMSVssQxJZuNqFsxzRAvTgoWqhF0T1oWSCFXPiNDLZq2VGQMgIA%2BFPhtstpCDNrbNDIto/Is29trOaQZoulFqZuEEyG9Fjy/DVosoq0fBToaS1v5VKqvEuCmB9q2D6Vomo0LuxyWD6U6X9vLteVUQ%2BFtpMlFrjq1DFrRIlqAVAUONCVlo1vSrkL4xNtGWzvKvDtPiLv9s20%2BwrX9qchrojuemkxjvFtVrboKIF1TvYQ7tXozpwUl0RJriXqluFk1u3tnTLJ1hqCbxbx711yxpxozmTVdPiHRKEGOEaHFGIALxYAIAHmiAlOEG/rvphAEn0oD0IOuGZDCpmGgIDxNLNOkoUAyBdxfsIBWHcDBAUuMpEvtqVKUN%2BFqEMppBNMmHlIAeweZEEskFoFgeIHgYOEimEGRCrGIDIlgVRF7zqCOGEEnHsraBmBYtQG9J1wmFQA7AxEUsFMSuCqqHvz9zpEmCoHxGiE/u/qqD/qGD6lCsr2rzYtksPnQAkBWB/pG3kbuvylb2iHoeZBvvJuetuRStwTrUB0DmDnlDgTjn63BvbCmFyURtMDPKZ3N0mCsbfhTpmgHhaDePlrkGcdDlcfLi8KRtvhzmKv6unEPxzonRIYw2iZyFiY8fYQ2pSM/jCaHjeoukQtuX1GrESraGrhfCCZseTTDnNXKeTSMGybDg7Dyf%2BtbhfEiYcJkxfQwYlgKp7tQfXT6VmqMX7qJQsyGbJl6c5pyqDzyp5pvLmbbAWeXLrosgYP62DjDlPnadieqgoRbGoTqnoQYEYScDabSAyA6atANgH2SDuZDhycVDkRAGzqUVnBUUyoiBOwskh3uXeXqZ1sWw1WmYNVmbSeGdfGuMpQnsFCWO2aXl2aB32bgUOdeZcfyFlhrlOaoQmpfx5yuZERuaideYediGeaOY%2Beoq%2BYUU8eUS23%2BeVj8Zwh82KzTTBawf1ohamczsaVEwvURci1RYfXJwYycapaxa2DpfDlaMJZn2JZIt6bJdEVkExbxZeHZhlBxZifpZosUVG1ED%2BZUjUQ5csmBeh3FFJpxoaY7WM0Fe3tDt9XnA5gVbqb1c5jZA5AgHWcuE2fjySyWPxe2P8UCXvOCUfOItkGWq/DpmXyIUDY4HhcovUWNZO2PzhOPtPylbEKIW1YKHlYNfecVZOfsEoRVZoTVdfA1Ypa1dlZ1Y9f1cClxeAFwO%2BdNfNaWEtZYNykKxhG5dBftesfBZRxdcnOFYs3I3wcSyPo13rrHeCb5eR0dsNsNuNqFcTVhfmd5vNtzZmd9T9sjvnpXcdaVI3YNpdvofdp3pCC9vzpUlPauT3Y2YPaDtZuo16XDolb3J1nRZlfbcNcVaytWppi8cQx8eTj6DTiMrROksLnZ3uZCYuEHjeN5c0ybZA/Lc6Yg88e8LqNQzWzUNTdPkiZw7lFA/w8bkg6I/sL6GKcnFKb3hSYssqYSpIBqeELliaEQ45CiBQ9EEvZICaYapSaw9acpdw4ea6YY8%2Bak4436cqCZuDK/e3ddbfbpDhaquWZquIBfHU/5oDffaDfTeWKFvgv4/wEE8HzBFQ7XZvEdozM0%2BncsWM%2BxKPehZPcGX/etYE%2BQ4c5E5Tpc7TNdsVp3c9vGjzsUF9r8/9s8%2BDu8/WzDtrqs%2Bkxs6Q6E%2BC9E/XfXU3Zdvvf5VTd6ZEEPZ/Ys1fa1sy8C5y/GDy/Y0qRvaNrvahf%2BSfbi4LoS5K7M7TcDpM5S6lzS9npq6VFPqmsyTP0LengVbcaBy6ecxg6tfg9vBxFZAP2QBvyubQ%2BY6nCy7s%2BE7y9udk9yYI/ycFEKaSb6rLnI62Eo7m7iepwU/otLD29Y8shaZhE48wGqd0LlmhFWA27cG27y/E%2BSdu7q/s4a4e7Lbk/O%2B6ZSJfAO6C5h6c9vSwiXkh1TXeUB8IIcE29B4naWSnb/xnd9VK4s%2BszBRRYy5Mkh0mxxTx%2BB62%2BsuO%2Bdd5na%2BG4p76%2BDcg1DeuP88HbGwK5xxKxqWZ4J5B7Z%2BJ/VVJ7STdbI39Xna20XelUy6He/XtTTUl8J5l6c459Fi572lneV5NQkxvTPZMl1%2Bl%2BSnZ4PGvedqNuK%2B0/SbK75q88q988MqF56XW6l9Z7t9C4K5a4i5d8sU6/i59/9sp4G896npG999wn9716D7Xaa/1qNrGosAmvXJz/D9GV6Vj8We5sM8/f5o7I3JQZXGL6ZIT3GqG9gyXht8D524N4d5D6CC7Wz9z6HIL%2BPeulFe6/ndXLz6sDp4slFpb6J/T8d4gB75HPGtuuiGn/15lsW2N4FXWOrsNrH6T9X7T9uQz%2BIHC4X%2BiD78359UH4o1H/TIv4n%2Bb5T9t7b/X%2BP7TKqTP7H/758%2Bv5V7LoDTTJ78H%2Bc6QZrzxACDUji5VFzjryf6t97e4rKLrChLzHBD4G9HQlXiEAYhz%2BjQY8F3k%2BBv0C8mANwAgFBBYhYQh%2BVPG0HsrM0iBdIKoOpzSbLADKEIclhCERTOAdKJvX1FmQ0DURa%2BKNQATwPYg08YSSfbyCwMRCP0SCZBdoJgFNIKQXAJwdUG0A8oYMzch%2BQCECGAYqogCoZHvB5SXBOlYQogO0s4CmDQgQ8kSAslgG%2BStBSCsg0wKaX8jUNAoiDeoMg1XpqFxiX7QCKPFAE6d92K9MZkf3JKlQqodMXsJEgsB0hIuWnSxEXzAF6dUKqza0LMVr775S%2B7vFmpXy7LsBTOAQj9mGzMrRDyIOBYAQB0m4IUUmCrL8JtCEJLAaWCQF5qdw%2Bb9MgORbOHnKxUg1Dxi%2BIebivgEjMFW0B/F/tJyo5vMHm88VuGtyB6VRr48NenKIOu4WRekIw47jJ2o54coOHAlIreSCbyEgKMFHoEN1DTtDZunQ/INixaFGhehIbLLEwTiRWsUe9XRzth0e5TCUi04KHsJzQSPCFhx5JYXjFSRF9vhuXWHtcPm6aDiOewldgcOgo3FjhXSU4dNyywKsrhmwsOLUKOh3DvGPQIYX0CU7fpxhHbSEdMKCa/DLgw4f4QOEBHaxreFmQkVkwuFgc4krcGEcQDJoU05McRWmoiPVwwp0kNQLIEQJIGl4jKdgCmmuVQAkDqC%2BwLKOIJpDSDhgamRvJgG2AgEOQ1YXELWhIDsgVBzIa%2BtDHq4ukEohcSYLriCFIY0QPISYLwA0C0BVI6gg%2BHuAAAs/HcxiCANAHwKUFdNck0HfoBIfg4kUELCHrzv0mAuAilBvDBAFB4w4VJUZIFOAYhtg8ogYJ3n9FEDTgZcDyhEFLSkFCCCY3gsQBMESiFK1UdoBTBcBuBMA9g%2Byj7iNJ8MLg79GRD3n3pTAdR0IVTEQxBCiF5hCNT4RAFEZJ5TQ2wclEcDhCHg28%2BwNoGCB7wmkn6d9JOkAmpL71SUN1PpNHF4ApJuS2CRsFWPcDERfAfyM4RCAeGUirWjdb0EzVXHLUDhUsTanuFuyPhbxDGKkf2OI4QI%2B6ywpeLRC6Cri1eNGI8a9D0BiAJAhyWQNASiB2obA9DGvHYGEBuc/k1USCUSPoYqJCoiQWgNSXoC8BSA/AUgC6O5KdZkJhcDDGhK2wYTeA2E0gLhPwkujSAjorXJUOkaD4hAOTLzON1SSwT3wHYLIEiJPylgUS48J0lMGEDsT6QHE4/J/AMheBFAv1U%2BLJIKr%2B8jAikkAK22aEYi4E1EDCbQC6CCUjcQgAxPpAaCJBeAek37ghLKE6wZJ0%2BNTFsFUmS8VJ3gb1guA0kTCtJVsHSV0CLBGTZoMcMyT5KskEjngEAMoFPjknRw/U9k2yasDCmFcAgsk36hOTWysTxJoknsKbgLqJTo45qQfP8HfB64u%2BfbLzKZK6BQVPYoafUnLDQCd4FURyPKWVMDRGA9cVEosj8H1wEx0knAZqKIC4CqROApAIQFwA0ADTUAXAc0C1zAasB3AugWgANIIDDTupzUU4CAFUgaBSAvUzgC6IGlDTOAI00gGNM4ADSGAIAdaQtL2ndTSAcAWAEgEMEqAyAFAHmI6XukoAfowANaetJtAJBHElAJoItNID8d7ASVLgHNNIDvB%2BafoIQK0H%2BlYA/Ev0FQDDOy6D4uK/0j8CcCGAcBOAoM%2BhlJH%2BkNw68i0nqc0BOmQBmo2iaHidM4CZkzA8wZAPFNoB%2BBJAaZP0PwGOnyl2AdAHqX1J2n/TDp74AABx7g0yrop0QUFUhdANAEs9aLgEIDPBZpHYWQFzCMF65%2BAtAY0PNMJnLTVp60zadtMGm8yuAx006aQHOkjS7im03gDzIukHTDZJszWaQCcpOIQALooAA%3D%3D)", 
            "subreddit": "cpp", 
            "title": "Custom zip_iterator implementation", 
            "url": "https://www.reddit.com/r/cpp/comments/732wfw/custom_zip_iterator_implementation/"
        }, 
        {
            "author": "Tyilo", 
            "created_utc": 1506630369.0, 
            "domain": "self.cpp", 
            "id": "732ubp", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 14, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/732ubp/why_isnt_cs_stdregex_search_worstcase_time_linear/", 
            "score": 5, 
            "selftext": "It seems stupid for a language focused on speed.\nFor patological cases spawning grep in a new process and using that for regex matching is faster than using gcc's implementation of std::regex.", 
            "subreddit": "cpp", 
            "title": "Why isn't C++'s std::regex search worst-case time linear?", 
            "url": "https://www.reddit.com/r/cpp/comments/732ubp/why_isnt_cs_stdregex_search_worstcase_time_linear/"
        }, 
        {
            "author": "kosenko", 
            "created_utc": 1506621783.0, 
            "domain": "groups.google.com", 
            "id": "731voz", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 70, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/731voz/ann_boostui_a_new_c_gui_library/", 
            "score": 117, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "[ANN] Boost.UI - a new C++ GUI library", 
            "url": "https://groups.google.com/forum/#!topic/boost-developers-archive/_aEmJlslb7M"
        }, 
        {
            "author": "geek_007", 
            "created_utc": 1506618525.0, 
            "domain": "techiedelight.com", 
            "id": "731i68", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/731i68/data_structures_and_algorithms_problems_in_cc/", 
            "score": 6, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Data Structures and Algorithms Problems in C/C++", 
            "url": "http://www.techiedelight.com/list-of-problems/"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1506614133.0, 
            "domain": "youtube.com", 
            "id": "73108j", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/tISy7EJQPzI?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/tISy7EJQPzI/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Titus Winters \u201cC++ as a \"Live at Head\" Language\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73108j/cppcon_2017_titus_winters_c_as_a_live_at_head/", 
            "score": 38, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Titus Winters \u201cC++ as a \"Live at Head\" Language\u201d", 
            "url": "https://www.youtube.com/watch?v=tISy7EJQPzI"
        }, 
        {
            "author": "SamuelDavi", 
            "created_utc": 1506607660.0, 
            "domain": "self.cpp", 
            "id": "730aus", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/730aus/what_is_your_favorite_unittest_runner_in_linux/", 
            "score": 26, 
            "selftext": "I'm starting a project on Linux and I want a good unit-test runner. We're using Ubuntu and CentOS mainly.\nIf you could elaborate on why they were better for you that would be great.", 
            "subreddit": "cpp", 
            "title": "What is your favorite unit-test runner in Linux for C++? Why is it better than other runners?", 
            "url": "https://www.reddit.com/r/cpp/comments/730aus/what_is_your_favorite_unittest_runner_in_linux/"
        }, 
        {
            "author": "syaghmour", 
            "created_utc": 1506550640.0, 
            "domain": "github.com", 
            "id": "72vs7z", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72vs7z/cppcon_2017_presentation_materials/", 
            "score": 82, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Presentation Materials", 
            "url": "https://github.com/CppCon/CppCon2017"
        }, 
        {
            "author": "marearts", 
            "created_utc": 1506544430.0, 
            "domain": "study.marearts.com", 
            "id": "72v45g", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72v45g/tip_add_vector_b_to_end_of_vector_a/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Tip, Add 'Vector (b)' to end of 'Vector (a)'", 
            "url": "http://study.marearts.com/2017/09/tip-add-vector-b-to-end-of-vector-a.html"
        }, 
        {
            "author": "lefticus", 
            "created_utc": 1506535225.0, 
            "domain": "youtube.com", 
            "id": "72u21t", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Jason Turner", 
                    "author_url": "https://www.youtube.com/user/lefticus1", 
                    "description": "Support these videos: https://www.patreon.com/lefticus Learning C++ Best Practices: http://shop.oreilly.com/product/0636920049814.do Inheritance and Polymorphism with C++: http://shop.oreilly.com/product/0636920052166.do Follow me on twitter: https://twitter.com/lefticus Source:", 
                    "height": 338, 
                    "html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FZlMbqFcJEzA%3Ffeature%3Doembed&url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DZlMbqFcJEzA&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FZlMbqFcJEzA%2Fhqdefault.jpg&key=522baf40bd3911e08d854040d3dc5c07&type=text%2Fhtml&schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/ZlMbqFcJEzA/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "C++ Weekly - Ep 82 - Intro To CTest", 
                    "type": "video", 
                    "url": "http://www.youtube.com/watch?v=ZlMbqFcJEzA", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72u21t/c_weekly_ep_82_intro_to_ctest/", 
            "score": 26, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++ Weekly - Ep 82 - Intro To CTest", 
            "url": "https://www.youtube.com/attribution_link?a=4-eUB4ciNLA&u=%2Fwatch%3Fv%3DZlMbqFcJEzA%26feature%3Dshare"
        }, 
        {
            "author": "DiB78", 
            "created_utc": 1506477128.0, 
            "domain": "self.cpp", 
            "id": "72p6d2", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72p6d2/c_microbenchmarking_at_cppcon2017/", 
            "score": 22, 
            "selftext": "I will be giving a talk at CPPCon 2017 on micro-benchmarking C++ code with the Celero library.  The talk will be held on Friday at 0900.  There will be a good bit of discussion on micro-benchmarks independent of the library you may choose to use.  Stop by and listen to some benchmarking goodness while sipping on your morning coffee!", 
            "subreddit": "cpp", 
            "title": "C++ Micro-benchmarking at CPPCon2017", 
            "url": "https://www.reddit.com/r/cpp/comments/72p6d2/c_microbenchmarking_at_cppcon2017/"
        }, 
        {
            "author": "syaghmour", 
            "created_utc": 1506466071.0, 
            "domain": "youtube.com", 
            "id": "72o44u", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/fX2W3nNjJIo?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/fX2W3nNjJIo/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Bjarne Stroustrup \u201cLearning and Teaching Modern C++\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 50, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72o44u/cppcon_2017_bjarne_stroustrup_learning_and/", 
            "score": 196, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Bjarne Stroustrup \u201cLearning and Teaching Modern C++\u201d", 
            "url": "https://www.youtube.com/watch?v=fX2W3nNjJIo"
        }, 
        {
            "author": "moarthenfeeling", 
            "created_utc": 1506457503.0, 
            "domain": "eliasdaler.github.io", 
            "id": "72n6bf", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72n6bf/how_my_little_c_metaserialization_library_works/", 
            "score": 66, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "How my little C++ meta-serialization library works and how I wrote it", 
            "url": "https://eliasdaler.github.io/meta-stuff/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506451750.0, 
            "domain": "github.com", 
            "id": "72mi7o", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72mi7o/abseil_c_common_libraries/", 
            "score": 14, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Abseil - C++ Common Libraries", 
            "url": "https://github.com/abseil/abseil-cpp"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1506448239.0, 
            "domain": "opensource.googleblog.com", 
            "id": "72m3e3", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 64, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72m3e3/introducing_abseil_a_new_common_libraries_project/", 
            "score": 68, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Introducing Abseil, a new common libraries project", 
            "url": "https://opensource.googleblog.com/2017/09/introducing-abseil-new-common-libraries.html"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506436796.0, 
            "domain": "ithare.com", 
            "id": "72krvy", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72krvy/a_chance_to_get_readable_formatting_fmt/", 
            "score": 34, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "A Chance to Get Readable Formatting: {fmt}", 
            "url": "http://ithare.com/cppcon2017-day-1-hope-to-get-something-better-than-chevrone-hell/"
        }, 
        {
            "author": "joebaf", 
            "created_utc": 1506433015.0, 
            "domain": "self.cpp", 
            "id": "72kdkw", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72kdkw/the_expressive_c17_coding_challenge_together_with/", 
            "score": 5, 
            "selftext": "The Expressive C++17 Coding Challenge\n\nat [Bartek's coding blog](http://www.bfilipek.com/2017/09/the-expressive-cpp17-challenge.html)\nand [Fluent C++](https://www.fluentcpp.com/2017/09/25/expressive-cpp17-coding-challenge/)", 
            "subreddit": "cpp", 
            "title": "The Expressive C++17 Coding Challenge (together with Fluent C++!)", 
            "url": "https://www.reddit.com/r/cpp/comments/72kdkw/the_expressive_c17_coding_challenge_together_with/"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1506424261.0, 
            "domain": "lewissbaker.github.io", 
            "id": "72jmny", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72jmny/coroutine_theory_differences_between_functions/", 
            "score": 37, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Coroutine Theory: differences between functions and coroutines", 
            "url": "https://lewissbaker.github.io/2017/09/25/coroutine-theory"
        }, 
        {
            "author": "tallassrob", 
            "created_utc": 1506387727.0, 
            "domain": "cs.columbia.edu", 
            "id": "72gxkw", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 23, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72gxkw/bjarne_stroustrup_awarded_2017_faraday_medal/", 
            "score": 307, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Bjarne Stroustrup awarded 2017 Faraday Medal", 
            "url": "https://www.cs.columbia.edu/2017/bjarne-stroustrup-awarded-2017-faraday-medal/"
        }, 
        {
            "author": "parazight", 
            "created_utc": 1506366494.0, 
            "domain": "jandeinhard.de", 
            "id": "72eor4", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 43, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72eor4/how_to_use_cmake/", 
            "score": 13, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "How to use CMake", 
            "url": "http://www.jandeinhard.de/2017/09/24/cmake-basics.html"
        }, 
        {
            "author": "terminal_object", 
            "created_utc": 1506352739.0, 
            "domain": "self.cpp", 
            "id": "72d3do", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 69, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72d3do/how_did_you_get_your_first_c_job/", 
            "score": 28, 
            "selftext": "Hello everyone. I have a background in mathematics and I recently graduated from a software bootcamp in London. However, I found that I would prefer to get an entry level job in c++ rather than the easier to get javascript stack jobs. Sadly, most jobs I can apply to here in London go through recruiters who start ignoring me as soon as I mention that I don't have previous commercial experience in c++. So it looks like I need experience in c++ in order to make experience in c++. Does any of you know how to break this vicious circle? ", 
            "subreddit": "cpp", 
            "title": "How did you get your first c++ job", 
            "url": "https://www.reddit.com/r/cpp/comments/72d3do/how_did_you_get_your_first_c_job/"
        }, 
        {
            "author": "ado6789", 
            "created_utc": 1506352276.0, 
            "domain": "codinglio.com", 
            "id": "72d1i8", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72d1i8/selection_insertion_bubble_and_heap_sort_in_c/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Selection, Insertion, Bubble and Heap Sort in C++", 
            "url": "http://codinglio.com/sorting-c-plus-plus/"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1506350865.0, 
            "domain": "github.com", 
            "id": "72cvx6", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72cvx6/cutter_a_qt_and_c_gui_for_radare2_reverse/", 
            "score": 39, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "cutter - A Qt and C++ GUI for radare2 reverse engineering framework", 
            "url": "https://github.com/radareorg/cutter"
        }, 
        {
            "author": "notbatmanyet", 
            "created_utc": 1506345887.0, 
            "domain": "self.cpp", 
            "id": "72ce4y", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72ce4y/testing_compiletime_checks/", 
            "score": 20, 
            "selftext": "C++ has moved towards doing more correctness checks at compile time, which is good. But it does introduce the problem of testing them, as your regular unit tests need to build. There are some hacky methods to test static asserts (by #defining them as something that does the assert check at runtime instead) but it does not work in every case and does not handle checks that are jpnot not done by static asserts.\n\nSo I'm wondering what tools/methods are available to make sure that your compile time checks really do prevent the client programmer from doing certain types of errors?  The obvious approach is to simply try to compile files that violate these checks and make sure that they don't compile, but how do you robustly make sure that that they fail to compile for the correct reason and not due to some other error? Even across different compilers? ", 
            "subreddit": "cpp", 
            "title": "Testing compile-time checks", 
            "url": "https://www.reddit.com/r/cpp/comments/72ce4y/testing_compiletime_checks/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506298527.0, 
            "domain": "github.com", 
            "id": "728xfs", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 31, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/728xfs/orbit_cc_performance_profiler/", 
            "score": 76, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Orbit: C/C++ Performance Profiler", 
            "url": "https://github.com/pierricgimmig/orbitprofiler"
        }, 
        {
            "author": "david-grs", 
            "created_utc": 1506287067.0, 
            "domain": "david-grs.github.io", 
            "id": "727sgr", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/727sgr/inplace_containers_for_fun_and_profit/", 
            "score": 33, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "In-place containers for fun and profit", 
            "url": "http://david-grs.github.io/inplace_containers_for_fun_and_profit/"
        }, 
        {
            "author": "parazight", 
            "created_utc": 1506280588.0, 
            "domain": "jandeinhard.de", 
            "id": "72739x", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72739x/try_c17_with_docker/", 
            "score": 36, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Try C++17 with Docker", 
            "url": "http://www.jandeinhard.de/2017/09/15/cpp-and-docker.html"
        }, 
        {
            "author": "Nicksaurus", 
            "created_utc": 1506277150.0, 
            "domain": "self.cpp", 
            "id": "726qaw", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 76, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/726qaw/i_just_fell_for_the_oldest_bug_in_the_book/", 
            "score": 0, 
            "selftext": "\tint vArraySizes, uvArraySize = 0;\n\n\tfor (int i = 0; i < polys.size(); i++)\n\t{\n\t\tvArraySizes += polys[i]->Triangles.size() * 9;\n\t\tuvArraySize += polys[i]->Triangles.size() * 6;\n\t}\n\nIt should be easy to spot.", 
            "subreddit": "cpp", 
            "title": "I just fell for the oldest bug in the book", 
            "url": "https://www.reddit.com/r/cpp/comments/726qaw/i_just_fell_for_the_oldest_bug_in_the_book/"
        }, 
        {
            "author": "UndividableCarnivore", 
            "created_utc": 1506273779.0, 
            "domain": "kristerw.blogspot.in", 
            "id": "726dkj", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/726dkj/why_undefined_behavior_may_call_a_nevercalled/", 
            "score": 2, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Why undefined behavior may call a never-called function", 
            "url": "https://kristerw.blogspot.in/2017/09/why-undefined-behavior-may-call-never.html"
        }, 
        {
            "author": "Z01dbrg", 
            "created_utc": 1506270227.0, 
            "domain": "godbolt.org", 
            "id": "725ztk", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/725ztk/importance_of_good_error_messagesswitch_to_clang/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Importance of good error messages(switch to clang to see nice error, switch to VS to see it compile :) )", 
            "url": "https://godbolt.org/g/kjxvxC"
        }, 
        {
            "author": "crispweed", 
            "created_utc": 1506173106.0, 
            "domain": "upcoder.com", 
            "id": "71y8xu", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/71y8xu/static_libs_do_not_modular_make/", 
            "score": 1, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Static libs do not modular make", 
            "url": "http://upcoder.com/18/static-libs-do-not-modular-make"
        }, 
        {
            "author": "xtools-at", 
            "created_utc": 1506162718.0, 
            "domain": "reddit.com", 
            "id": "71xk1k", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/71xk1k/learn_c_by_real_world_projects_xpostquestion_rcpp/", 
            "score": 59, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Learn C++ by real world projects [x-post/question r/cpp_questions]", 
            "url": "https://www.reddit.com/r/cpp_questions/comments/71xiqz"
        }, 
        {
            "author": "NelSonSixThirty", 
            "created_utc": 1506152358.0, 
            "domain": "self.cpp", 
            "id": "71wzzf", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/71wzzf/should_auto_type_deduction_differ_from_template/", 
            "score": 0, 
            "selftext": "This week I've encountered an interesting language feature, which evolved into annoying bug in my code. \n\n\nLet's assume that we use some sort of encapsulation:\n\n`\n    struct Foo{\n      Bar bar;\n      Bar& GetBar(){\n        return bar;\n      }\n    };\n`\n\nAnd we have some code, that modifies the bar contents:\n\n`\n    void SomeMethod(){\n      foo.GetBar().ModifyBar(some_value);\n    }\n`\n\nIf bar is modified several times, it is a good idea to create temporary reference and address it directly:\n\n\n`\n    void SomeMethod(){\n      auto tmp_bar = foo.GetBar();\n      tmp_bar.ModifyBar(some_value);\n      tmp_bar.ModifySomeMore(42);\n    }\n`\n\nI've asked my colleagues, what they expect this code to do and most of them (me as well) failed to answer correctly. No matter that `GetBar()` method returns a reference to Bar object, auto deduced `tmp_bar` as a Bar object. With that in mind, bar is being copied to tmp_bar and the encapsulated object is never changed. \n\nThis problem is solved by simply adding the `&` to the creation of the `tmp_bar`.\n\nSo I'm quite puzzled, why `auto` can't deduce the reference  from method return type?", 
            "subreddit": "cpp", 
            "title": "Should auto type deduction differ from template one?", 
            "url": "https://www.reddit.com/r/cpp/comments/71wzzf/should_auto_type_deduction_differ_from_template/"
        }, 
        {
            "author": "render787", 
            "created_utc": 1506101128.0, 
            "domain": "chrisbeck.co", 
            "id": "71sieb", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/71sieb/slides_from_a_talk_i_gave_about_variants_and_my/", 
            "score": 27, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Slides from a talk I gave about variants, and my variant implementation", 
            "url": "http://chrisbeck.co/strict_variant.pptx"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506066920.0, 
            "domain": "fluentcpp.com", 
            "id": "71pk99", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 56, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/71pk99/how_to_implement_the_pimpl_idiom_by_using_unique/", 
            "score": 22, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "How to implement the pimpl idiom by using unique_ptr", 
            "url": "https://www.fluentcpp.com/2017/09/22/make-pimpl-using-unique_ptr/"
        }, 
        {
            "author": "stanislavb", 
            "created_utc": 1506056521.0, 
            "domain": "cpp.libhunt.com", 
            "id": "71ovh1", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/71ovh1/awesome_c_weekly_issue_67/", 
            "score": 39, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Awesome C++ Weekly - Issue 67", 
            "url": "https://cpp.libhunt.com/newsletter/67"
        }, 
        {
            "author": "tallassrob", 
            "created_utc": 1506047357.0, 
            "domain": "cppcast.com", 
            "id": "71o4it", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/71o4it/cppcast_c_and_il2cpp_with_josh_peterson/", 
            "score": 20, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCast: C# and IL2CPP with Josh Peterson", 
            "url": "http://cppcast.com/2017/09/josh-peterson/"
        }, 
        {
            "author": "Z01dbrg", 
            "created_utc": 1506016542.0, 
            "domain": "godbolt.org", 
            "id": "71kx4m", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/71kx4m/is_this_language_defect_limitation_or_feature/", 
            "score": 19, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Is this language defect, limitation or feature?", 
            "url": "https://godbolt.org/g/U3tBPJ"
        }, 
        {
            "author": "Teemperor", 
            "created_utc": 1505890870.0, 
            "domain": "blog.llvm.org", 
            "id": "719dvn", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 28, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/719dvn/clang_bash_better_auto_completion_is_coming_to/", 
            "score": 138, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Clang \u2665 bash -- better auto completion is coming to bash", 
            "url": "http://blog.llvm.org/2017/09/clang-bash-better-auto-completion-is.html"
        }, 
        {
            "author": "orbital_sfear", 
            "created_utc": 1505878127.0, 
            "domain": "self.cpp", 
            "id": "718fbx", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 132, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/718fbx/the_c_coding_experience_is_bipolar_lets_talk/", 
            "score": 10, 
            "selftext": "C++ has come a long way since the late 1990\u2019s.  The transition hasn\u2019t been smooth, and young programming languages have made huge strides in the minds of new programmers.  \n  The biggest issue facing C++ is new programmers aren\u2019t seeking it out and the schools aren\u2019t teaching it by default.  C++ is being avoided, and honestly it probably should be.  When learning how to code, understand segfaults and fighting dragons is unacceptable.\n  C++ has become clunky and cumbersome to work with.  Complexity has increased with recent changes.  The only usable STL is boost or QT and the learning curve for either is large.  Relevant up to date information is difficult to find, and the language still allows the user to easily do unsafe things with memory.  The result is annoying crashes, constantly being forced to lookup documentation, confusion, frustration, and eventually seeking out other language solutions.  \n\nThe bottom line is this, if C++ doesn\u2019t get with the times in the next 5 years, young programmers should learn Go/rust and skip C++.  This statement kills me because I love C++\n\nThere are a few core issues causing this:\n\n* An unwillingness to break legacy code\n* Overly complex syntax\n* Unsafe memory manipulation\n* Clunky STL\n\n**Why should we care about C++ in 2017?**\n\nC++ in the late 90\u2019s was the best language.  At the time, it provided wonderful control with unmatched syntax.  No on considered memory safe languages to be a requirement, life was good.  In the last 20 years computer scientist have learned a lot about libraries that lend themselves to writing faster and safer code.  New players in the language wars have showed a different take on memory management.  Ruby/python taught us how flexible languages can be.  Javascript taught us how forgiving code can be.  Rust taught us memory allocation can be safe and monitored by the compiler.  The list of functional languages have taught us new ways to think about state.\n  Today C++ isn\u2019t the best language, there are many others which can do all the things C++ does, and in many ways, they do it better.  So why do I care?  Why should we care?  We should care because C++ provides the performance tuning nobs that most languages hide.  We should  care because C++ is for elite programmers that are pushing the bounds of current hardware.  We should care because C++ isn\u2019t full of annoying annotations or vendor/platform lock-in.  We should care because C++ is powerful.  \n  C++ is worth fighting for, below are the glaring issues I see.\n\n**Breaking old code compatibility IS okay**\n\n\u201cChanges that don\u2019t break compatibility with existing code\u201d is well intentioned and incorrect.  Code written using C++17 or older standards is welcome to continue doing so.  New code written using new standards can leverage updated behavior from existing key words.\n  Which is worse, upset the coder with expectations that 20 year old code acts exactly the same with the newest compiler flags?  Or is it worse to have droves of 20 year old programmers choose a more modern language for their new project?\n\n**Header files**\n\nCompilers have come a long way in the last 20 years.  Requiring the user to write header files by hand is antiquated.  There are almost no cases that should require custom written headers.  The compiler should auto generate header files for each cpp file on the fly.  Perhaps a new pre processor keyword needs to be created? #import \u201cxxx.cpp\u201d which causes the header file to be generated?\n\tWith this new pre-processor, please also provide a way to explicitly state which items to include from the remote file.  #import \u201cxxxx.cpp\u201d with foo, bar, Klass.  This would include function foo, bar, and class Klass.\n\n**Overly complex or long winded syntax**\n\nNo one likes auto.  Var/let are well established, and don\u2019t require the extra typing, pick one of those two and move on.  I prefer var over let because I can type var with just my left hand, it feels better.\n\tC++\u2019s lambda\u2019s are great, but they are way too much typing.  By default (x) \u2192 { code; } should translate to [=](var x) \u2192 var { a thing }.  Function pointers need a nicer syntax to pass themselves around.  I\u2019m not sure what is, but std:func<> isn\u2019t right.\n\tTemplate syntax should be reduced to <T> added to the function or class.  Users just want to write:  class Dog<T> {}; or Dog<T> \u2192 int () one time and then use T inside that class/function.\n\n**Revamp of memory allocation syntax**\n\nGarbage collection is a hack, its horrible, its slow, we don\u2019t want it. \n\tI love stack allocation.  I love scoped heap allocation.  I love scoped heap allocation that can transfer its ownership to another scope.  I love shared pointers.  In C++x11 and above, only stack allocation is a first class citizen, and all methods listed contain dragons.\n\tThe \u201cnew\u201d keyword needs to replace unique_ptr.  When new is called, a scoped based unique_ptr should be created.  No more make_unique<T>(xx), just var dog = new Dog();\n\tIf a unique pointer is passed to a function, the life-cycle of that pointer cannot extend the function class.  \n\tIf a unique pointer is passed to a function and the life-cycle IS extended, then that pointer\u2019s scope is extended to the scope of that new life-cycle.  Perhaps there is some syntax required in the function\u2019s parameters to make this rust like borrow behavior clearly stated?\n\tPointer syntax is great, but its not safe.  I want to use pointers, but the compiler needs to monitor my usage and ensure the pointer is treated safely.\n\tshared_ptr needs its own keyword.  Perhaps \u201cshared\u201d which will create shared pointers.  Var dog = shared Dog();  When shared pointers are used in functions, their reference count should be pinned to the lifecycle of the function they are used to avoid possible premature cleanup.  Herb Sutter has a wonderful video covering a work around for this \u201cpinning\u201d behavior.\n\tDelete keyword should be deprecated, it would have the same effective behavior as assigning nullptr; to the pointer.\n\n**Stack safe destructors**\n\nMemory deconstruction shouldn\u2019t happen through stack allocated function calls.  As many of you know, using unique_ptr in a nested tree structure class can easily cause \u201crandom\u201d crashing when your destructors chain together and overflow the stack buffer.  Herb Sutter has a wonderful video on this behavior.  \n\tThe compiler needs to come up with a different system for handling destructors that is heap based allocation and unable to crash in any reasonable programming situation.  Perhaps tail recursion?  Whatever the solution is, slay the dragons\n\n**co-routines (yield) and a proper foreach**\n\nBegin()/End() are very clunky to use and are not standard among other programming languages these days.  The industry has decided co-routines are the preferable method to handle foreach iterators.  Simply put, a \u201cyield\u201d like keyword, and a foreach ( var x : co-routine ) to handle it would go a long way.\n\tPython nailed this behavior.  The yield/for interaction are exactly the correct model C++ needs.\n\n**Named and variable length parameters**\n\nIn some cases, named parameters make reading code much more verbose.  There are also times when parameter order doesn\u2019t matter as much as name grouping:\naction(slope=0.5,offset=2,foo=9) \n\tis much easier to read and understand over:\naction( 0.5, 2, 9 );\n\tIn addition to named parameters, capturing variable length parameter lists and a hash of named parameters allows the coder a lot of flexibility.  Python nails this behavior.  Anyone that has written frameworks, especially web based frameworks knows this type of behavior is invaluable.\n\tWhen naming parameters, OR DOESN\u2019T MATTER!  The compiler is welcome to reorder my parameters for me.\nNamed class member initialization\nWhen allocating classes, there isn\u2019t a great way to assign member values, without extra typing by the user.\nVar dog = new Dog () {\n\tage: 17,\n\tcolor: \u201cyellow\u201d\n};\nMaking the class initialization compatibility with Json format, and allowing the implementation to be extendable through operatorXX is ideal.  \nOrder of named variables doesn\u2019t matter.  The compiler should reorder as needed.\n\n**Dictionaries as first class citizens**\n\nJson rules the world.  C++ should support the json format of data, which is stored into a dictionary.\n\n**Safe arrays as first class citizens**\n\nAllow the user two types of array allocation, stack and heap allocation.  Stack allocation should work with variable length one time initialization (does not require a compile time constant).  Many compilers already do this (g++), all of them should.  Arrays is C++ should be safe by providing bounds checking and all the typical helper functions.\n\tWhen a user creates an array, it should be a STL class, not pointer math.  Stack and heap arrays should have feature parity with each other.  Arrays should provide all the functionality a vector does, except dynamically changing sizes.\nStrings, localization, and formats as first class citizens\nVar x = \u201csomething great\u201d; should create a string class.  Char arrays are accent, the default behavior shouldn\u2019t be char arrays, their interaction should be the expection.\nI should be able to set string values in class member:\nclass Dog\n{\n\tvar Name = \u201cWoofy\u201d;\n};\n\tSwitch statements also need to support strings natively.  The user should find it easy to deal with string literals.\n\tBuilt in string localization should be a standard feature of the compiler.  When I write var name = \u201cdog\u201d, the compiler should auto gen a keyword lookup file.  I can then go through and specify all the different languages I want to support, and when selected by the STL, those keywords instances of \u201cdog\u201d will be replaced with the localized word.\n\tBuilt in string formats.  Cout is great, printf is greater, what about general string construction????  Allowing the user to write var str = \u201c%d Bananas\u201d << (5) is really handy.  Allowing the user to write var str = \u201cRun \u201c << 5 << \u201c times\u201d; is also very handy.\n\n**Enums revamp**\n\nWhen dealing with enums, the type name should be included to give context to the reader.  Reading code that says var x = COUNT is much more ambiguous than var x = Apples.COUNT;  \n\tEnums should easily be convertible into a string and from an int back into the enum.  Nothing is worse than writing a switch statement of enumeration values to output nice string names.\nVar e = EnumVal.VALUE;\n(string)e; // Return \u201cVALUE\u201d\n(int)e; //Return 6?\n\n**Keep C style overload syntax with updated modern behavior**\n\nProgrammers enjoy C-Style syntax casts var x = (int)a;  Don\u2019t get rid of them.  Allow this syntax to play nice and have compiler checks.  If that is impossible, then have the new style double { x } be more aggressive and work the way a coder would want.\n\tC++ cast syntax of dynamic_cast<XXX>(x) is way too much typing.\n\n**Compile time reflections and meta classes**. *sorry for saying run time, I meant compile time.  Run time reflections make no sense with a language like cpp, sorry*\n\nC++ needs to provide detailed reflections.  The user should be able to iterate through parameters of classes, get names of functions etc.  The user should also be able to get values of parameters in classes, or even set values through reflects.\n\tMeta classes are needed, not sure what else to say there.\n\tClass initialization through a string name also needs to be implemented.  Initialize.Create<BaseClass>(\u201cMyClass\u201d) where MyClass extends BaseClass.\n\tHopefully it would go without saying, the syntax to accomplish this needs to be brief.  The compiler should create this info at compile time.\n\n**Friendly tuples**\n\nI know C++ has tuples now, but their implementation is cumbersome.  Tuples should be created by syntax akin to:\nvar tup = (1,2,4,5)\nAccessing those tuples:\nvar a = tup[0];\nTuples should have feature parity with arrays, except for being immutable.\n\n**Function decorators**\n\nProvide a way to attach symbols to the reflection system which can be accessed during run-time.  \n\tAllow the user a way to pass the calling function and its parameters into a user defined function, where any action can be taken.  Wrapper function decorators are extremely helpful when writing frameworks.  Anyone that has written framework libraries using python know the behavior I\u2019m talking about.\n\n**Primitive helpers**\n\nPay to play programming is awesome.  Provide helper primitive function calls like 1.toString();  They read nice and provide a wonderful feel to the language.  When implemented correctly, such a call could compile down to itoa(1);\n\n**Common names for similar STLv2 actions**\n\nProvide common names for all similar actions inside the STL.  If dictionaries, arrays, and vectors all provide a \u201csearch\u201d functionality, ensure it is called search or find in all different implements.\n\n**Functional STL, none or extremely rare use of try catch**\n\nThe new STL should hopefully never throw exceptions.  Return values can contain error information, requiring a user to wrap try/catch around the basic STL logic makes for ugly hard to trace code.\nDeep STLv2 that plays nice together\n\n* Array stack allocated\n* Array heap allocated\n* Vector\n* Friendly tuples\n* Dictionaries (Json)\n* String\n* Stack\n* Queue\n* File\n* Memcache\n* Sort\n* Regex\n* Random\n* MD5/Sha256\n* Tcp\n* Http/Https\n* Mutexs\n* Guids\n\nThere are many many more features the STLv2 needs to provide but here is an example.  The user should feel that whatever data interaction is required, there is an easy to use library that\u2019ll provide that functionality and do so with common names so they can guess how to use it without constantly looking up documentation.  \n\tThe libraries need to smoothly work together, it should be trivial to convert data from one data structure into another.\n\n**Community owned package manager**\n\nPython has pip, ruby has gems, javascript has node, rust has cargo.  C++ needs a well managed, community ran system for exchanging code.\n\n**Community owned ORM and web framework**\n\nThe young kids play in the web.  After all these changes are made, the C++ community needs a well designed ORM, code first migrations, and Restful web framework.  The framework needs to lend itself well to working with Angular/React web calls.  The web framework also needs to provide a fantastic admin interface into the database that is extremely extendable.  Think rails or django.\n\n**Slay the dragons!**\n\nThe user should find it difficult to crash a C++ program.  The language shouldn\u2019t be full of pitfalls, it should be a safe and joyful to use.\n\n**What can we do?**\n\nAs a community we need to do one of two things:\n    1. Speak out and be heard.  Provide solutions, contribute and get the C++ we need.\n    2. Speak out and be ignored, learn rust/go and continue our work.", 
            "subreddit": "cpp", 
            "title": "The C++ coding experience is bi-polar, lets talk about it", 
            "url": "https://www.reddit.com/r/cpp/comments/718fbx/the_c_coding_experience_is_bipolar_lets_talk/"
        }, 
        {
            "author": "akditer", 
            "created_utc": 1505859199.0, 
            "domain": "github.com", 
            "id": "716l86", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/716l86/stringify_header_only_library_to_print_stl/", 
            "score": 2, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Stringify: header only library to print STL containers", 
            "url": "https://github.com/asit-dhal/stringify"
        }, 
        {
            "author": "gtano", 
            "created_utc": 1505832633.0, 
            "domain": "medium.com", 
            "id": "713gsv", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 16, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/713gsv/experimenting_with_small_buffer_optimization_for/", 
            "score": 12, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Experimenting with Small Buffer Optimization for C++ Lambdas - buckaroo.pm", 
            "url": "https://medium.com/@buckaroo.pm/experimenting-with-small-buffer-optimization-for-c-lambdas-d5b703fb47e4"
        }, 
        {
            "author": "RockinRoel", 
            "created_utc": 1505829588.0, 
            "domain": "webtoolkit.eu", 
            "id": "71356e", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 43, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/71356e/wt_4_c_web_toolkit_has_been_released/", 
            "score": 72, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Wt 4 (C++ web toolkit) has been released!", 
            "url": "https://www.webtoolkit.eu/wt/news/2017/09/19/wt_4_0_0_is_here_"
        }, 
        {
            "author": "JakobCorvinus", 
            "created_utc": 1505823992.0, 
            "domain": "self.cpp", 
            "id": "712mbh", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/712mbh/variadic_templates_and_templated_base_class/", 
            "score": 3, 
            "selftext": "Hello,\n\nI do have a question regarding the validity of the following piece of code.\nClang accepts it while gcc complains (see [godbolt](https://godbolt.org/g/Q2keQ7)).\n\nDoes anyone have an idea why gcc might find the call to foo problematic?\ngcc complains about an ambiguous base class.\n\nIt works if I explicitly cast derived to base<Ts...> for the call.\n\n    template <typename... Ts>\n    struct base {};\n\n    // Build class recursive\n    template <typename F, typename... Ts>\n    struct base<F, Ts...> : F, base<Ts...> {};\n\n    template <typename T, typename... Ts>\n    struct derived : base<Ts...> {};\n\n    struct test {\n\ttemplate <typename T, typename... Ts>\n\ttest(derived<T, Ts...> d) {\n\t\tfoo<Ts...>(d); // this call fails. Works with gcc if d is cast to base<Ts...> first.\n\t}\n\n\ttemplate <typename... Ts>\n\tvoid foo(base<Ts...> b) {}\n    };\n\n    struct Foo {};\n    struct Bar {};\n\n    int main() {\n\tderived<bool, Foo> d;\n\ttest t(d);\n    }", 
            "subreddit": "cpp", 
            "title": "Variadic templates and templated base class", 
            "url": "https://www.reddit.com/r/cpp/comments/712mbh/variadic_templates_and_templated_base_class/"
        }, 
        {
            "author": "joboccara", 
            "created_utc": 1505811234.0, 
            "domain": "fluentcpp.com", 
            "id": "711p6z", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/711p6z/start_your_daily_c_to_spread_c_best_practices/", 
            "score": 31, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Start your \"Daily C++\" to spread C++ best practices", 
            "url": "https://www.fluentcpp.com/dailycpp/"
        }, 
        {
            "author": "rohshall", 
            "created_utc": 1505795045.0, 
            "domain": "shaharmike.com", 
            "id": "710ljx", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/710ljx/return_value_optimization/", 
            "score": 52, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Return Value Optimization", 
            "url": "http://shaharmike.com/cpp/rvo/"
        }, 
        {
            "author": "goldsborough", 
            "created_utc": 1505784543.0, 
            "domain": "goldsborough.me", 
            "id": "70zncm", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70zncm/speeding_up_kmeans_with_c_and_cuda/", 
            "score": 36, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Speeding up K-Means with C++ and CUDA", 
            "url": "http://www.goldsborough.me/c++/python/cuda/2017/09/10/20-32-46-exploring_k-means_in_python,_c++_and_cuda/"
        }, 
        {
            "author": "holmeshe", 
            "created_utc": 1505784479.0, 
            "domain": "hackernoon.com", 
            "id": "70zn40", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70zn40/one_shot_learning_of_c_rvalue_and_move/", 
            "score": 3, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "One Shot Learning of C++ r-value, &&, and Move", 
            "url": "https://hackernoon.com/one-shot-learning-of-c-r-value-and-move-27e5d6bcec3b"
        }, 
        {
            "author": "DylanZA_", 
            "created_utc": 1505780310.0, 
            "domain": "github.com", 
            "id": "70z882", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70z882/eslang_write_erlang_style_in_c_using_coroutines/", 
            "score": 31, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Eslang: Write Erlang style in C++ using coroutines", 
            "url": "https://github.com/DylanZA/eslang"
        }, 
        {
            "author": "Gueesy", 
            "created_utc": 1505761607.0, 
            "domain": "youtu.be", 
            "id": "70x710", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "C Gueesy", 
                    "author_url": "https://www.youtube.com/channel/UCNppANNQGbE9XFXnjQ5LRHw", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/6aDCIiGghJ4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/6aDCIiGghJ4/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "Pong programmed in C++/SFML", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70x710/first_csfml_project_pongand_source_code/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "First C++/SFML Project! Pong!(and source code)", 
            "url": "https://youtu.be/6aDCIiGghJ4"
        }, 
        {
            "author": "joebaf", 
            "created_utc": 1505728781.0, 
            "domain": "bfilipek.com", 
            "id": "70u03s", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70u03s/c17_in_detail_summary_bonus/", 
            "score": 26, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++17 in detail: Summary & Bonus", 
            "url": "http://www.bfilipek.com/2017/09/c17-in-detail-summary-bonus.html"
        }, 
        {
            "author": "YbgOuuXkAe", 
            "created_utc": 1505724335.0, 
            "domain": "self.cpp", 
            "id": "70tq8k", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 210, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70tq8k/what_does_your_linux_c_development_setup_look_like/", 
            "score": 141, 
            "selftext": "For all the Linux C++ developers on /r/cpp, what does your Linux development environment look like?\n\nSpecifically, what do you use for the IDE, debugger, etc?", 
            "subreddit": "cpp", 
            "title": "What does your Linux C++ development setup look like?", 
            "url": "https://www.reddit.com/r/cpp/comments/70tq8k/what_does_your_linux_c_development_setup_look_like/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1505721856.0, 
            "domain": "baptiste-wicht.com", 
            "id": "70tl51", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70tl51/c11_performance_tip_when_to_use_stdpow/", 
            "score": 21, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++11 Performance tip: When to use std::pow ?", 
            "url": "https://baptiste-wicht.com/posts/2017/09/cpp11-performance-tip-when-to-use-std-pow.html"
        }, 
        {
            "author": "cplusplusqwerty", 
            "created_utc": 1505718529.0, 
            "domain": "self.cpp", 
            "id": "70tdxg", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 52, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70tdxg/what_do_you_use_c_for/", 
            "score": 13, 
            "selftext": "Im wondering at work or home what do you use c++ for?\nFor example at work we use c++98 for firmware on small devices, to do some networking things like wifi, GPS..", 
            "subreddit": "cpp", 
            "title": "What do you use c++ for?", 
            "url": "https://www.reddit.com/r/cpp/comments/70tdxg/what_do_you_use_c_for/"
        }, 
        {
            "author": "alivemoose", 
            "created_utc": 1505683708.0, 
            "domain": "self.cpp", 
            "id": "70qeky", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70qeky/release_managment_for_cross_platform/", 
            "score": 3, 
            "selftext": "We have a binary that we have developed in C++ that we use in our Android, iOS, and Web Apps. We are looking to try to figure out a good release management system for the C++ code. \n\nAs of now, we don't consider the C++ code working until it passes app tests on all 3 platforms. So before an \"actual\"/\"official\" release takes place, we have to provide the binary to all 3 teams to test and confirm.\n\nOur current solution is versioning with X.X.build_number and dropping zips (named appropriately) into a shared folder. You obviously see the problem at this point.\n\nWhat are you guys doing for release management and binary distribution?", 
            "subreddit": "cpp", 
            "title": "Release Managment for Cross Platform (Android/iOS/Linux) Binary", 
            "url": "https://www.reddit.com/r/cpp/comments/70qeky/release_managment_for_cross_platform/"
        }, 
        {
            "author": "fleischnaka", 
            "created_utc": 1505677063.0, 
            "domain": "self.cpp", 
            "id": "70poxv", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 33, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70poxv/should_c_have_tagged_initialization/", 
            "score": 37, 
            "selftext": "Hi,\n\nI recently learn about C99's tagged initialization, aka :\n    \n    typedef struct {\n        int width;\n        int height;\n    } rect_t;\n    \n    // ...\n    \n    const rect_t myRect {\n        .width = 420,  // Can't name parameters in C++\n        .height = 360\n    };\n    \nThis feature is not available in C++ :\nSo, to not loose code expressivity, I create my struct without arguments then set them one by one instead of using an initialization-list. But we then might loose some performances, because the struct's values are initialized then set.\n\nFor me, this seems to contradict with C++'s maxim of \"0 cost abstraction\". So, is there reasons to not implement this in C++ ?", 
            "subreddit": "cpp", 
            "title": "Should C++ have tagged initialization ?", 
            "url": "https://www.reddit.com/r/cpp/comments/70poxv/should_c_have_tagged_initialization/"
        }, 
        {
            "author": "rakhimov", 
            "created_utc": 1505631210.0, 
            "domain": "self.cpp", 
            "id": "70m335", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 16, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70m335/implicit_vs_explicit_function_to_pointer/", 
            "score": 24, 
            "selftext": "In C and C++, functions [decay to pointers implicitly](http://en.cppreference.com/w/cpp/language/pointer#Pointers_to_functions) like arrays do,\nso the ``&`` operator is optional.\n\nThe example from `cppreference`:\n\n    void f(int);\n    void (*p1)(int) = &f;\n    void (*p2)(int) = f; // same as &f\n\nI am not aware of a style guide advocating\nthe consistent use of implicit conversion or explicit ``&``.\n\nWhich approach is more common\nand/or considered a better practice/style (for readability)?\n", 
            "subreddit": "cpp", 
            "title": "Implicit vs. explicit function to pointer conversion", 
            "url": "https://www.reddit.com/r/cpp/comments/70m335/implicit_vs_explicit_function_to_pointer/"
        }, 
        {
            "author": "MichaelSuen95", 
            "created_utc": 1505622327.0, 
            "domain": "self.cpp", 
            "id": "70ljrt", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70ljrt/msvc_implementation_of_vector_not_support/", 
            "score": 8, 
            "selftext": "In debug mode, MSVC's vector holds a linked list to store some extra information on iterators created by this object.\n\nWhen you move a instance of vector to another, say `vec1 = std::move(vec2)`, if the allocator of `vec2` has `propagate_on_container_move_assignment`==`true_type`, then it will transfer the internal array and the internal allocator to `vec1`.\n\nHowever it didn't transfer the linked list mentioned above, which is fine in default `std::allocator`, for it is stateless, you can still deallocate that linked-list in a moved `std::allocator`. But it doesn't work in my allocator. Because in my implementation, a moved allocator will create a new memory pool to reset itself. So you cannot deallocate memory allocated before the move, because it is not allocated by the 'new' pool.\n\nAm I wrong in the implementation of stateful allocator? Or it is a trap in MSVC's vector? Please give me some help.\n\nThe code is [here](https://wandbox.org/permlink/CemMdOpQYPv5DH3g), I tested it on VS2017 15.3, debug x64.", 
            "subreddit": "cpp", 
            "title": "MSVC implementation of vector not support stateful allocator in DEBUG mode?", 
            "url": "https://www.reddit.com/r/cpp/comments/70ljrt/msvc_implementation_of_vector_not_support/"
        }, 
        {
            "author": "nholthaus", 
            "created_utc": 1505589818.0, 
            "domain": "self.cpp", 
            "id": "70itv2", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70itv2/units_v230_released/", 
            "score": 38, 
            "selftext": "The latest version of units, v2.3.0, has been released. Check it out here: https://github.com/nholthaus/units/tree/v2.3.0\n\nThe main focus of the release was major improvements in compile time. It also includes some new unit types for data, a few highly-requested features, and some bug fixes to edge-case math.\n\nIf you're not familiar with units, it's a compile-time, header-only, dimensional analysis and unit conversion library built on c++14 with no dependencies. \n\nIf you are, I'd love to hear from you about your applications!\n", 
            "subreddit": "cpp", 
            "title": "Units v2.3.0 released", 
            "url": "https://www.reddit.com/r/cpp/comments/70itv2/units_v230_released/"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1505575197.0, 
            "domain": "kristerw.blogspot.com", 
            "id": "70hf7f", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 71, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70hf7f/useful_gcc_warning_options_not_enabled_by_wall/", 
            "score": 154, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Useful GCC warning options not enabled by -Wall -Wextra", 
            "url": "https://kristerw.blogspot.com/2017/09/useful-gcc-warning-options-not-enabled.html"
        }, 
        {
            "author": "monsta-hd", 
            "created_utc": 1505572438.0, 
            "domain": "github.com", 
            "id": "70h6j2", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70h6j2/simple_windows_process_manager_in_c/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Simple Windows process manager in C++", 
            "url": "https://github.com/monsta-hd/process-manager"
        }, 
        {
            "author": "Z01dbrg", 
            "created_utc": 1505512125.0, 
            "domain": "self.cpp", 
            "id": "70d0ku", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70d0ku/how_would_you_feel_about_language_support_for/", 
            "score": 0, 
            "selftext": "disclaimer: this will never be in standard, it is just some idea of mine triggered partially by \"Lambda Abbreviated for fun and profit\", so if you do not want to waste time on this you should break; reading this. :)\n\n//Hoping this is not unreachable code :) \n\nSo the problem description is that most of the predicate code when using STL is boilerplate. \nconsider:\n\n`std::remove_if(vec.begin(), vec.end(), [](const int& i) {return i <0;});`\n\nAs all cool people on planet you know requirements of 3rd argument to std::remove_if, it is UnaryPredicate, meaning it takes 1 argument by maybe const reference, can not modify it, must return bool....\n\nsimilar for \n`std:: sort(vec.begin(), vec.end(), [](const auto& a, const auto& b){return a.size()<b.size();});`\n\nthird parameter is a BinaryPredicate, that means... bla bla bla...\n\nSo you may say abbreviated lambdas solve all this verbosity problems. \nI hope they are ok, but hard to know without using it for months in real code, in other words IDK since I have not evaluated them properly.\n\nBut if you have been following my text so far you may have guessed where this is going(ignoring the syntax) and that this is not tackling just lambda verbosity but something different:\n\n`std::sort(vec.begin(), vec.end(), ...{x.size()<y.size()});`\n\nWitchcraft you say? \nWell key point here is that you can think of std::sort 3rd parameter as being specified as BinaryPredicate by std::sort using some new magical language features. \nWhat does this buys us? That compiler can know all the boilerplate about the code that is 3rd argument beside that little part we wrote(notice that there is no return or semicolon since we know BinaryPredicate returns bool).\n\nSo for example if you try to use ...{x<y} in remove_if it will complain because it counted the variables (x and y) and it knows 2 is not 1. :) It knows the types of the variables since we are operating on container of variables of type T so if you try to multiple 2 strings compiler can tell you you can not do that. \n\nObviously std::sort will need to be rewritten so that it constructs the predicate from code fragment that is 3rd argument, but like Spock said:  Needs of the many outweigh the needs of Stephan ;)\n\nAlso imagine that there are specifications of BinaryPredicateFragment in std::fragments namespace so normal users can write their functions using this instead of manually specifying BinaryPredicateFragment . \nAlso you should be able to introduce new variables using auto, but unnamed ones are the arguments:\n\n`std::remove_if(vec.begin(), vec.end(), ...{const auto sz =  a.size(); sz==0});`\n\nOn higher level you can think of this about being application of DRY principle. \nstd::sort can not work with predicates that take 5 arguments and return std::variant. We know that as programmers, but we are not using that information to type less. :)\n\n\n", 
            "subreddit": "cpp", 
            "title": "How would you feel about language support for code fragments?", 
            "url": "https://www.reddit.com/r/cpp/comments/70d0ku/how_would_you_feel_about_language_support_for/"
        }, 
        {
            "author": "dball", 
            "created_utc": 1505504997.0, 
            "domain": "self.cpp", 
            "id": "70ca1t", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70ca1t/c_world_caf\u00e9_with_anthony_williams_jason_turner/", 
            "score": 22, 
            "selftext": "The C++ World Caf\u00e9 discussion format helps to get a broad and current overview of some C++ topics, to get to know peer developers, and is a lot of fun. \n\nHere is a [report about the first C++ World Caf\u00e9 event](https://cppugka.github.io/CppWorldCafe2017/).\n\nThe C++ World Caf\u00e9 got support from four C++ gurus from around the world; here are the direct links to the transcripts of the interviews: \n\n* [interview with **Jason Turner** about becoming a better C++ developer](https://cppugka.github.io/CppWorldCafe2017/transcript/JasonTurner_CppWorldCafe_2017_06_14.html);\n* [interview with **Robert Ramey** about libraries and frameworks](https://cppugka.github.io/CppWorldCafe2017/transcript/RobertRamey_CppWorldCafe_2017_06_14.html);\n* [interview with **Walter Bright** about compilers](https://cppugka.github.io/CppWorldCafe2017/transcript/WalterBright_CppWorldCafe_2017_06_14.html);\n* [interview with **Anthony Williams** about parallelization](https://cppugka.github.io/CppWorldCafe2017/transcript/AnthonyWilliams_CppWorldCafe_2017_06_14.html).\n\nThe main report above links to additional material (audio/video/pics).", 
            "subreddit": "cpp", 
            "title": "C++ World Caf\u00e9 with Anthony Williams, Jason Turner, Robert Ramey, and Walter Bright", 
            "url": "https://www.reddit.com/r/cpp/comments/70ca1t/c_world_caf\u00e9_with_anthony_williams_jason_turner/"
        }, 
        {
            "author": "PifPoof", 
            "created_utc": 1505495219.0, 
            "domain": "sites.google.com", 
            "id": "70b7g4", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 85, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70b7g4/c_is_one_of_the_most_energy_efficient_languages/", 
            "score": 112, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++ is one of the most energy efficient languages", 
            "url": "https://sites.google.com/view/energy-efficiency-languages"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1505488489.0, 
            "domain": "github.com", 
            "id": "70ah2r", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70ah2r/pdf_finding_missed_compiler_optimizations_by/", 
            "score": 11, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "[PDF] \"Finding Missed Compiler Optimizations by Differential Testing\"", 
            "url": "https://github.com/gergo-/missed-optimizations/raw/master/missed_optimizations_preprint.pdf"
        }, 
        {
            "author": "guba", 
            "created_utc": 1505482868.0, 
            "domain": "blog.benoitblanchon.fr", 
            "id": "709w24", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 28, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/709w24/whats_new_in_clangformat_5/", 
            "score": 56, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "What's new in clang-format 5", 
            "url": "https://blog.benoitblanchon.fr/clang-format-5/"
        }, 
        {
            "author": "engkhsky", 
            "created_utc": 1505482530.0, 
            "domain": "self.cpp", 
            "id": "709v0m", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 35, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/709v0m/which_is_the_standard_way_to_place_for_pointers/", 
            "score": 5, 
            "selftext": "I am new to c++. I know there are few ways to place * in pointers.\n\n* int* ptr \n* int *ptr\n* int * ptr\n\nWhat is the standard or proper or common way to do? ", 
            "subreddit": "cpp", 
            "title": "Which is the standard way to place * for pointers?", 
            "url": "https://www.reddit.com/r/cpp/comments/709v0m/which_is_the_standard_way_to_place_for_pointers/"
        }, 
        {
            "author": "gracicot", 
            "created_utc": 1505482166.0, 
            "domain": "gracicot.github.io", 
            "id": "709ttn", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/709ttn/conceptmodel_idiom_part_one_a_new_look_at/", 
            "score": 20, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Concept-Model Idiom Part One: A new look at polymorphism", 
            "url": "https://gracicot.github.io/conceptmodel/2017/09/13/concept-model-part1.html"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1505481403.0, 
            "domain": "weliveindetail.github.io", 
            "id": "709rjn", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/709rjn/rich_polymorphic_error_handling_with_llvmexpectedt/", 
            "score": 35, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Rich Polymorphic Error Handling with llvm::Expected<T>", 
            "url": "https://weliveindetail.github.io/blog/post/2017/09/06/llvm-expected-basics.html"
        }, 
        {
            "author": "jguegant", 
            "created_utc": 1505479149.0, 
            "domain": "self.cpp", 
            "id": "709k7f", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/709k7f/26102017_distributed_c_meetup_london_stockholm/", 
            "score": 13, 
            "selftext": "Would you like to join the worlds first distributed C++ meet-up? C++ London and SwedenCpp will be running together, on the Twenty-sixth of October, 2017, an event simultaneously in London and Stockholm - connected via a live video stream.\n\nThe event will take place in [King](https://discover.king.com/)'s offices, located in the two capitals cities.\n\nDue to a timezone difference, the schedule will differ whether you are in London or Stockholm.\n\nFor London:\n\n- 17:30 Pre-session networking and getting that good seat at the front\n\n- 18:00 Lightning talks from Stockholm video stream\n\n- 19:00 Lightning talks in London (streamed to Stockholm)\n\n- 20:00 Socialising with pizza and drinks, c/o King\n\nFor Stockholm:\n\n- 17:30 - 18:00 Pre-session networking and getting that good seat at the front\n\n- 18:00 - 19:00: Socialising with pizza and drinks, c/o King\n\n- 19:00 - 20:00: Lightning talks in Stockholm (streamed to London)\n\n- 20:00 - 21:00: Lightning talks from London video stream\n\n\nAre you interested in the event? Have a look at the respective meetup pages:\n\n- [C++ London](https://www.meetup.com/CppLondon/events/243386512/)\n\n- [SwedenCpp](https://www.meetup.com/swedencpp/events/243386213/)\n", 
            "subreddit": "cpp", 
            "title": "26.10.2017, Distributed C++ meet-up - London && Stockholm", 
            "url": "https://www.reddit.com/r/cpp/comments/709k7f/26102017_distributed_c_meetup_london_stockholm/"
        }, 
        {
            "author": "zqsd31", 
            "created_utc": 1505468862.0, 
            "domain": "self.cpp", 
            "id": "708tpd", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 43, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/708tpd/c_abbreviated_lambdas_for_fun_and_profit_gcc72/", 
            "score": 80, 
            "selftext": "I've patched **GCC7.2** to implement the proposal [*P0573R1: Lambda Abbreviated for fun and profit*](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0573r1.html).\nthe [github](https://github.com/DaemonSnake/gcc-abbreviated-cpp-lambda) here.\nI've also made an online version of the compiler with *compiler explorer*.\n[www.gcc-abbreviated-lambdas-proposal.tk](http://www.gcc-abbreviated-lambdas-proposal.tk/)", 
            "subreddit": "cpp", 
            "title": "C++ Abbreviated Lambdas for Fun and Profit [GCC7.2 implementation]", 
            "url": "https://www.reddit.com/r/cpp/comments/708tpd/c_abbreviated_lambdas_for_fun_and_profit_gcc72/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1505466109.0, 
            "domain": "blog.tartanllama.xyz", 
            "id": "708nne", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/708nne/detection_idiom_a_stopgap_for_concepts/", 
            "score": 13, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Detection Idiom - A Stopgap for Concepts", 
            "url": "https://blog.tartanllama.xyz/detection-idiom/"
        }, 
        {
            "author": "fark_blarneywine", 
            "created_utc": 1505465586.0, 
            "domain": "github.com", 
            "id": "708mjt", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/708mjt/optional_a_minimalist_argumentparsing_library_for/", 
            "score": 6, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Optional: a minimalist argument-parsing library for C++", 
            "url": "https://github.com/dmulholland/optional"
        }, 
        {
            "author": "dobkeratops", 
            "created_utc": 1505443976.0, 
            "domain": "self.cpp", 
            "id": "7075x4", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 32, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7075x4/stdmove_eliding_destructor_checks_on_cleared_value/", 
            "score": 3, 
            "selftext": "comparing C++ to Rust for '[move semantics](http://www.cprogramming.com/c++11/rvalue-references-and-move-semantics-in-c++11.html)',\nin Rust the moved value is really consumed (the compiler can assume it will *never* be used again), whilst in C++, a move constructor is supposed to leave the source in a valid state (and I gather values can actually be re-used)\n\nThis means that a destructor might be invoked on a moved value which will do work to check what state it's in , before doing work (e.g. an smart pointer destructor might check if the pointer is non null, then delete)\n\n    {\n        std::unique_ptr<Foo> p = ...; // construct a 'Foo' in an owned ptr\n        do_something( std::move(p) ); // consume the 'Foo'\n        // unique_ptr<Foo>::~unique_ptr<Foo>() is now called on p,\n        // can it be elided, by assuming the state 'move' leaves it in ?\n    }\nMy question is (before I go and do an experiment) can modern compilers track this work done and elide such checks (e.g. track at compile time when a function leaves a value cleared to a constant value, and in turn when another function is called on it with checks.. elide checks and take a certain branch , with foreknowledge)\n\nI imagine there would be high demand for such an optimisation , and the appropriate tracking (e.g. static analysers could use it to warn about inappropriate use of invalidated values)", 
            "subreddit": "cpp", 
            "title": "std::move , eliding destructor checks on cleared value?", 
            "url": "https://www.reddit.com/r/cpp/comments/7075x4/stdmove_eliding_destructor_checks_on_cleared_value/"
        }, 
        {
            "author": "tallassrob", 
            "created_utc": 1505443694.0, 
            "domain": "cppcast.com", 
            "id": "70752x", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/70752x/cppcast_fluentc_with_jonathan_boccara/", 
            "score": 11, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCast: FluentC++ with Jonathan Boccara", 
            "url": "http://cppcast.com/2017/09/jonathan-boccara/"
        }, 
        {
            "author": "david-grs", 
            "created_utc": 1505427226.0, 
            "domain": "david-grs.github.io", 
            "id": "705lsl", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/705lsl/c_ci_travis_cmake_gtest_coveralls_and_appveyor/", 
            "score": 11, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++ CI: Travis, CMake, GTest, Coveralls and Appveyor", 
            "url": "http://david-grs.github.io/cpp-clang-travis-cmake-gtest-coveralls-appveyor/"
        }, 
        {
            "author": "Maslo59", 
            "created_utc": 1505408382.0, 
            "domain": "bitbashing.io", 
            "id": "703k9k", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 116, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/703k9k/stdvisit_is_everything_wrong_with_modern_c/", 
            "score": 188, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "std::visit is everything wrong with modern C++", 
            "url": "https://bitbashing.io/std-visit.html"
        }, 
        {
            "author": "lefticus", 
            "created_utc": 1505397283.0, 
            "domain": "youtube.com", 
            "id": "702cz2", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/702cz2/c_weekly_ep_80_intro_to_appveyor/", 
            "score": 6, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++ Weekly - Ep 80 - Intro to AppVeyor", 
            "url": "https://www.youtube.com/attribution_link?a=MhZgcTx5d4w&u=%2Fwatch%3Fv%3DR8OrWVVf5CM%26feature%3Dshare"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1505385714.0, 
            "domain": "foonathan.net", 
            "id": "701f14", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 28, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/701f14/thoughts_on_destructive_move/", 
            "score": 23, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Thoughts on destructive move", 
            "url": "http://foonathan.net/blog/2017/09/14/destructive-move.html"
        }, 
        {
            "author": "meetingcpp", 
            "created_utc": 1505383220.0, 
            "domain": "meetingcpp.net", 
            "id": "7019ai", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7019ai/meeting_c_2017_schedule/", 
            "score": 20, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Meeting C++ 2017 Schedule", 
            "url": "http://meetingcpp.net/2017/Schedule.html"
        }, 
        {
            "author": "MehTheHedgehog", 
            "created_utc": 1505340076.0, 
            "domain": "github.com", 
            "id": "6zxx7c", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zxx7c/rate_my_factory/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Rate my factory", 
            "url": "https://github.com/MehTheHedgehog/Factory"
        }, 
        {
            "author": "deque-blog", 
            "created_utc": 1505301858.0, 
            "domain": "deque.blog", 
            "id": "6ztwsn", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 42, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6ztwsn/monoids_what_they_are_why_they_are_useful_and/", 
            "score": 67, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Monoids: what they are, why they are useful, and what they teach us about software", 
            "url": "https://deque.blog/2017/09/13/monoids-what-they-are-why-they-are-useful-and-what-they-teach-us-about-software/"
        }, 
        {
            "author": "wichtounet", 
            "created_utc": 1505291419.0, 
            "domain": "baptiste-wicht.com", 
            "id": "6zt9xo", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zt9xo/c11_concurrency_tutorial_part_5_futures/", 
            "score": 32, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++11 Concurrency Tutorial - Part 5: Futures", 
            "url": "https://baptiste-wicht.com/posts/2017/09/cpp11-concurrency-tutorial-futures.html"
        }, 
        {
            "author": "dharmatech", 
            "created_utc": 1505269220.0, 
            "domain": "bluescarni.github.io", 
            "id": "6zrqmg", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 27, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zrqmg/mp_c11_headeronly_library_for_multiprecision/", 
            "score": 25, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "mp++: C++11 header-only library for multiprecision arithmetic", 
            "url": "https://bluescarni.github.io/mppp/"
        }, 
        {
            "author": "MichaelBurge", 
            "created_utc": 1505240116.0, 
            "domain": "michaelburge.us", 
            "id": "6zorxw", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zorxw/injecting_a_c_chess_engine_into_amazon_redshift/", 
            "score": 15, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Injecting a C++ Chess Engine into Amazon Redshift", 
            "url": "http://www.michaelburge.us/2017/09/10/injecting-shellcode-to-speed-up-amazon-redshift.html"
        }, 
        {
            "author": "angryboop", 
            "created_utc": 1505230575.0, 
            "domain": "codeofconnor.wordpress.com", 
            "id": "6znq63", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 23, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6znq63/pass_by_reference_vs_pass_by_value_in_c/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Pass by Reference vs Pass by Value in C++", 
            "url": "https://codeofconnor.wordpress.com/2017/09/12/pass-by-reference-vs-pass-by-value-in-cpp/"
        }, 
        {
            "author": "joboccara", 
            "created_utc": 1505229375.0, 
            "domain": "fluentcpp.com", 
            "id": "6znlgj", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6znlgj/how_to_return_a_smart_pointer_and_use_covariance/", 
            "score": 7, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "How to Return a Smart Pointer AND Use Covariance", 
            "url": "https://www.fluentcpp.com/2017/09/12/how-to-return-a-smart-pointer-and-use-covariance/"
        }, 
        {
            "author": "public_void", 
            "created_utc": 1505229071.0, 
            "domain": "self.cpp", 
            "id": "6znk97", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 69, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6znk97/what_do_you_take_into_account_when_updating_which/", 
            "score": 28, 
            "selftext": "I work at a fairly large sized company, but only my team of ~4 use C++. We're currently on C++14, but I'd like to start investigating an update to 17. From what I can see, both Clang & GCC have implemented enough of the standard for us to start getting a benefit now, but I'm not sure how to evaluate if we should update. What things do you take into account when making this decision?", 
            "subreddit": "cpp", 
            "title": "What do you take into account when updating which version of the standard you use?", 
            "url": "https://www.reddit.com/r/cpp/comments/6znk97/what_do_you_take_into_account_when_updating_which/"
        }, 
        {
            "author": "MoTTs_", 
            "created_utc": 1505225456.0, 
            "domain": "github.com", 
            "id": "6zn6n3", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zn6n3/updated_javascriptc_rosetta_stone/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "[Updated] JavaScript/C++ Rosetta Stone", 
            "url": "https://github.com/Jeff-Mott-OR/javascript-cpp-rosetta-stone#javascriptc-rosetta-stone"
        }, 
        {
            "author": "AndrewPardoe", 
            "created_utc": 1505179766.0, 
            "domain": "blogs.msdn.microsoft.com", 
            "id": "6zjub9", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 93, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zjub9/msvc_now_has_partial_twophase_name_lookup/", 
            "score": 127, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "MSVC now has (partial) two-phase name lookup!", 
            "url": "https://blogs.msdn.microsoft.com/vcblog/2017/09/11/two-phase-name-lookup-support-comes-to-msvc/"
        }, 
        {
            "author": "stephenliang", 
            "created_utc": 1505178298.0, 
            "domain": "self.cpp", 
            "id": "6zjpaq", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zjpaq/decompilers_and_source_code/", 
            "score": 0, 
            "selftext": "Do decompilers actually work, and if so, how will they compromise the integrity of certain programs. Is it possible to block decompilation in order to protect your own source code if you are selling software?\n\nI'm talking about this: https://derevenets.com\n\n", 
            "subreddit": "cpp", 
            "title": "Decompilers and Source Code", 
            "url": "https://www.reddit.com/r/cpp/comments/6zjpaq/decompilers_and_source_code/"
        }, 
        {
            "author": "w0mbatzilla", 
            "created_utc": 1505146568.0, 
            "domain": "self.cpp", 
            "id": "6zgeqw", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zgeqw/c_random_number_generator_research_opportunities/", 
            "score": 0, 
            "selftext": "Hello,\nI am an undergrad in my final year and I'm interested in writing my research paper in random number generation.I need your help in choosing something specific that will keep me busy for the next year.\nWhere would you like to see an improvement in C++'s random number generation?", 
            "subreddit": "cpp", 
            "title": "c++ random number generator research opportunities", 
            "url": "https://www.reddit.com/r/cpp/comments/6zgeqw/c_random_number_generator_research_opportunities/"
        }, 
        {
            "author": "sbs0", 
            "created_utc": 1505145770.0, 
            "domain": "self.cpp", 
            "id": "6zgbki", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zgbki/cross_platform_inheritance_vs_pimplifdefetc/", 
            "score": 4, 
            "selftext": "I've noticed in a handful of open source libraries that inheritance and abstract base classes are not typically used for classes which will make platform calls (ex. a File class).  What I typically see are either the pimpl pattern with a file.h class w/ the public methods and separate platform specific header/source files (ex. file_windows.h/.cpp, file_ios.h/.cpp, etc).  Or many times pimpl is skipped and you just have file.h and platform specific source files file_windows.cpp, etc w/ the implementation.  Is any one preferred over the other?  Why not go the inheritance/abstract base class route?", 
            "subreddit": "cpp", 
            "title": "cross platform: inheritance vs pimpl/ifdef/etc", 
            "url": "https://www.reddit.com/r/cpp/comments/6zgbki/cross_platform_inheritance_vs_pimplifdefetc/"
        }, 
        {
            "author": "sphere991", 
            "created_utc": 1505131931.0, 
            "domain": "medium.com", 
            "id": "6zezby", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zezby/uniform_initialization_isnt/", 
            "score": 48, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Uniform initialization isn't", 
            "url": "https://medium.com/@barryrevzin/uniform-initialization-isnt-82533d3b9c11"
        }, 
        {
            "author": "Mperonen", 
            "created_utc": 1505124485.0, 
            "domain": "self.cpp", 
            "id": "6zegla", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 159, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zegla/to_me_c_is_much_more_easier_and_logical_to_write/", 
            "score": 180, 
            "selftext": "This is not a rant post, sorry for the title, but it was the only way I could express this fact. This fact has nothing to do with one language being better than other. But it is more about my own personality and mindset. Just something I found interesting and thought of sharing.\n\nI am extremely slow learner and it took me a long time to learn programming.  One interesting thing I have noticed is that writing C++ and reading it is actually easier for me and more confortable than with some of the higher level languages.\n\nThis is due to the fact that I have to think prehand more about what type of data I am processing and where. In Python I can just work with variables without worrying much about the datatypes, this leading me to lose overall sight of the codebase much faster. No matter how much I organize the code and split things in to smaller and smaller parts, this still happeds. Just thought this as something interesting to mention.", 
            "subreddit": "cpp", 
            "title": "To me C++ is much more easier and logical to write and read than Python and some other languages.", 
            "url": "https://www.reddit.com/r/cpp/comments/6zegla/to_me_c_is_much_more_easier_and_logical_to_write/"
        }, 
        {
            "author": "GitHubCpp", 
            "created_utc": 1505121522.0, 
            "domain": "bfilipek.com", 
            "id": "6zeaax", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zeaax/gigantic_list_of_freely_available_resources_from/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Gigantic list of freely available resources from the PVS Team who works with bugs analysis on a daily basis", 
            "url": "http://www.bfilipek.com/2017/09/pvs-studio-resources.html"
        }, 
        {
            "author": "GitHubCpp", 
            "created_utc": 1505121202.0, 
            "domain": "blogs.msdn.microsoft.com", 
            "id": "6ze9kl", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6ze9kl/visual_studio_extensions_for_c_developers_in/", 
            "score": 19, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Visual Studio extensions for C++ developers in Visual Studio 2017", 
            "url": "https://blogs.msdn.microsoft.com/vcblog/2017/08/29/visual-studio-extensions-for-c-developers-in-visual-studio-2017/"
        }, 
        {
            "author": "VinnieFalco", 
            "created_utc": 1505093598.0, 
            "domain": "self.cpp", 
            "id": "6zccsh", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6zccsh/make_classes_great_again_in_person_with_me_at/", 
            "score": 22, 
            "selftext": "I'm the author of Boost.Beast, an HTTP and WebSocket library built on Boost.Asio (https://github.com/boostorg/beast)\n\nI will be presenting a talk at CppCon 2017 entitled \"Make Classes Great Again (using Concepts for customization points).\" In this talk I'd like to show you some techniques I used for designing a class and its accompanying customization point. The description of the talk is repeated below.\n\nIf you'd like to meet me in person I will be attending the conference on every day that there are presentations. My schedule is not too heavy so don't be afraid to say hello and I am more than happy to answer technical questions. If you want something in a little more formal setting there is this new thing called the \"Speaker's Dinner\" where you can meet the people presenting, I will be there at one of the tables here is the info: http://sched.co/BhdF\n\nMore information on the talk, including a signup, can be found here: http://sched.co/BgsE\n\n-------\n\nAbstract:\n\nLearn new ways to think about class design, that you can apply to your own projects! \n\nIn this talk we'll start with a simple class that models an HTTP message. We\u2019ll go over the limitations of the simple declaration, then walk through a series of guided improvements. We will explore ways to think about class models, create a concept as a customization point, perform type checking, and document a concept. \n\nThe example class we will explore is based on the message container found in the Boost.Beast library. You do not need to know anything (or care) about network protocols. This is about building better classes.\n", 
            "subreddit": "cpp", 
            "title": "Make Classes Great Again! (in person, with me, at CppCon 2017!)", 
            "url": "https://www.reddit.com/r/cpp/comments/6zccsh/make_classes_great_again_in_person_with_me_at/"
        }, 
        {
            "author": "greatmanifesto", 
            "created_utc": 1505055806.0, 
            "domain": "self.cpp", 
            "id": "6z8oy9", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 89, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6z8oy9/ide_and_indent_style/", 
            "score": 22, 
            "selftext": "This has probably been asked before, but just wondering what IDE/text editor you all use, and what indent style? :) \n\nEDIT: when I say indent style, I actually mean where you place your braces etc., something like this: http://en.wikipedia.org/wiki/Indent_Style :) \n\nI use Visual Studio and CLion, and the Stroustrup variant of K&R style :) ", 
            "subreddit": "cpp", 
            "title": "IDE and Indent Style", 
            "url": "https://www.reddit.com/r/cpp/comments/6z8oy9/ide_and_indent_style/"
        }, 
        {
            "author": "GregPresco", 
            "created_utc": 1505053140.0, 
            "domain": "self.cpp", 
            "id": "6z8gjy", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 81, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6z8gjy/how_many_c_programmers_employ_tdd_in_percentages/", 
            "score": 13, 
            "selftext": "I've worked with several C++ programmers. Rarely have I met a TDD practitioner among them. Is TDD more complicated in C++ or is it just a coincidence?", 
            "subreddit": "cpp", 
            "title": "How many C++ programmers employ TDD, in percentages?", 
            "url": "https://www.reddit.com/r/cpp/comments/6z8gjy/how_many_c_programmers_employ_tdd_in_percentages/"
        }, 
        {
            "author": "mrlimilind", 
            "created_utc": 1505000718.0, 
            "domain": "self.cpp", 
            "id": "6z52m4", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6z52m4/json_to_struct/", 
            "score": 8, 
            "selftext": "I wrote a header only library that can populate structs with data from Json. Documentation isn't good but might be of use for someone:\nhttps://github.com/jorgen/json_tools", 
            "subreddit": "cpp", 
            "title": "Json to struct", 
            "url": "https://www.reddit.com/r/cpp/comments/6z52m4/json_to_struct/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1504995096.0, 
            "domain": "github.com", 
            "id": "6z4l38", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 26, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6z4l38/unosolo_rust_application_that_converts_c/", 
            "score": 62, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "unosolo: Rust application that converts C++ libraries to single self-contained headers", 
            "url": "https://github.com/SuperV1234/unosolo"
        }, 
        {
            "author": "Acidic92", 
            "created_utc": 1504983130.0, 
            "domain": "self.cpp", 
            "id": "6z3gqn", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6z3gqn/p5jsprocessing_in_c/", 
            "score": 3, 
            "selftext": "[p5js](https://p5js.org/) is a JavaScript library for using the HTML canvas to easily draw and create sketches or games. Simplified, it works with a `draw()` function that loops continuously.\n\n[Processing](https://processing.org/) is p5js's brother. It's almost the **exact** same library, but for Java.\n\nIs there such a library for C++?\nIf not, then are there any alternatives which provide 2D vectors and methods for adding vectors, calculating magnitude, adding force, etc.?", 
            "subreddit": "cpp", 
            "title": "p5js/Processing in C++?", 
            "url": "https://www.reddit.com/r/cpp/comments/6z3gqn/p5jsprocessing_in_c/"
        }, 
        {
            "author": "gridem", 
            "created_utc": 1504976637.0, 
            "domain": "gridem.blogspot.com", 
            "id": "6z2tv4", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6z2tv4/god_adapter/", 
            "score": 12, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "God Adapter", 
            "url": "http://gridem.blogspot.com/2015/11/replicated-object-part-2-god-adapter.html"
        }, 
        {
            "author": "deque-blog", 
            "created_utc": 1504873739.0, 
            "domain": "deque.blog", 
            "id": "6yug0q", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6yug0q/how_to_make_a_better_polymorphic_clone_in_modern/", 
            "score": 53, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "How to make a better polymorphic clone in modern C++ (an answer to fluentcpp.com)", 
            "url": "https://deque.blog/2017/09/08/how-to-make-a-better-polymorphic-clone/"
        }, 
        {
            "author": "eao197", 
            "created_utc": 1504863943.0, 
            "domain": "self.cpp", 
            "id": "6ytsda", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 30, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6ytsda/json_dto02_a_small_but_useful_wrapper_around/", 
            "score": 25, 
            "selftext": "We developed [json_dto](https://bitbucket.org/sobjectizerteam/json_dto-0.2) about a year and a half ago to simplify usage of JSON in our C++ projects. We used wonderful RapidJSON library but didn't want to write a lot of boilerplate code like:\n\n    class User {\n    public:\n        ...\n        static User fromJSON(const rapidjson::Value& doc) {\n            if(!doc.IsObject())\n                throw std::runtime_error(\"document should be an object\");\n            static const char* members[] = { \"id\", \"name\", \"phone\",\n                                         \"birthday\" };\n            for(size_t i = 0; i < sizeof(members)/sizeof(members[0]); i++)\n                if(!doc.HasMember(members[i]))\n                    throw std::runtime_error(\"missing fields\");\n            uint64_t id = doc[\"id\"].GetUint64();\n            std::string name = doc[\"name\"].GetString();\n            uint64_t phone = doc[\"phone\"].GetUint64();\n            Date birthday = Date::fromJSON(doc[\"birthday\"]);\n            User result(id, name, phone, birthday);\n            return result;\n        }\n    }\n\nInstead we borrowed some ideas from Boost.Serialization and wrote json_dto which allowed to write code like this:\n\n    class User {\n    public :\n       /* ... */\n       template<typename JSON_IO>\n       void json_io(JSON_IO & io) {\n          io & json_dto::mandatory(\"id\", _id)\n             & json_dto::mandatory(\"name\", _name)\n             & json_dto::mandatory(\"birthday\", _birthday)\n             & json_dto::mandatory(\"phone\", _phone);\n       }\n    };\n\nThis library is still in use in our projects. We have updated it recently:\n\n* custom read_json_value/write_json_value for user types now can be defined in the same namespace with user types (this allows to do custom serialization/deserialization for template types);\n* support for std::experimental::optional and std::optional from C++17 is added.\n\n[json_dto](https://bitbucket.org/sobjectizerteam/json_dto-0.2) is a small, header-only library for C++14. It is distributed under BSD-3-Clause license. We hope it can be useful for someone else. Any suggestions and new ideas are welcome :)\n", 
            "subreddit": "cpp", 
            "title": "json_dto-0.2: a small but useful wrapper around RapidJSON", 
            "url": "https://www.reddit.com/r/cpp/comments/6ytsda/json_dto02_a_small_but_useful_wrapper_around/"
        }, 
        {
            "author": "tallassrob", 
            "created_utc": 1504842723.0, 
            "domain": "cppcast.com", 
            "id": "6yse0g", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6yse0g/cppcast_debugview_with_jan_wilmans/", 
            "score": 15, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCast: DebugView++ with Jan Wilmans", 
            "url": "http://cppcast.com/2017/09/jan-wilmans/"
        }, 
        {
            "author": "joaquintides", 
            "created_utc": 1504819928.0, 
            "domain": "lists.boost.org", 
            "id": "6yqajt", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6yqajt/boost_1651_released/", 
            "score": 45, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Boost 1.65.1 released", 
            "url": "https://lists.boost.org/boost-announce/2017/09/0524.php"
        }, 
        {
            "author": "lefticus", 
            "created_utc": 1504812991.0, 
            "domain": "youtube.com", 
            "id": "6ypjq4", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Jason Turner", 
                    "author_url": "https://www.youtube.com/user/lefticus1", 
                    "description": "Support these videos: https://www.patreon.com/lefticus Learning C++ Best Practices: http://shop.oreilly.com/product/0636920049814.do Inheritance and Polymorphism with C++: http://shop.oreilly.com/product/0636920052166.do Follow me on twitter: https://twitter.com/lefticus Source:", 
                    "height": 338, 
                    "html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F3ulKzD2cmSw%3Ffeature%3Doembed&url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D3ulKzD2cmSw&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F3ulKzD2cmSw%2Fhqdefault.jpg&key=522baf40bd3911e08d854040d3dc5c07&type=text%2Fhtml&schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/3ulKzD2cmSw/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "C++ Weekly - Ep 79 - Intro To Travis CI", 
                    "type": "video", 
                    "url": "http://www.youtube.com/watch?v=3ulKzD2cmSw", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6ypjq4/c_weekly_ep_79_intro_to_travis_ci/", 
            "score": 8, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++ Weekly - Ep 79 - Intro To Travis CI", 
            "url": "https://www.youtube.com/attribution_link?a=FfnLRUt5eZQ&u=%2Fwatch%3Fv%3D3ulKzD2cmSw%26feature%3Dshare"
        }, 
        {
            "author": "kirbyfan64sos", 
            "created_utc": 1504810993.0, 
            "domain": "releases.llvm.org", 
            "id": "6ypbwy", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 49, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6ypbwy/clang_50_released/", 
            "score": 221, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Clang 5.0 released!", 
            "url": "http://releases.llvm.org/5.0.0/tools/clang/docs/ReleaseNotes.html"
        }, 
        {
            "author": "DJDarkViper", 
            "created_utc": 1504807026.0, 
            "domain": "self.cpp", 
            "id": "6yowaj", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 16, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6yowaj/best_way_to_deal_with_the_seemingly_endless/", 
            "score": 2, 
            "selftext": "edit: apologies for the stream of consciousness that follows, it's not the most well formatted post I've ever written\n\n------  \n\nSo, I recognise that I may be a little spoiled here, but I've mostly worked in languages that really only have one or maybe two competing string types.  One thing that drives me completely bonkers and keeps pushing me away from C++ projects, is the incredible length of time I spend debugging and converting everyone else's preferred string type between each other. \n\nSorry I wish I had any specific examples to share, I really am hoping that empathetically this is a common knowledge and daily normality kind of thing and it's not just me. \n\nI remember dealing with converting a multitude of different string types when messing with lua parsing, sending and receiving curl payloads, json and xml parsing, and combined with some boost powered networking library; it drove me completely mad.  I remember spending 95% of my time debugging and writing conversion code to deal with feeding things their preferred string types. \n\nWith the news C++17 being officially approved and all that, got me thinking about dusting off an IDE of some kind, and after opening it a flood of memories came flying back to me about my time in the trenches with strings.. \n\nSo what's the way that a seasoned veteran tends to deal with stuff like this?  \n\nBare in mind, I come from the web, strings are part and parcel with my day to day, but my biggest issues with strings always revolve around UTF-*/ANSI encoding issues and not much else haha \n\n\nthanks for hearing me out\n\n\ncheers!", 
            "subreddit": "cpp", 
            "title": "Best way to deal with the seemingly endless amount of string formats", 
            "url": "https://www.reddit.com/r/cpp/comments/6yowaj/best_way_to_deal_with_the_seemingly_endless/"
        }, 
        {
            "author": "gtano", 
            "created_utc": 1504805819.0, 
            "domain": "hackernoon.com", 
            "id": "6yori5", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6yori5/7_quick_tips_for_java_programmers_starting_c/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "7 Quick Tips for Java Programmers Starting C++ - buckaroo.pm", 
            "url": "https://hackernoon.com/7-quick-tips-for-java-programmers-starting-c-67103c8f3bd1"
        }, 
        {
            "author": "JonKalb", 
            "created_utc": 1504800417.0, 
            "domain": "cppcon.org", 
            "id": "6yo69h", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6yo69h/cppcon_matt_godbolts_closing_plenary/", 
            "score": 23, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon: Matt Godbolt's Closing Plenary", 
            "url": "https://cppcon.org/2017-plenary-announced-godbolt/"
        }, 
        {
            "author": "Nation_State_Tractor", 
            "created_utc": 1504777601.0, 
            "domain": "self.cpp", 
            "id": "6ym76n", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6ym76n/identical_alias_template_redefinition_clang/", 
            "score": 4, 
            "selftext": "Suppose I have the following *contrived* code.\n\nid_map.h:\n\n    // pretend a header guard exists\n    \n    #include <map>\n    \n    template <typename T>\n    using IDMap = std::map<int, T>;\n\nid_map_example.cpp:\n\n    #include <iostream>\n    #include <string>\n    #include \"id_map.h\"\n    \n    // oops, we accidentally redefine the\n    // alias template here\n    \n    template <typename T>\n    using IDMap = std::map<int, T>;\n\n    int main(void)\n    {\n      IDMap<std::string> names;\n      \n      // MSVC throws compile error on this \n      // next statement about 'names' being \n      // an undeclared identifier.\n      names.insert({5, \"John\"});\n      std::cout << names[5] << \"\\n\";\n      return 0;\n    }\n\nClang (3.9.0 using the clang-cl driver, at least) compiles and runs this without issue. If I remove one of the alias template definitions, MSVC also compiles it and it runs fine.\n\nInterestingly, if I brace-initialize the names variable (`IDMap<std::string> names{};`), the problem disappears, too.\n\nI have not tested this in VC++ 2017 yet nor newer versions of Clang (or gcc), and I'm currently writing this on a phone and won't be able to do so until hours from now, but it seems that even if this is not allowed by the standard (I don't know if it is or not for sure), VC++ 2015 at least has a bug related to the error given -- unless this is invoking undefined behavior.\n\nI'll try to see what results occur in Compiler Explorer later, but I wanted to bring this up here to hopefully get a definitive response as to what's happening and which compiler is \"correct\" in this case.", 
            "subreddit": "cpp", 
            "title": "Identical alias template redefinition: Clang allows it, VC++ 2015 breaks hard. Which one has the bug?", 
            "url": "https://www.reddit.com/r/cpp/comments/6ym76n/identical_alias_template_redefinition_clang/"
        }, 
        {
            "author": "syaghmour", 
            "created_utc": 1504740739.0, 
            "domain": "herbsutter.com", 
            "id": "6yjerb", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 97, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6yjerb/c17_is_formally_approved/", 
            "score": 369, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++17 is formally approved", 
            "url": "https://herbsutter.com/2017/09/06/c17-is-formally-approved/"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1504731508.0, 
            "domain": "doar-e.github.io", 
            "id": "6yih6o", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6yih6o/binary_rewriting_with_syzygy_pt_i/", 
            "score": 1, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Binary rewriting with syzygy, Pt. I", 
            "url": "https://doar-e.github.io/blog/2017/08/05/binary-rewriting-with-syzygy/"
        }, 
        {
            "author": "arokux", 
            "created_utc": 1504730841.0, 
            "domain": "self.cpp", 
            "id": "6yieke", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 23, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6yieke/hard_core_refresher_for_c/", 
            "score": 27, 
            "selftext": "I was programming C++ for quite some years before I switched to MATLAB. Now I want to have a C++-oriented job, so I need to prepare for the tricky interviews at at least mid-dev level. What would be the best way to refresh my knowledge? I would like to have something interactive, not just a book. Thanks!", 
            "subreddit": "cpp", 
            "title": "Hard core refresher for C++", 
            "url": "https://www.reddit.com/r/cpp/comments/6yieke/hard_core_refresher_for_c/"
        }, 
        {
            "author": "daithibowzy", 
            "created_utc": 1504712813.0, 
            "domain": "self.cpp", 
            "id": "6ygf9z", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 32, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6ygf9z/transitioning_from_visual_studio_to_xcode/", 
            "score": 5, 
            "selftext": "Hi guys,\n\nI'm an audio DSP developer and I've started a new job where they use Xcode. I'm finding it very frustrating to use Xcode after being so used to Visual Studio. Are there any transition guides I can read or videos I can watch that would help? ", 
            "subreddit": "cpp", 
            "title": "Transitioning from Visual Studio to Xcode", 
            "url": "https://www.reddit.com/r/cpp/comments/6ygf9z/transitioning_from_visual_studio_to_xcode/"
        }, 
        {
            "author": "hmich", 
            "created_utc": 1504679303.0, 
            "domain": "alexpolt.github.io", 
            "id": "6ydxya", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 34, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6ydxya/the_great_type_loophole/", 
            "score": 101, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "The Great Type Loophole", 
            "url": "http://alexpolt.github.io/type-loophole.html"
        }, 
        {
            "author": "t_hunger", 
            "created_utc": 1504618551.0, 
            "domain": "blog.qt.io", 
            "id": "6y809w", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 33, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6y809w/qt_creator_440_released_qt_blog/", 
            "score": 99, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Qt Creator 4.4.0 released - Qt Blog", 
            "url": "https://blog.qt.io/blog/2017/09/05/qt-creator-4-4-0-released"
        }, 
        {
            "author": "hgjsusla", 
            "created_utc": 1504617953.0, 
            "domain": "self.cpp", 
            "id": "6y7y7m", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 46, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6y7y7m/help_me_choose_a_naming_convention_for_a_new/", 
            "score": 5, 
            "selftext": "I'm starting a new project but I'm already stuck on the naming convention. Every other language I've worked with people use the standard one, but in C++ people just make up their own. Even in \"Modern C++\" typically PascalCase is used for types. What's up with that? Makes everything look very inconsistent. In C at least people use lower_snake_case for types, why not so in C++?", 
            "subreddit": "cpp", 
            "title": "Help me choose a naming convention for a new project", 
            "url": "https://www.reddit.com/r/cpp/comments/6y7y7m/help_me_choose_a_naming_convention_for_a_new/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1504606968.0, 
            "domain": "nickdesaulniers.github.io", 
            "id": "6y735d", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 23, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6y735d/gcc_vs_llvm_q3_2017_active_developer_counts/", 
            "score": 19, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "GCC vs LLVM Q3 2017: Active Developer Counts", 
            "url": "https://nickdesaulniers.github.io/blog/2017/09/05/gcc-vs-llvm-q3-2017-commit-rates-and-active-developer-counts/"
        }, 
        {
            "author": "drodri", 
            "created_utc": 1504558451.0, 
            "domain": "akrzemi1.wordpress.com", 
            "id": "6y33wg", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6y33wg/using_error_codes_effectively/", 
            "score": 74, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Using error codes effectively", 
            "url": "https://akrzemi1.wordpress.com/2017/09/04/using-error-codes-effectively/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1504547642.0, 
            "domain": "videocortex.io", 
            "id": "6y1xjf", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6y1xjf/the_main_course/", 
            "score": 1, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "The main() Course", 
            "url": "http://videocortex.io/2017/main-course/"
        }, 
        {
            "author": "Som1Lse", 
            "created_utc": 1504541426.0, 
            "domain": "self.cpp", 
            "id": "6y18ss", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6y18ss/templated_rvalue_reference_parameters/", 
            "score": 5, 
            "selftext": "Edit: Doesn't work. See [this comment](https://www.reddit.com/r/cpp/comments/6y18ss/templated_rvalue_reference_parameters/dmjywat/).\n\nAs you already might know, the obvious solution (`template <typename T> void f(T&& t)`) isn't a solution since `t` is a forwarding reference and will actually also bind to lvalues.\n\nThe way I've been doing it, and seen other people do it, is with a `std::enable_if` check that it is, in fact, not an lvalue reference (`template <typename T,std::enable_if_t<!std::is_lvalue_reference<T>::value,int> = 0> void f(T&& t);`). It is also the way [Howard Hinnant suggests on Stack Overflow](https://stackoverflow.com/questions/7863603/how-to-make-template-rvalue-reference-parameter-only-bind-to-rvalue-reference).\n\nRecently I discovered a third way of doing it, by using an identity alias template: `template <typename T> type_t = T; template <typename T> void f(type_t<T>&& t);`. Since the parameter type isn't exactly `T&&` it isn't a forwarding reference, but `T` can still be deduced, due to the alias template not containing any scope resolution operator (`::`).\n\nIt seems to me the third option is better, unless it is buggy in some way I am not aware of (the worst I can come up with is the user can still pass an lvalue reference as a template parameter), so I am wondering if someone here knows something I don't, or if this actually is a better way to do it.", 
            "subreddit": "cpp", 
            "title": "Templated rvalue reference parameters", 
            "url": "https://www.reddit.com/r/cpp/comments/6y18ss/templated_rvalue_reference_parameters/"
        }, 
        {
            "author": "Z01dbrg", 
            "created_utc": 1504533425.0, 
            "domain": "self.cpp", 
            "id": "6y0gbc", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 42, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6y0gbc/was_stdvoid_t_named_wrong/", 
            "score": 0, 
            "selftext": "I mean I know it is supposed to be used only by \"experts\" but void_t is totally undescriptive of what it does.\n\nI know now it is too late to change it, but I wonder if people here would prefer:\n\nstd::is_valid_expr/ std::is_valid_expr_v\n\nstd::is_valid/std::is_valid_v\n...\n\n\nAgain this is not a big deal since 99% of the C++ developers will never write it (intentionally :) )in their code, more of theoretical discussion than a real defect rant...\n", 
            "subreddit": "cpp", 
            "title": "Was std::void_t named \"wrong\"?", 
            "url": "https://www.reddit.com/r/cpp/comments/6y0gbc/was_stdvoid_t_named_wrong/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1504522035.0, 
            "domain": "blog.tartanllama.xyz", 
            "id": "6xzmjn", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xzmjn/learning_c/", 
            "score": 45, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Learning C++", 
            "url": "https://blog.tartanllama.xyz/learning-cpp/"
        }, 
        {
            "author": "TheElectricFire7", 
            "created_utc": 1504507550.0, 
            "domain": "youtube.com", 
            "id": "6xyqbz", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xyqbz/probably_the_best_cpp_tutorial_series_on_youtube/", 
            "score": 154, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Probably the best CPP tutorial series on YouTube, but very few subscribers.", 
            "url": "https://www.youtube.com/channel/UCQ-W1KE9EYfdxhL6S4twUNw"
        }, 
        {
            "author": "pdbatwork", 
            "created_utc": 1504506791.0, 
            "domain": "bfilipek.com", 
            "id": "6xyoje", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xyoje/c17_in_details_standard_library_utilities/", 
            "score": 10, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++17 in details: Standard Library Utilities", 
            "url": "http://www.bfilipek.com/2017/09/cpp17-details-utils.html"
        }, 
        {
            "author": "sphere991", 
            "created_utc": 1504483311.0, 
            "domain": "medium.com", 
            "id": "6xws43", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xws43/value_categories_in_c17/", 
            "score": 93, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Value Categories in C++17", 
            "url": "https://medium.com/@barryrevzin/value-categories-in-c-17-f56ae54bccbe"
        }, 
        {
            "author": "atarp", 
            "created_utc": 1504465257.0, 
            "domain": "self.cpp", 
            "id": "6xv1nx", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xv1nx/can_you_use_operator_new_to_work_around_strict/", 
            "score": 7, 
            "selftext": "Assuming we have some buffer of bytes (from the network card for example) that we want to reinterpret as a stream of messages and avoid any memory copying. Is the below code a valid work around the strict aliasing undefined behaviour issue?\n\n    template<class Msg>\n    void parseMsg(char *& data, size_t len, Callback & callback){\n        Msg * msgPtr = new(data) Msg;\n        callback(static_cast<const Msg>(*msgPtr));\n    }", 
            "subreddit": "cpp", 
            "title": "Can you use operator new to work around strict aliasing rules?", 
            "url": "https://www.reddit.com/r/cpp/comments/6xv1nx/can_you_use_operator_new_to_work_around_strict/"
        }, 
        {
            "author": "blojayble", 
            "created_utc": 1504459220.0, 
            "domain": "nibblestew.blogspot.com", 
            "id": "6xufn1", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 44, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xufn1/comparing_c_and_c_usage_and_performance_with_a/", 
            "score": 56, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Comparing C and C++ usage and performance with a real world project", 
            "url": "http://nibblestew.blogspot.com/2017/09/comparing-c-and-c-usage-and-performance.html"
        }, 
        {
            "author": "onqtam", 
            "created_utc": 1504455893.0, 
            "domain": "onqtam.com", 
            "id": "6xu32v", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xu32v/simple_c_reflection_with_cmake/", 
            "score": 28, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Simple C++ reflection with CMake", 
            "url": "http://onqtam.com/programming/2017-09-02-simple-cpp-reflection-with-cmake/"
        }, 
        {
            "author": "meetingcpp", 
            "created_utc": 1504441035.0, 
            "domain": "meetingcpp.com", 
            "id": "6xstn7", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xstn7/c_user_group_meetings_in_september_2017/", 
            "score": 18, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++ User Group Meetings in September 2017", 
            "url": "http://meetingcpp.com/index.php/newsreader/items/c-user-group-meetings-in-september-2017.html"
        }, 
        {
            "author": "JonKalb", 
            "created_utc": 1504282146.0, 
            "domain": "cppcon.org", 
            "id": "6xfiv2", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xfiv2/cppcon_herb_sutter_to_tell_us_more_about/", 
            "score": 71, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon: Herb Sutter to tell us more about Metaclasses", 
            "url": "https://cppcon.org/2017-plenary-announced-sutter/"
        }, 
        {
            "author": "blojayble", 
            "created_utc": 1504274833.0, 
            "domain": "gcc.godbolt.org", 
            "id": "6xeqr3", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 124, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xeqr3/compiler_undefined_behavior_calls_nevercalled/", 
            "score": 129, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Compiler undefined behavior: calls never-called function", 
            "url": "https://gcc.godbolt.org/#%7B%22version%22%3A3%2C%22filterAsm%22%3A%7B%22labels%22%3Atrue%2C%22directives%22%3Atrue%2C%22commentOnly%22%3Atrue%7D%2C%22compilers%22%3A%5B%7B%22sourcez%22%3A%22MQSwdgxgNgrgJgUwAQB4IGcAucogEYB8AUEZgJ4AOCiAZkuJkgBQBUAYjJJiAPZgCUTfgG4SWAIbcISDl15gkAER6iiEqfTCMAogCdx6BAEEoUIUgDeRJEl0JMMXQvRksCALZMARLvdIAtLp0APReIkQAviQAbjwgcEgAcgjRCLoAwuKm1OZWNspIALxIegbGpsI2kSQMSO7i4LnWtvaOCspCohFAA%3D%3D%22%2C%22compiler%22%3A%22%2Fopt%2Fclang%2Bllvm-3.4.1-x86_64-unknown-ubuntu12.04%2Fbin%2Fclang%2B%2B%22%2C%22options%22%3A%22-Os%20-std%3Dc%2B%2B11%20-Wall%22%7D%5D%7D"
        }, 
        {
            "author": "aymar_fisherman", 
            "created_utc": 1504267939.0, 
            "domain": "github.com", 
            "id": "6xe43u", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xe43u/i_made_public_my_thread_pool_library_using_boost/", 
            "score": 2, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "I made public my Thread Pool library using boost function/bind/thread. Feel free to use - and contribute ;) -", 
            "url": "https://github.com/aymarfisherman/thread_pool"
        }, 
        {
            "author": "Davidbrcz", 
            "created_utc": 1504267032.0, 
            "domain": "twitter.com", 
            "id": "6xe1oi", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xe1oi/define_val_auto_const_yesno/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "define val auto const : yes/no ?", 
            "url": "https://twitter.com/Davidbrcz/status/903584672508239872"
        }, 
        {
            "author": "stanislavb", 
            "created_utc": 1504254545.0, 
            "domain": "cpp.libhunt.com", 
            "id": "6xd8fb", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xd8fb/awesome_c_weekly_issue_64/", 
            "score": 16, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Awesome C++ Weekly - Issue 64", 
            "url": "https://cpp.libhunt.com/newsletter/64"
        }, 
        {
            "author": "tallassrob", 
            "created_utc": 1504233822.0, 
            "domain": "cppcast.com", 
            "id": "6xbrlo", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6xbrlo/cppcast_volta_and_cuda_c_with_olivier_giroux/", 
            "score": 24, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCast: Volta and Cuda C++ with Olivier Giroux", 
            "url": "http://cppcast.com/2017/09/olivier-giroux/"
        }
    ], 
    "subreddit_creation_utc": 1211871110.0, 
    "subscribers": 55053, 
    "title": "C++", 
    "title_word_count_occurrences": {
        " c ": 1, 
        "amazon": 1, 
        "android": 1, 
        "c#": 1, 
        "c++": 74, 
        "docker": 1, 
        "gcc": 3, 
        "ios": 1, 
        "java": 3, 
        "javascript": 1, 
        "linux": 4, 
        "python": 1, 
        "windows": 1
    }, 
    "top_score_submissions": [
        {
            "author": "syaghmour", 
            "created_utc": 1504740739.0, 
            "domain": "herbsutter.com", 
            "id": "6yjerb", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 97, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6yjerb/c17_is_formally_approved/", 
            "score": 369, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++17 is formally approved", 
            "url": "https://herbsutter.com/2017/09/06/c17-is-formally-approved/"
        }, 
        {
            "author": "tallassrob", 
            "created_utc": 1506387727.0, 
            "domain": "cs.columbia.edu", 
            "id": "72gxkw", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 23, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72gxkw/bjarne_stroustrup_awarded_2017_faraday_medal/", 
            "score": 307, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Bjarne Stroustrup awarded 2017 Faraday Medal", 
            "url": "https://www.cs.columbia.edu/2017/bjarne-stroustrup-awarded-2017-faraday-medal/"
        }, 
        {
            "author": "kirbyfan64sos", 
            "created_utc": 1504810993.0, 
            "domain": "releases.llvm.org", 
            "id": "6ypbwy", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 49, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/6ypbwy/clang_50_released/", 
            "score": 221, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Clang 5.0 released!", 
            "url": "http://releases.llvm.org/5.0.0/tools/clang/docs/ReleaseNotes.html"
        }, 
        {
            "author": "syaghmour", 
            "created_utc": 1506466071.0, 
            "domain": "youtube.com", 
            "id": "72o44u", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/fX2W3nNjJIo?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/fX2W3nNjJIo/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Bjarne Stroustrup \u201cLearning and Teaching Modern C++\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 50, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/72o44u/cppcon_2017_bjarne_stroustrup_learning_and/", 
            "score": 196, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Bjarne Stroustrup \u201cLearning and Teaching Modern C++\u201d", 
            "url": "https://www.youtube.com/watch?v=fX2W3nNjJIo"
        }, 
        {
            "author": "Maslo59", 
            "created_utc": 1505408382.0, 
            "domain": "bitbashing.io", 
            "id": "703k9k", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 116, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/703k9k/stdvisit_is_everything_wrong_with_modern_c/", 
            "score": 188, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "std::visit is everything wrong with modern C++", 
            "url": "https://bitbashing.io/std-visit.html"
        }
    ], 
    "total_submissions": 152, 
    "utc_of_data_collection_completion": "2017-10-17 18:44:06", 
    "utc_of_data_collection_start": "2017-10-17 18:44:04"
}