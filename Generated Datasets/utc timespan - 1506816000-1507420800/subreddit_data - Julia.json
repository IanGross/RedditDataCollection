{
    "active_user_count": 14, 
    "advertiser_category": null, 
    "audience_target": "programming", 
    "avg_comment_num_per_submission": 3, 
    "avg_submission_score": 13, 
    "collection_range_end_unix_timestamp": 1507420800, 
    "collection_range_end_utc": "2017-10-08 00:00:00", 
    "collection_range_start_unix_timestamp": 1506816000, 
    "collection_range_start_utc": "2017-10-01 00:00:00", 
    "description": "_______________________________________________________________________________\nJulia is a high-level, high-performance dynamic programming language for technical computing, with syntax that is familiar to users of other technical computing environments. \n_______________________________________________________________________________\n[julia] (http://julialang.org/) | [source] (https://github.com/JuliaLang/julia) | [downloads] (http://julialang.org/downloads/) | [docs] (http://docs.julialang.org) | [blog] (http://julialang.org/blog/) | [rss] (http://feeds.feedburner.com/JuliaLang)\n\n[community] (http://julialang.org/community/) | [learning](http://julialang.org/learning/) | [teaching] (http://julialang.org/teaching/) | [publications] (http://julialang.org/publications/)", 
    "display_name": "Julia", 
    "domain_occurrences": {
        "i.redd.it": 1, 
        "self.Julia": 1
    }, 
    "id": "2qps0", 
    "num_external_website_posts": 1, 
    "num_text_posts": 1, 
    "public_description": "Julia is a high-level, high-performance dynamic programming language for technical computing, with syntax that is familiar to users of other technical computing environments.", 
    "submissions": [
        {
            "author": "xiaodai", 
            "created_utc": 1506985461.0, 
            "domain": "i.redd.it", 
            "id": "73wgvm", 
            "is_reddit_media_domain": true, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/Julia/comments/73wgvm/intro_to_julia_sydneys_2nd_ever_julia_meetup/", 
            "score": 14, 
            "selftext": "", 
            "subreddit": "Julia", 
            "title": "Intro to Julia - Sydney's 2nd ever Julia meetup", 
            "url": "https://i.redd.it/ql1hkt4xzhpz.png"
        }, 
        {
            "author": "notthemessiah", 
            "created_utc": 1506974258.0, 
            "domain": "self.Julia", 
            "id": "73v9ak", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/Julia/comments/73v9ak/one_ergonomic_advantage_of_singledispatch_over/", 
            "score": 13, 
            "selftext": "Generally, multiple dispatch is overall superior to single dispatch, but if I'm writing Python in an editor or console with some form of completion, I can easily discover what methods are associated with an object by simply typing \".\" and the tab completion dialogue pops up. If I wanted to accomplish something similar in Julia I would have to find the type of the object (via *typeof*) and then find what methods dispatch to it (via *methodswith*), and then evaluate it. E.G:\n\npython:\n\n    foo.<tab>bar\n\njulia:\n\n    methodswith(typeof(foo))<enter>\n    foo.bar\n\nMost of this could easily be alleviated with editor/IDE support in some manner or the other, but that leaves us with the question of how?\n\nAs for now, I've got the following in my .juliarc, but I'd like broader solutions across the Julia ecosystem. Any ideas?\n\n    mwto(x) = methodswith(typeof(x))", 
            "subreddit": "Julia", 
            "title": "One (ergonomic) advantage of single-dispatch over multiple dispatch", 
            "url": "https://www.reddit.com/r/Julia/comments/73v9ak/one_ergonomic_advantage_of_singledispatch_over/"
        }
    ], 
    "subreddit_creation_utc": 1229041966.0, 
    "subscribers": 3557, 
    "title": "The Julia Language Subreddit", 
    "title_word_count_occurrences": {
        "julia": 1
    }, 
    "top_score_submissions": [
        {
            "author": "xiaodai", 
            "created_utc": 1506985461.0, 
            "domain": "i.redd.it", 
            "id": "73wgvm", 
            "is_reddit_media_domain": true, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/Julia/comments/73wgvm/intro_to_julia_sydneys_2nd_ever_julia_meetup/", 
            "score": 14, 
            "selftext": "", 
            "subreddit": "Julia", 
            "title": "Intro to Julia - Sydney's 2nd ever Julia meetup", 
            "url": "https://i.redd.it/ql1hkt4xzhpz.png"
        }, 
        {
            "author": "notthemessiah", 
            "created_utc": 1506974258.0, 
            "domain": "self.Julia", 
            "id": "73v9ak", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/Julia/comments/73v9ak/one_ergonomic_advantage_of_singledispatch_over/", 
            "score": 13, 
            "selftext": "Generally, multiple dispatch is overall superior to single dispatch, but if I'm writing Python in an editor or console with some form of completion, I can easily discover what methods are associated with an object by simply typing \".\" and the tab completion dialogue pops up. If I wanted to accomplish something similar in Julia I would have to find the type of the object (via *typeof*) and then find what methods dispatch to it (via *methodswith*), and then evaluate it. E.G:\n\npython:\n\n    foo.<tab>bar\n\njulia:\n\n    methodswith(typeof(foo))<enter>\n    foo.bar\n\nMost of this could easily be alleviated with editor/IDE support in some manner or the other, but that leaves us with the question of how?\n\nAs for now, I've got the following in my .juliarc, but I'd like broader solutions across the Julia ecosystem. Any ideas?\n\n    mwto(x) = methodswith(typeof(x))", 
            "subreddit": "Julia", 
            "title": "One (ergonomic) advantage of single-dispatch over multiple dispatch", 
            "url": "https://www.reddit.com/r/Julia/comments/73v9ak/one_ergonomic_advantage_of_singledispatch_over/"
        }
    ], 
    "total_submissions": 2, 
    "utc_of_data_collection_start": "2017-10-16 18:37:01"
}