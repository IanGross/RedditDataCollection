{
    "active_user_count": 34, 
    "advertiser_category": null, 
    "audience_target": "programming", 
    "avg_comment_num_per_submission": 7, 
    "avg_submission_score": 15, 
    "collection_range_end_unix_timestamp": 1507420800, 
    "collection_range_end_utc": "2017-10-08 00:00:00", 
    "collection_range_start_unix_timestamp": 1506816000, 
    "collection_range_start_utc": "2017-10-01 00:00:00", 
    "description": "**A subreddit for the Lisp family of programming languages**.\n\n**Other Lisp related subreddits**:\n\n* [/r/scheme](http://www.reddit.com/r/scheme)\n* [/r/clojure](http://www.reddit.com/r/clojure)\n* [/r/racket](http://www.reddit.com/r/racket)\n* [/r/common_lisp](http://www.reddit.com/r/common_lisp)\n* [/r/lisp_ja](http://www.reddit.com/r/lisp_ja) (Japanese)\n* [/r/dylanlang](http://www.reddit.com/r/dylanlang)\n* [/r/emacs](http://www.reddit.com/r/emacs)\n* [/r/learnlisp](http://www.reddit.com/r/learnlisp)\n* [/r/shenlanguage](http://www.reddit.com/r/shenlanguage/)\n* [/r/lispmachine](http://www.reddit.com/r/lispmachine/)\n* [/r/stumpwm](http://www.reddit.com/r/stumpwm/)\n* [(r (apply #'+ subreddits))](http://www.reddit.com/r/lisp+common_lisp+scheme+racket+clojure+lisp_ja+emacs+learnlisp+dylanlang+shenlanguage+lispmachine+stumpwm)\n\n**Language References**\n \n * **Common Lisp**\n  * [Common Lisp Hyperspec](http://www.lispworks.com/documentation/HyperSpec/Front/Contents.htm)\n  * [Common Lisp UltraSpec](http://phoe.tymoon.eu/clus) (work-in-progress)\n  * [Common Lisp Spec (pdf)](http://cvberry.com/tech_writings/notes/common_lisp_standard_draft.html)\n  * Common Lisp Object System Meta-Object Protocol: [vanilla-html](http://metamodular.com/CLOS-MOP/), [HTML5/mobile](https://clos-mop.hexstreamsoft.com/)\n  * [Common Lisp Quick Reference](http://clqr.boundp.org)\n  * [Common Lisp Type Hierarchy](https://docs.google.com/document/pub?id=1SYSr0KE8iyv61srv6AMm-YRr-O6zM7Oi6CLSJgZc9yc&pli=1) [(alt w/mop)](http://sellout.github.io/media/CL-type-hierarchy.png)\n\n * **Scheme**\n  * [r^7 rs](http://www.r7rs.org/)\n  * [r^6 rs](http://www.r6rs.org/)\n\n**Tools**\n\n* [Quicklisp](http://www.quicklisp.org/) (CL Library manager)\n* [Portacle](https://shinmera.github.io/portacle/) (Portable CL environment)\n* [Roswell](https://github.com/roswell/roswell/) (CL Environment Setup Utility)\n* IDEs for Common Lisp\n * [SLIME](http://common-lisp.net/project/slime/) (GNU Emacs)\n * [SLIMV](http://www.vim.org/scripts/script.php?script_id=2531) (Vim)\n * [Vlime](https://github.com/l04m33/vlime) (Vim)\n * [Atom-Slime](https://atom.io/packages/atom-slime) (Atom)\n\n\n**Tutorials/FAQs**\n\n* [Articulate Common Lisp, how to write Common Lisp today](http://articulate-lisp.com)\n* [(Common) Lisp the Language ](http://lisp-lang.org/) (Advocacy, getting started, tutorials, wiki)\n* [Zach Beane: Where to get help with Common Lisp](http://xach.livejournal.com/325276.html)\n* [Lisp Style Guide Norvig/Pitman](http://www.cs.northwestern.edu/academics/courses/325/readings/luv-slides.pdf) (PDF)\n* [Nikodemus' CL FAQ](http://random-state.net/files/nikodemus-cl-faq.html)\n\n**Useful Lisp resources**:\n\n* [Planet Lisp](http://planet.lisp.org/) (meta-blog)\n* [Planet Scheme](http://scheme.dk/planet/) (meta-blog)\n* [Lisp Forum](http://www.lispforum.com/)\n* [Cliki](http://www.cliki.net/index) (library reference)\n* [Common-Lisp.net](http://common-lisp.net/) (project hosting, mailing lists)\n* [State of the CL Ecosystem 2015](http://borretti.me/article/common-lisp-sotu-2015) (library recommendations)\n* [Awesome CL](https://codyreichert.github.io/awesome-cl/) (library recommendations)\n* [comp.lang.lisp](http://groups.google.com/forum/#!forum/comp.lang.lisp) (usenet group)\n* [Common Lisp Professionals Mailing List](https://mailman.common-lisp.net/listinfo/pro)\n* [Lisp Jobs](http://lispjobs.wordpress.com)\n* [Common Lisp, Wikipedia](https://en.wikipedia.org/wiki/Common_Lisp)\n* [Association of Lisp Users](https://web.archive.org/web/20160827235937/http://alu.org/alu/home) [**archive**]\n* [Stackoverflow Lisp questions](http://stackoverflow.com/questions/tagged/lisp), [Common Lisp](http://stackoverflow.com/questions/tagged/common-lisp), [Scheme](https://stackoverflow.com/questions/tagged/scheme)\n* [Code Review](https://codereview.stackexchange.com/questions/tagged/lisp+or+scheme+or+common-lisp) (Lisp, CL, Scheme)\n* [Rosetta Code, Common Lisp](http://rosettacode.org/wiki/Category:Common_Lisp)\n* [Mailing Lists](https://mailman.common-lisp.net/listinfo), [more](https://common-lisp.net/independent-lists/)\n* [Twitter #lisp](https://twitter.com/search?q=%23lisp)\n* [ECL Quarterly](https://common-lisp.net/project/ecl/tag/quarterly.html)\n\n**Search Engines**\n\n* [Quickdocs Library Search and Documentation](http://quickdocs.org/) \n* [L1sp redirect service](http://l1sp.org/html/)\n* [Lisp Doc/book search](http://lispdoc.com/)\n\n**Free Lisp Books / Papers**\n\n* [Practical Common Lisp](http://www.gigamonkeys.com/book/)\n* [On Lisp](http://www.paulgraham.com/onlisp.html)\n* [Common Lisp: A Gentle Introduction to Symbolic Computation](http://www.cs.cmu.edu/~dst/LispBook/)\n* [Common Lisp The Language, 2nd Edition](http://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html) (Pre ANSI Common Lisp)\n* [The Common Lisp Cookbook 2017 \n](https://lispcookbook.github.io/cl-cookbook/) ([Original 2007](http://cl-cookbook.sourceforge.net))\n* [Structure and Interpretation of Computer Programs](http://mitpress.mit.edu/sicp/full-text/book/book.html), [[HTML5/EPUB3]](https://sarabander.github.io/sicp/) (Scheme)\n* [Lisp Outside the Box](http://nicklevine.org/lisp-book/) (unfinished)\n* [Common Lisp: An Interactive Approach](https://www.cse.buffalo.edu/~shapiro/Commonlisp/) (1992)\n\n**Implementations** \n\n* *CL Open Source*\n * [ABCL](http://common-lisp.net/project/armedbear/) (for JVM)\n * [CCL](http://ccl.clozure.com/)\n * [CLISP](http://www.clisp.org/)\n * [CMUCL](http://cmucl.org/), [mirror](https://gitlab.common-lisp.net/cmucl/cmucl/wikis/home) (*nix)\n * [ECL](https://common-lisp.net/project/ecl/)\n * [GCL](http://www.gnu.org/software/gcl/)\n * [SBCL](http://www.sbcl.org/)\n* *CL Commercial*\n * [Allegro CL](http://www.franz.com/products/allegro-common-lisp/)\n * [LispWorks](http://www.lispworks.com/)\n * [mocl](https://wukix.com/mocl) for OSX, iOS and Android\n * [Open Genera](http://www.symbolics-dks.com/)\n * [Scieneer CL](http://www.scieneer.com/scl/)\n* *CL Developmental/Historical*\n * [Clasp](https://github.com/drmeister/clasp) (llvm)\n * [Corman Lisp](https://github.com/sharplispers/cormanlisp) (MS-Windows)\n * [Eclipse Common Lisp](https://github.com/blakemcbride/eclipse-lisp)\n * [JSCL](https://github.com/jscl-project/jscl) (javascript)\n * [Mezzano](https://github.com/froggey/Mezzano) (Lisp OS)\n * [MKCL](http://common-lisp.net/project/mkcl/) (fork of ECL)\n * [SICL](https://github.com/robert-strandh/SICL) (modular)\n * [WCL](http://pgc.com/commonlisp/) (embeddable)\n* *Scheme*\n * [Chicken](https://www.call-cc.org/)\n * [Gambit](http://gambitscheme.org/wiki/index.php/Main_Page)\n * [Guile](https://www.gnu.org/software/guile/)\n * [Kawa](https://www.gnu.org/software/kawa/)\n * [Racket](http://www.racket-lang.org/)\n* *Non-CL/Scheme*\n * [Clojure](https://clojure.org/)\n * [NewLisp](http://www.newlisp.org/)\n * [PicoLisp](http://www.picolisp.com/)\n * [uLisp](http://www.ulisp.com/) (Arduino)\n\n**Events**\n\n* [10th European Lisp Symposium, 3-4 April 2017, VUB - Vrije Universiteit Brussel, Belgium](http://www.european-lisp-symposium.org/)\n* [International Lisp Conference](http://international-lisp-conference.org/)\n", 
    "display_name": "lisp", 
    "domain_occurrences": {
        "blog.teknik.io": 1, 
        "clojurecademy.com": 1, 
        "cs.umd.edu": 1, 
        "cse.buffalo.edu": 1, 
        "github.com": 1, 
        "self.lisp": 6, 
        "youtu.be": 1, 
        "youtube.com": 1
    }, 
    "id": "2qh35", 
    "num_external_website_posts": 7, 
    "num_text_posts": 6, 
    "public_description": "A subreddit for the Lisp family of programming languages.", 
    "submissions": [
        {
            "author": "interrelated", 
            "created_utc": 1507415330.0, 
            "domain": "cs.umd.edu", 
            "id": "74xygc", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74xygc/tutorial_on_good_lisp_programming_style_1993/", 
            "score": 16, 
            "selftext": "", 
            "subreddit": "lisp", 
            "title": "Tutorial on Good Lisp Programming Style (1993) Peter Norvig [pdf]", 
            "url": "https://www.cs.umd.edu/~nau/cmsc421/norvig-lisp-style.pdf"
        }, 
        {
            "author": "interrelated", 
            "created_utc": 1507409044.0, 
            "domain": "cse.buffalo.edu", 
            "id": "74xcx2", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74xcx2/common_lisp_an_interactive_approach_pdf_via/", 
            "score": 15, 
            "selftext": "", 
            "subreddit": "lisp", 
            "title": "Common Lisp: An Interactive Approach [pdf] (via https://news.ycombinator.com/item?id=15421392)", 
            "url": "https://www.cse.buffalo.edu/~shapiro/Commonlisp/commonLisp.pdf"
        }, 
        {
            "author": "omul_masina", 
            "created_utc": 1507398108.0, 
            "domain": "self.lisp", 
            "id": "74w9nl", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74w9nl/setf_clisp_confused_about_it/", 
            "score": 3, 
            "selftext": "Hello.\n\nI just started learning common lisp and I am using CLISP as a compiler. I've learned how to set values to symbols using SET/SETQ. I get the difference between SET and it SETQ. However, SETF makes no sense to me. It seems like it does the same thing as SET. I searched on the internet for more information, but I couldn't find anything useful. I would appreciate any help. Thanks.", 
            "subreddit": "lisp", 
            "title": "SETF (CLISP) - confused about it", 
            "url": "https://www.reddit.com/r/lisp/comments/74w9nl/setf_clisp_confused_about_it/"
        }, 
        {
            "author": "NeoMarxismIsEvil", 
            "created_utc": 1507366498.0, 
            "domain": "self.lisp", 
            "id": "74tty4", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 30, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74tty4/why_common_lisp_instead_of_scheme_or_a_dialect/", 
            "score": 12, 
            "selftext": "Sorry if people ask this all the time.\n\nGoing through differences listed on Wikipedia, scheme dialects seem more elegant.", 
            "subreddit": "lisp", 
            "title": "Why Common Lisp instead of Scheme (or a dialect)?", 
            "url": "https://www.reddit.com/r/lisp/comments/74tty4/why_common_lisp_instead_of_scheme_or_a_dialect/"
        }, 
        {
            "author": "agumonkey", 
            "created_utc": 1507328624.0, 
            "domain": "github.com", 
            "id": "74r21l", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74r21l/next_list_based_efficiency_oriented_browser/", 
            "score": 6, 
            "selftext": "", 
            "subreddit": "lisp", 
            "title": "nEXT - List based, efficiency oriented browser", 
            "url": "https://github.com/nEXT-Browser/nEXT"
        }, 
        {
            "author": "jmercouris", 
            "created_utc": 1507307523.0, 
            "domain": "self.lisp", 
            "id": "74orqg", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74orqg/next_browser_ver_003_with_binary/", 
            "score": 30, 
            "selftext": "Hello everyone, I'm happy to tell you that nEXT browser version 0.03 has arrived (with precompiled binary for Mac OS)!\n\nhttps://github.com/nEXT-Browser/nEXT\n\n\nManual:\nhttps://github.com/nEXT-Browser/nEXT/blob/master/documents/MANUAL.org\n\n\nChangelog:\nhttps://github.com/nEXT-Browser/nEXT/tree/master/next#003\n\n\nSummary:\n\n\n1. A binary is available for Mac OS here: https://github.com/nEXT-Browser/nEXT/releases/download/0.03/next.dmg\n2. Ability to kill buffers\n3. Performance / Code improvements\n\n\nIf you want to support the project, please leave a star on GitHub, or share the project, thank you!\n", 
            "subreddit": "lisp", 
            "title": "nEXT Browser ver. 0.03! With Binary!", 
            "url": "https://www.reddit.com/r/lisp/comments/74orqg/next_browser_ver_003_with_binary/"
        }, 
        {
            "author": "thblt", 
            "created_utc": 1507225952.0, 
            "domain": "self.lisp", 
            "id": "74ho82", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74ho82/boring_beginner_problem_help_me_choose_a_lisp/", 
            "score": 17, 
            "selftext": "Hi,\n\nI've been using Emacs and teaching myself its Lisp dialect for some time now, and, well, I've discovered that Lisp is really great and would like to start writing standalone programs in some Lisp language.  After a few hours of research, I've come to the conclusion that I have absolutely no idea where to start, and of course, I'm going to ask the obvious, but slightly aggravating, beginner question: which dialect/implementation should I use?\n\nOk, I have a project in mind and a few personal preferences.  The first thing I'd like to write in (non-Emacs) Lisp is a reference/bibliography manager (\"to rule them all\"), which is roughly [outlined here](https://github.com/thblt/tkacz).  It doesn't require much in terms of UI, since I'm thinking of it as only a CLI \"server\" with detached clients, so there's no need for shiny gtk/qt bindings.  But I do care a lot about portability, and if possible the ability to generate standalone binaries would be nice.  Embeddability in Android/iOS apps would be a big, big, big plus (what good is a personal library if you can't carry it around?)  I have a background in Haskell, hence a slight preference for Lisp-1, although I've actually never used an actual Lisp-1 dialect (except for five minutes on the Chez Scheme REPL).   \n\nWhat I've gathered so far is:\n\n - **Standard** Scheme is minimal, elegant and beautiful, but implementations tend to be subtly incompatible, the state of libraries/extensions is not so great and portability depends on the implementation. Also, it's a Lisp-1.\n\n - **Common Lisp** is the hardened industry standard, powerful, with a ton and a half libraries available, and although being full of hacks and small quirks (unquote), it is extremely expressive and powerful.  Seems to be in all aspects the very opposite of Scheme, but I'm not sure.\n\n - **Clojure** is a powerful, widely used, Lisp-1 running on the JVM.  For that reason, I have doubt about portability to iOS specifically. \n\n - **Racket** is the new kid of the block (from seven years, IIRC),  which built up from Scheme and ended up  design a wide variety of related languages.  To be honest, on paper it's my favorite: an (optionally) strongly typed Lisp-1 sounds like  a dream, but, well, I've never used it.  But I really *love* strong typing. Also, standalone binaries and a seemingly huge standard library.\n\nI don't ask anyone to make the hard choice for me, of course, but advices, (strong) opinions, pointers to resources for the undecided and refutations of my uninformed judgments would all be greatly appreciated.  I understand this kind of \"choose for me please\" questions is way too common on Reddit and everywhere, and I sincerely hope I'm not infuriating anyone, but I'm not sure I'd be able to navigate the wide seas of Lisp dialects and implementations without some help.\n\nThanks a lot, in advance! ", 
            "subreddit": "lisp", 
            "title": "[boring beginner problem] Help me choose a Lisp! (please?)", 
            "url": "https://www.reddit.com/r/lisp/comments/74ho82/boring_beginner_problem_help_me_choose_a_lisp/"
        }, 
        {
            "author": "flaming_bird", 
            "created_utc": 1507214686.0, 
            "domain": "blog.teknik.io", 
            "id": "74geie", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74geie/with_processes_utility_macro_for_lisp_flavored/", 
            "score": 10, 
            "selftext": "", 
            "subreddit": "lisp", 
            "title": "WITH_PROCESSES - utility macro for Lisp Flavored Erlang", 
            "url": "https://blog.teknik.io/phoe/p/393"
        }, 
        {
            "author": "Baggers_", 
            "created_utc": 1507152294.0, 
            "domain": "youtu.be", 
            "id": "74bc55", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Baggers", 
                    "author_url": "https://www.youtube.com/user/CBaggers", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/zfTkvLOqzkg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/zfTkvLOqzkg/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "Pushing Pixels with Lisp - Episode 19 - Play around with Physics", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74bc55/pushing_pixels_with_lisp_episode_19_play_around/", 
            "score": 24, 
            "selftext": "", 
            "subreddit": "lisp", 
            "title": "Pushing Pixels with Lisp - Episode 19 - Play around with Physics", 
            "url": "https://youtu.be/zfTkvLOqzkg"
        }, 
        {
            "author": "ertucetin", 
            "created_utc": 1507051395.0, 
            "domain": "clojurecademy.com", 
            "id": "741wrz", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/741wrz/clojurecademy_learn_clojure_interactivelyhandson/", 
            "score": 11, 
            "selftext": "", 
            "subreddit": "lisp", 
            "title": "Clojurecademy: Learn Clojure Interactively(Hands-On)", 
            "url": "https://clojurecademy.com"
        }, 
        {
            "author": "Baggers_", 
            "created_utc": 1507016611.0, 
            "domain": "self.lisp", 
            "id": "73yydt", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/73yydt/pushing_pixels_with_lisp_episode_19_trying_out/", 
            "score": 26, 
            "selftext": "This week will be a bit more of a hangout than usual as I'm not sure if this will work or not. I've been making [some bindings](https://github.com/cbaggers/issac) over the excellent [Newton Dynamics](http://newtondynamics.com) physics engine and I'd like to take an hour or two to noodle around with it and see if we can get some stuff working. \n\nBecause of the nature of this one it may not be a full two hours, but do come join us over at https://www.twitch.tv/baggers___ tomorrow (Wednesday) at 18:00 UTC, which is: 11:00 PDT 14:00 EDT 18:00 UTC 19:00 BST 20:00 CEST 21:00 EAT and the recording will be on youtube afterwards.", 
            "subreddit": "lisp", 
            "title": "Pushing Pixels with Lisp - Episode 19 - Trying out some Physics Bindings - Streaming on Twitch Wednesday 6pm UTC", 
            "url": "https://www.reddit.com/r/lisp/comments/73yydt/pushing_pixels_with_lisp_episode_19_trying_out/"
        }, 
        {
            "author": "ac1235", 
            "created_utc": 1506941272.0, 
            "domain": "self.lisp", 
            "id": "73s1d2", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/73s1d2/i_wrote_a_blog_post_about_lisp/", 
            "score": 11, 
            "selftext": "Today I wrote a blog post about Lisp,\nwhere I try to show what sets Lisps apart from the rest of the programming world.\n\nIt was the first post in my blog about programming languages\nand I really wish to hear some opinions from experienced Lispers :)\n\n\nhttps://ac1235.github.io/Lisp", 
            "subreddit": "lisp", 
            "title": "I wrote a blog post about Lisp.", 
            "url": "https://www.reddit.com/r/lisp/comments/73s1d2/i_wrote_a_blog_post_about_lisp/"
        }, 
        {
            "author": "eejp", 
            "created_utc": 1506858439.0, 
            "domain": "youtube.com", 
            "id": "73l73d", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Strange Loop", 
                    "author_url": "https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/T-BZvBWiamU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/T-BZvBWiamU/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "\"The Lux Programming Language\" by Eduardo Julian", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/73l73d/the_lux_programming_language_strange_loop_2017/", 
            "score": 22, 
            "selftext": "", 
            "subreddit": "lisp", 
            "title": "The Lux Programming Language [Strange Loop 2017]", 
            "url": "https://www.youtube.com/watch?v=T-BZvBWiamU"
        }
    ], 
    "subreddit_creation_utc": 1201271833.0, 
    "subscribers": 12063, 
    "title": "Lisp", 
    "title_word_count_occurrences": {
        "lisp": 9
    }, 
    "top_score_submissions": [
        {
            "author": "jmercouris", 
            "created_utc": 1507307523.0, 
            "domain": "self.lisp", 
            "id": "74orqg", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74orqg/next_browser_ver_003_with_binary/", 
            "score": 30, 
            "selftext": "Hello everyone, I'm happy to tell you that nEXT browser version 0.03 has arrived (with precompiled binary for Mac OS)!\n\nhttps://github.com/nEXT-Browser/nEXT\n\n\nManual:\nhttps://github.com/nEXT-Browser/nEXT/blob/master/documents/MANUAL.org\n\n\nChangelog:\nhttps://github.com/nEXT-Browser/nEXT/tree/master/next#003\n\n\nSummary:\n\n\n1. A binary is available for Mac OS here: https://github.com/nEXT-Browser/nEXT/releases/download/0.03/next.dmg\n2. Ability to kill buffers\n3. Performance / Code improvements\n\n\nIf you want to support the project, please leave a star on GitHub, or share the project, thank you!\n", 
            "subreddit": "lisp", 
            "title": "nEXT Browser ver. 0.03! With Binary!", 
            "url": "https://www.reddit.com/r/lisp/comments/74orqg/next_browser_ver_003_with_binary/"
        }, 
        {
            "author": "Baggers_", 
            "created_utc": 1507016611.0, 
            "domain": "self.lisp", 
            "id": "73yydt", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/73yydt/pushing_pixels_with_lisp_episode_19_trying_out/", 
            "score": 26, 
            "selftext": "This week will be a bit more of a hangout than usual as I'm not sure if this will work or not. I've been making [some bindings](https://github.com/cbaggers/issac) over the excellent [Newton Dynamics](http://newtondynamics.com) physics engine and I'd like to take an hour or two to noodle around with it and see if we can get some stuff working. \n\nBecause of the nature of this one it may not be a full two hours, but do come join us over at https://www.twitch.tv/baggers___ tomorrow (Wednesday) at 18:00 UTC, which is: 11:00 PDT 14:00 EDT 18:00 UTC 19:00 BST 20:00 CEST 21:00 EAT and the recording will be on youtube afterwards.", 
            "subreddit": "lisp", 
            "title": "Pushing Pixels with Lisp - Episode 19 - Trying out some Physics Bindings - Streaming on Twitch Wednesday 6pm UTC", 
            "url": "https://www.reddit.com/r/lisp/comments/73yydt/pushing_pixels_with_lisp_episode_19_trying_out/"
        }, 
        {
            "author": "Baggers_", 
            "created_utc": 1507152294.0, 
            "domain": "youtu.be", 
            "id": "74bc55", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Baggers", 
                    "author_url": "https://www.youtube.com/user/CBaggers", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/zfTkvLOqzkg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/zfTkvLOqzkg/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "Pushing Pixels with Lisp - Episode 19 - Play around with Physics", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74bc55/pushing_pixels_with_lisp_episode_19_play_around/", 
            "score": 24, 
            "selftext": "", 
            "subreddit": "lisp", 
            "title": "Pushing Pixels with Lisp - Episode 19 - Play around with Physics", 
            "url": "https://youtu.be/zfTkvLOqzkg"
        }, 
        {
            "author": "eejp", 
            "created_utc": 1506858439.0, 
            "domain": "youtube.com", 
            "id": "73l73d", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Strange Loop", 
                    "author_url": "https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/T-BZvBWiamU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/T-BZvBWiamU/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "\"The Lux Programming Language\" by Eduardo Julian", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/73l73d/the_lux_programming_language_strange_loop_2017/", 
            "score": 22, 
            "selftext": "", 
            "subreddit": "lisp", 
            "title": "The Lux Programming Language [Strange Loop 2017]", 
            "url": "https://www.youtube.com/watch?v=T-BZvBWiamU"
        }, 
        {
            "author": "thblt", 
            "created_utc": 1507225952.0, 
            "domain": "self.lisp", 
            "id": "74ho82", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/lisp/comments/74ho82/boring_beginner_problem_help_me_choose_a_lisp/", 
            "score": 17, 
            "selftext": "Hi,\n\nI've been using Emacs and teaching myself its Lisp dialect for some time now, and, well, I've discovered that Lisp is really great and would like to start writing standalone programs in some Lisp language.  After a few hours of research, I've come to the conclusion that I have absolutely no idea where to start, and of course, I'm going to ask the obvious, but slightly aggravating, beginner question: which dialect/implementation should I use?\n\nOk, I have a project in mind and a few personal preferences.  The first thing I'd like to write in (non-Emacs) Lisp is a reference/bibliography manager (\"to rule them all\"), which is roughly [outlined here](https://github.com/thblt/tkacz).  It doesn't require much in terms of UI, since I'm thinking of it as only a CLI \"server\" with detached clients, so there's no need for shiny gtk/qt bindings.  But I do care a lot about portability, and if possible the ability to generate standalone binaries would be nice.  Embeddability in Android/iOS apps would be a big, big, big plus (what good is a personal library if you can't carry it around?)  I have a background in Haskell, hence a slight preference for Lisp-1, although I've actually never used an actual Lisp-1 dialect (except for five minutes on the Chez Scheme REPL).   \n\nWhat I've gathered so far is:\n\n - **Standard** Scheme is minimal, elegant and beautiful, but implementations tend to be subtly incompatible, the state of libraries/extensions is not so great and portability depends on the implementation. Also, it's a Lisp-1.\n\n - **Common Lisp** is the hardened industry standard, powerful, with a ton and a half libraries available, and although being full of hacks and small quirks (unquote), it is extremely expressive and powerful.  Seems to be in all aspects the very opposite of Scheme, but I'm not sure.\n\n - **Clojure** is a powerful, widely used, Lisp-1 running on the JVM.  For that reason, I have doubt about portability to iOS specifically. \n\n - **Racket** is the new kid of the block (from seven years, IIRC),  which built up from Scheme and ended up  design a wide variety of related languages.  To be honest, on paper it's my favorite: an (optionally) strongly typed Lisp-1 sounds like  a dream, but, well, I've never used it.  But I really *love* strong typing. Also, standalone binaries and a seemingly huge standard library.\n\nI don't ask anyone to make the hard choice for me, of course, but advices, (strong) opinions, pointers to resources for the undecided and refutations of my uninformed judgments would all be greatly appreciated.  I understand this kind of \"choose for me please\" questions is way too common on Reddit and everywhere, and I sincerely hope I'm not infuriating anyone, but I'm not sure I'd be able to navigate the wide seas of Lisp dialects and implementations without some help.\n\nThanks a lot, in advance! ", 
            "subreddit": "lisp", 
            "title": "[boring beginner problem] Help me choose a Lisp! (please?)", 
            "url": "https://www.reddit.com/r/lisp/comments/74ho82/boring_beginner_problem_help_me_choose_a_lisp/"
        }
    ], 
    "total_submissions": 13, 
    "utc_of_data_collection_completion": "2017-10-17 18:48:37", 
    "utc_of_data_collection_start": "2017-10-17 18:48:36"
}