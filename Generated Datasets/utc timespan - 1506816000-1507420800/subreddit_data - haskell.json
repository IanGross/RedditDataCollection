{
    "active_user_count": 248, 
    "advertiser_category": null, 
    "audience_target": "programming,technology", 
    "avg_comment_num_per_submission": 11, 
    "avg_submission_score": 26, 
    "collection_range_end_unix_timestamp": 1507420800, 
    "collection_range_end_utc": "2017-10-08 00:00:00", 
    "collection_range_start_unix_timestamp": 1506816000, 
    "collection_range_start_utc": "2017-10-01 00:00:00", 
    "description": "**The [Haskell programming language](http://haskell.org) community.**\n\nDaily news and info about all things **Haskell** related: practical stuff, theory, types, libraries, jobs, patches, releases, events and conferences and more...\n\n * **[Download Haskell](http://hackage.haskell.org/platform)**\n * **[Try Haskell](http://tryhaskell.org/) in your browser**\n * **[status.haskell.org](http://status.haskell.org)**\n\n-----------------------------------------------------\n\n * **[Community Guidelines](http://www.reddit.com/r/haskell/comments/j8df0/moderator_guidelines_thems_the_rules/)**\n\n-----------------------------------------------------\n\n**Other community locations:**\n\n * [#haskell IRC channel](http://haskell.org/haskellwiki/IRC_channel)\n * [Planet Haskell](http://planet.haskell.org/) blog aggregator\n * [Follow Haskell on Twitter](http://twitter.com/reddit_haskell)\n * [Haskell mailing lists](http://www.haskell.org/haskellwiki/Mailing_lists)\n * [NYC Haskell Meetup videos] (https://www.youtube.com/channel/UCzNYHE7Kj6pBqq5h8LG9Zcg)\n * [Haskell Discord Channel](https://discord.gg/FvT2Y5N)\n\n**Professional resources:**\n\n * [The Industrial Haskell Group](http://industry.haskell.org/)\n * [Hire Haskell programmers](http://www.haskellers.com/)\n * [The Commercial Users of FP](http://cufp.org)\n\n**Learning material:**\n\n * [Ask a question on Haskell Stack Overflow](http://stackoverflow.com/questions/tagged/haskell)\n * [Learn You a Haskell](http://learnyouahaskell.com/)\n * [Real World Haskell](http://book.realworldhaskell.org)\n * [School of Haskell](https://www.schoolofhaskell.com/)\n * [Haskell Wikibook](https://en.wikibooks.org/wiki/Haskell)\n\n**Haskell development:**\n\n * [Hackage: Haskell Libraries](http://hackage.haskell.org)\n * [New Haskell Project Ideas](http://www.reddit.com/r/haskell_proposals)\n\n**Other Subreddits:**\n\n * /r/haskellquestions\n * /r/haskelltil\n * /r/haskell_jp\n\n**Subreddit Stylesheet Source**\n\n * [subreddit theme](https://github.com/evanrelf/r-haskell-theme)\n", 
    "display_name": "haskell", 
    "domain_occurrences": {
        "adtmag.com": 1, 
        "atom.io": 1, 
        "bitemyapp.com": 1, 
        "blog.qfpl.io": 1, 
        "blog.ramdoot.in": 1, 
        "blogs.intevation.de": 1, 
        "corentindupont.info": 1, 
        "cpsdocs.dellemc.com": 1, 
        "frontsidethepodcast.simplecast.fm": 1, 
        "gist.github.com": 1, 
        "github.com": 5, 
        "haskellweekly.news": 1, 
        "mail.haskell.org": 2, 
        "reasonablypolymorphic.com": 1, 
        "self.haskell": 33, 
        "stackbuilders.com": 1, 
        "stackoverflow.com": 3, 
        "teh.id.au": 1, 
        "tweag.io": 1, 
        "yager.io": 1, 
        "youtu.be": 1, 
        "youtube.com": 3
    }, 
    "id": "2qh36", 
    "num_external_website_posts": 30, 
    "num_text_posts": 33, 
    "public_description": "", 
    "submissions": [
        {
            "author": "potomak", 
            "created_utc": 1507412761.0, 
            "domain": "github.com", 
            "id": "74xpiv", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 14, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74xpiv/a_tiny_ci_server_built_around_github_and_nix/", 
            "score": 56, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "A tiny CI server built around GitHub and Nix", 
            "url": "https://github.com/ocharles/micro-ci"
        }, 
        {
            "author": "isovector", 
            "created_utc": 1507353168.0, 
            "domain": "reasonablypolymorphic.com", 
            "id": "74t23t", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 29, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74t23t/classic_paper_review_bananas_lenses_envelopes_and/", 
            "score": 38, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Classic paper review: Bananas, Lenses, Envelopes and Barbed Wire", 
            "url": "http://reasonablypolymorphic.com/blog/recursion-schemes"
        }, 
        {
            "author": "notooth1", 
            "created_utc": 1507343099.0, 
            "domain": "self.haskell", 
            "id": "74sb6g", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74sb6g/how_to_deploy_helm_application_to_the_web/", 
            "score": 4, 
            "selftext": "Hi everyone,\n\nIs it possible to deploy a Helm application (like Flappy bird) to the web? Can anyone guide me how to do that?", 
            "subreddit": "haskell", 
            "title": "How to deploy Helm application to the web?", 
            "url": "https://www.reddit.com/r/haskell/comments/74sb6g/how_to_deploy_helm_application_to_the_web/"
        }, 
        {
            "author": "MagicMurderBagYT", 
            "created_utc": 1507337770.0, 
            "domain": "self.haskell", 
            "id": "74rvnx", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 56, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74rvnx/weekly_beginner_saturday_hask_anything_7/", 
            "score": 25, 
            "selftext": "If you have a question or would like to help, then feel free to participate. :)\n\nLast week: https://www.reddit.com/r/haskell/comments/73e5vn/weekly_beginner_saturday_hask_anything_6/", 
            "subreddit": "haskell", 
            "title": "[Weekly] Beginner Saturday: Hask Anything - #7", 
            "url": "https://www.reddit.com/r/haskell/comments/74rvnx/weekly_beginner_saturday_hask_anything_7/"
        }, 
        {
            "author": "edapa", 
            "created_utc": 1507329769.0, 
            "domain": "self.haskell", 
            "id": "74r611", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74r611/deriving_is_functions/", 
            "score": 13, 
            "selftext": "I often find myself wanting to test to see if something is one branch of a variant (usually when filtering a list), and end up rewriting functions of the form.\n\n    data Whatever = What | Ever\n\n    isWhat :: Whatever -> Bool\n    isWhat What = True\n    isWhat _ = False\n\nIt seems like this is a problem that other people would have, and I was wondering if anyone has a neat way to get these sorts of predicates without too much effort. I just banged together some template haskell to do it (https://gist.github.com/ethanpailes/dfc140d6a2a2ec3db56f5c3fd6e3fc20), but I want to know if there is a better way.", 
            "subreddit": "haskell", 
            "title": "Deriving is functions?", 
            "url": "https://www.reddit.com/r/haskell/comments/74r611/deriving_is_functions/"
        }, 
        {
            "author": "organonxii", 
            "created_utc": 1507329476.0, 
            "domain": "self.haskell", 
            "id": "74r544", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74r544/how_do_the_values_of_a_type_work_with_the/", 
            "score": 13, 
            "selftext": "Say I have a simply typed lambda calculus with two base types: Nat and Bool, containing the obvious constants.\n\nIf I write the function `(\u03bb (x : Nat) . True)`\n\nI have written something with the type `Nat -> Bool`. Isn't this the CH-equivalent to proving `a -> b` in natural deduction or the like? Something which is certainly not a valid theorem. Surely, having values belonging to types allows us to 'prove' that type whenever we want?\n\nObviously I'm wrong, but where is the gap in my understanding? Also, apologies if this isn't the most relevant subreddit, I wasn't sure where else to ask this. I am writing a type-checker for the STLC in Haskell, and this has confused me.", 
            "subreddit": "haskell", 
            "title": "How do the values of a type work with the Curry-Howard isomorphism?", 
            "url": "https://www.reddit.com/r/haskell/comments/74r544/how_do_the_values_of_a_type_work_with_the/"
        }, 
        {
            "author": "surelythisisnottaken", 
            "created_utc": 1507326366.0, 
            "domain": "self.haskell", 
            "id": "74qtvl", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74qtvl/yesod_backend_api_examples/", 
            "score": 16, 
            "selftext": "I want to create an API using Yesod. Are there any good examples somewhere that'll show me how I should use a database, how I should setup authentication&authorization of users, ++?", 
            "subreddit": "haskell", 
            "title": "Yesod backend API examples?", 
            "url": "https://www.reddit.com/r/haskell/comments/74qtvl/yesod_backend_api_examples/"
        }, 
        {
            "author": "taylorfausak", 
            "created_utc": 1507322930.0, 
            "domain": "atom.io", 
            "id": "74qgv9", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74qgv9/scry_an_atom_package_for_deemphasizing_qualified/", 
            "score": 16, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Scry, an Atom package for de-emphasizing qualified identifiers", 
            "url": "https://atom.io/packages/haskell-scry"
        }, 
        {
            "author": "DarkAlpha_Sete", 
            "created_utc": 1507321189.0, 
            "domain": "self.haskell", 
            "id": "74qa1a", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74qa1a/why_doesnt_this_code_return_anything_sorry_for/", 
            "score": 6, 
            "selftext": "I'm trying to learn Haskell by myself (unfortunately I have a C# background and I already notices that is affecting me) and I'm making some simple math functions.\n\nI already made the majority of them, but they work with 2 values (add x and y; subtract x from y).\nNow that I am implementing them to work in lists I'm stuck at the subtraction.\n\nI started with this code, but quickly notices that it only works with a list with 2 numbers.\n\n    sub :: [Float] -> Float\n    sub [] = 0\n    sub (x : xs) = subtract (head xs) x    \n\nAfter that I made a slight change:\n\n    sub :: [Float] -> Float\n    sub [] = 0\n    sub (x : xs) = sub (subtract (head xs) x : xs)\n\nNow it passes the remaining values to subtract when it makes the first operation (I think???).\n\nBut this doesn't return anything, when I run it I don't see anything happening, and I don't know how to make this work.\n\nThanks if someone wants to help me.", 
            "subreddit": "haskell", 
            "title": "Why doesn't this code return anything? (sorry for yet another noob post)", 
            "url": "https://www.reddit.com/r/haskell/comments/74qa1a/why_doesnt_this_code_return_anything_sorry_for/"
        }, 
        {
            "author": "ShrykeWindgrace", 
            "created_utc": 1507319338.0, 
            "domain": "self.haskell", 
            "id": "74q2v2", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74q2v2/coverage_report_libraries_that_support_stack/", 
            "score": 13, 
            "selftext": "I wonder if there are libraries for uploading coverage reports from `stack test --coverage` to CI services like [coveralls.io](http://coveralls.io) or [codecov.io](http://codecov.io).\n\nI found `hpc-coveralls` and `codecover-haskell`, but they both assume that we are using cabal and there are no options to specify where to look for reports to upload; I also found seemingly abandoned `stack-hpc-coveralls`, which was not updated for about a year (and it would not compile =) ). \n\nI'll be glad for any hints if there is a working solution somewhere=)", 
            "subreddit": "haskell", 
            "title": "Coverage report libraries that support `stack`", 
            "url": "https://www.reddit.com/r/haskell/comments/74q2v2/coverage_report_libraries_that_support_stack/"
        }, 
        {
            "author": "matan_tsuberi", 
            "created_utc": 1507313048.0, 
            "domain": "self.haskell", 
            "id": "74pe20", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 68, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74pe20/rethinking_os_design_in_a_functional_way/", 
            "score": 47, 
            "selftext": "I've always felt that the Unix way of OS design is complex and outdated. It gets the job done but it's not pretty:\n\n* the mutable file system creates tons of 'It works on my machine' configuration problems.\n* programs are just arbitrary binaries that do not allow any static analysis or restrictions.\n* too many concepts and moving parts (process hierarchy, environment variables, etc...).\n* multi user is mostly obsolete.\n* treating persistence as IO rather than just another level of caching in the memory pyramid.\n* not taking the internet into account from the very start.\n* more that I can't remember right now.\n\nAs arrogant functional programmers who think we can do everything better, forgetting anything you know about operating systems, especially the Unix tradition (this can be hard), how would you design a modern operating system based on pure functional programming?\n\nNote: I'm interested only in the interface exposed to userland, not in the implementation.", 
            "subreddit": "haskell", 
            "title": "Rethinking OS design in a functional way", 
            "url": "https://www.reddit.com/r/haskell/comments/74pe20/rethinking_os_design_in_a_functional_way/"
        }, 
        {
            "author": "Boykjie", 
            "created_utc": 1507309061.0, 
            "domain": "stackoverflow.com", 
            "id": "74oxsf", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 37, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74oxsf/stackoverflow_why_are_ghc_tuples_limited_to_size/", 
            "score": 41, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "StackOverflow: Why are GHC tuples limited to size 62?", 
            "url": "https://stackoverflow.com/questions/46412823/why-are-ghc-tuples-limited-to-size-62"
        }, 
        {
            "author": "Tehnix", 
            "created_utc": 1507304591.0, 
            "domain": "self.haskell", 
            "id": "74ofwp", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74ofwp/improving_the_atom_haskell_ide_setup_process/", 
            "score": 6, 
            "selftext": "I've been setting up a package [atom-haskell](https://github.com/Tehnix/atom-haskell) to simplify the process of setting up Haskell for Atom, and was wondering what my other fellow Atom Haskellers were using, or if they had any suggestions on the default configuration that should go with it?. \n\nCurrently it's quite biased (you can see it here https://github.com/Tehnix/atom-haskell/blob/master/lib/atom-haskell.js#L52). \n\nAnother shameful plug: if anyone is interested in helping add some Spacemacs-esque bindings to Atom, I have a repo [here](https://github.com/Tehnix/spaceatom-keybindings) for that. I switch regularly between Spacemacs, Vim and Atom, so it's nice to retain those as much as possible.", 
            "subreddit": "haskell", 
            "title": "Improving the Atom Haskell IDE setup process", 
            "url": "https://www.reddit.com/r/haskell/comments/74ofwp/improving_the_atom_haskell_ide_setup_process/"
        }, 
        {
            "author": "notooth1", 
            "created_utc": 1507304029.0, 
            "domain": "self.haskell", 
            "id": "74odpe", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74odpe/cannot_install_helm/", 
            "score": 5, 
            "selftext": "Hello,\n\nI got this error when installing helm. Can anyone help?\n\n      $ stack install helm\n      .\n      .\n          Linking /tmp/stack5174/cairo-0.13.3.1/.stack-work/dist/x86_64-linux-nopie/Cabal-1.24.2.0/setup/setup ...\n          Configuring cairo-0.13.3.1...\n          setup: The pkg-config package 'cairo' version >=1.2.0 is required but it could not be found.\n", 
            "subreddit": "haskell", 
            "title": "Cannot install helm", 
            "url": "https://www.reddit.com/r/haskell/comments/74odpe/cannot_install_helm/"
        }, 
        {
            "author": "0ldf4rt", 
            "created_utc": 1507298822.0, 
            "domain": "blogs.intevation.de", 
            "id": "74ntrf", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74ntrf/my_attempt_at_explaining_monads/", 
            "score": 13, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "My attempt at explaining monads", 
            "url": "http://blogs.intevation.de/wilde/haskell/monads/"
        }, 
        {
            "author": "bgamari", 
            "created_utc": 1507291616.0, 
            "domain": "github.com", 
            "id": "74n69z", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74n69z/ghc_proposal_deprecate_stm_invariants_mechanism/", 
            "score": 39, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "[ghc proposal] deprecate STM invariants mechanism", 
            "url": "https://github.com/bgamari/ghc-proposals/blob/deprecate-stm-invariants/proposals/0000-deprecate-stm-invariants.rst"
        }, 
        {
            "author": "mchaver", 
            "created_utc": 1507286642.0, 
            "domain": "self.haskell", 
            "id": "74mtk2", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74mtk2/type_level_programming_questions_hlist_to_an_int/", 
            "score": 11, 
            "selftext": "I am trying to build a simple library that automates the construction of a servant api. Given a list of types that have `ToJSON` and `FromJSON` instances, create a route for each type based on the type's string value and automate a server that looks like `return :<|> return ...` for each type.\n\nI have it working at the moment but it is not as automated as I would like. Right now it looks like this.\n\n    type TestAPI = InAndOutAPI '[Int,Text] [\"int\",\"text\"]\n    \n    server :: Server TestAPI\n    server = return :<|> return\n\nIdeally I could just do this by having the types turned into symbols, but I have not found a way to do that.\n\n    type TestAPI = InAndOutAPI '[Int,Text]\n\nThen have a mkServer function that takes the length of `'[Int,Text]` and make a `return :<|>` for each. If `'[Int,Text]` is stored as a HList then I could take the length, but I am not sure if is possible to go from the length of an HList to a value.\n\nhttps://github.com/plow-technologies/servant-in-and-out/blob/master/src/Servant/InAndOut.hs\n\nhttps://github.com/plow-technologies/servant-in-and-out/blob/master/app/Main.hs", 
            "subreddit": "haskell", 
            "title": "Type Level Programming Questions: HList to an Int and Type to Symbol?", 
            "url": "https://www.reddit.com/r/haskell/comments/74mtk2/type_level_programming_questions_hlist_to_an_int/"
        }, 
        {
            "author": "mankyKitty", 
            "created_utc": 1507284062.0, 
            "domain": "blog.qfpl.io", 
            "id": "74mnnk", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74mnnk/growing_a_date_picker_in_reflex_part_1/", 
            "score": 31, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Growing a date picker in Reflex (Part 1)", 
            "url": "https://blog.qfpl.io/posts/reflex/widgets/growing-a-date-picker-1/"
        }, 
        {
            "author": "zoetebeer", 
            "created_utc": 1507282369.0, 
            "domain": "self.haskell", 
            "id": "74mjx4", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74mjx4/haskell_book_kindle_presentation/", 
            "score": 5, 
            "selftext": "I am really interested in buying Kindle Paperwhite as reading on my iPad hurts my eyes so bad. At the moment I am going through Haskell Book and I am interested if any of you tried it on Kindle?\n\nI have read FAQ from Haskell Book and they are not planning to provide a ePub version. \nI have tried converting the book to ePub but it is a mess after conversion.\n\nI know it is a little off topic question. I have no idea where else to ask this question. Thanks", 
            "subreddit": "haskell", 
            "title": "[Haskell Book] Kindle presentation", 
            "url": "https://www.reddit.com/r/haskell/comments/74mjx4/haskell_book_kindle_presentation/"
        }, 
        {
            "author": "arvindds", 
            "created_utc": 1507279931.0, 
            "domain": "blog.ramdoot.in", 
            "id": "74mepc", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74mepc/hi_all_i_am_maintaining_my_learning_diary_on_my/", 
            "score": 15, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Hi all, I am maintaining my learning diary on my blog. A couple of recent articles are my exploration (and experiences as a beginner) in Haskell. Thought of spreading the word here in the hopes of getting some advice / feedback / useful tips for the way forward in my journey of learning Haskell.", 
            "url": "https://blog.ramdoot.in/lambda/home"
        }, 
        {
            "author": "snoyjerk", 
            "created_utc": 1507272193.0, 
            "domain": "adtmag.com", 
            "id": "74ly6w", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74ly6w/code_quality_research_functional_languages/", 
            "score": 43, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Code Quality Research: Functional Languages Beating Procedural/Object-Oriented", 
            "url": "https://adtmag.com/articles/2017/10/03/acm-code-quality.aspx"
        }, 
        {
            "author": "ephrion", 
            "created_utc": 1507264141.0, 
            "domain": "bitemyapp.com", 
            "id": "74le3y", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74le3y/comparing_persistent_with_ecto_and_activerecord/", 
            "score": 30, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Comparing Persistent with Ecto and ActiveRecord", 
            "url": "http://bitemyapp.com/posts/2017-10-06-persistent-ecto-activerecord.html"
        }, 
        {
            "author": "mmaruseacph2", 
            "created_utc": 1507256353.0, 
            "domain": "mail.haskell.org", 
            "id": "74kr99", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74kr99/call_for_contributions_haskell_communities_and/", 
            "score": 24, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "[Call for Contributions] Haskell Communities and Activities Report, November 2017 edition (33rd edition)", 
            "url": "https://mail.haskell.org/pipermail/haskell-cafe/2017-October/127970.html"
        }, 
        {
            "author": "saxman666", 
            "created_utc": 1507243629.0, 
            "domain": "self.haskell", 
            "id": "74jlhn", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74jlhn/what_is_the_current_state_of_music_and_haskell/", 
            "score": 25, 
            "selftext": "I've been hearing a lot about the intersection of music and functional programming lately (Euterpea, FARM, etc.) and was wondering what else is out there. Computational musicology seems to the the main phrase and I'm interested in anything around it. What projects and tools do you know of that fit within the space?\n\nAny talks on the subject would be appreciated as well. ", 
            "subreddit": "haskell", 
            "title": "What is the current state of music and Haskell (and other FP languages)?", 
            "url": "https://www.reddit.com/r/haskell/comments/74jlhn/what_is_the_current_state_of_music_and_haskell/"
        }, 
        {
            "author": "gelisam", 
            "created_utc": 1507236536.0, 
            "domain": "frontsidethepodcast.simplecast.fm", 
            "id": "74iuuf", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74iuuf/julie_moronuki_on_the_frontside_podcast/", 
            "score": 23, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Julie Moronuki on The Frontside Podcast", 
            "url": "https://frontsidethepodcast.simplecast.fm/91ecc4ec"
        }, 
        {
            "author": "matan_tsuberi", 
            "created_utc": 1507233293.0, 
            "domain": "self.haskell", 
            "id": "74ii12", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 28, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74ii12/do_you_think_the_calculus_of_constructions_is_a/", 
            "score": 30, 
            "selftext": "I think Turing-Completeness is overrated and we should not allow 'fix' in the language but rather only at the top level (`realMain = fix main`, where main is Turing-incomplete).\n\nBut for the purposes of this discussion, consider we add 'fix' as an additional constructor to CoC.", 
            "subreddit": "haskell", 
            "title": "Do you think the Calculus of Constructions is a sufficient basis for all practically useful functional programming languages?", 
            "url": "https://www.reddit.com/r/haskell/comments/74ii12/do_you_think_the_calculus_of_constructions_is_a/"
        }, 
        {
            "author": "CheezIts_YAY", 
            "created_utc": 1507227907.0, 
            "domain": "self.haskell", 
            "id": "74hw7p", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 10, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74hw7p/cabal_requires_a_testmodule_option_for_detailed09/", 
            "score": 2, 
            "selftext": "Well, the title pretty much says it. I'm trying to make a `detailed-0.9` test suite in one of my projects. The .cabal file's `test` section looks like this:\n\n    test-suite draw-test\n      type:                detailed-0.9\n      hs-source-dirs:      test\n      test-module:         Spec.hs\n      build-depends:       base\n                         , draw\n      default-language:    Haskell2010\n\nand `stack ghci` exits with the message: `Unable to parse cabal file ~/projects/draw/draw.cabal: NoParse \"test-module\" 50`. I figured maybe I was trying to make my test suite based on an outdated Cabal specification, but then removing the `test-module` line causes this error:\n\n    Unable to parse cabal file ~/projects/draw/draw.cabal:\n    FromString \"The 'test-module' field is required for the\n    detailed-0.9 test suite type.\" (Just 47)`\n\nUm.... is this a known issue? I'm having a very hard time imagining this behavior is intended. The .cabal file parses fine if I just remove the test section.\n\nI have Cabal version 1.22.9, and I just updated Stack, and I'm on Ubuntu 16.10.", 
            "subreddit": "haskell", 
            "title": "Cabal Requires a `test-module` Option for `detailed-0.9`, but Fails to Parse if the Option is in the File. Help...?", 
            "url": "https://www.reddit.com/r/haskell/comments/74hw7p/cabal_requires_a_testmodule_option_for_detailed09/"
        }, 
        {
            "author": "scrive_com", 
            "created_utc": 1507219482.0, 
            "domain": "self.haskell", 
            "id": "74gxn5", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74gxn5/haskell_full_stack_developer_at_scrive/", 
            "score": 27, 
            "selftext": "Hi,\n\nWe have a \"full stack\" Haskell position that just opened up. See the official ad on StackOverflow for full details:\n\nhttps://stackoverflow.com/jobs/156727/haskell-full-stack-developer-scrive\n\nSeveral of us will be at HaskellX next week in London, where you can chat with us in person, otherwise just ask your questions here or via [e-mail](mailto://jonathan@scrive.com). Please apply directly on StackOverflow.", 
            "subreddit": "haskell", 
            "title": "Haskell Full Stack Developer at Scrive", 
            "url": "https://www.reddit.com/r/haskell/comments/74gxn5/haskell_full_stack_developer_at_scrive/"
        }, 
        {
            "author": "FunctorYogi", 
            "created_utc": 1507215874.0, 
            "domain": "self.haskell", 
            "id": "74gj52", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74gj52/whats_your_favorite_use_of_gadts/", 
            "score": 16, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "What's your favorite use of GADTs?", 
            "url": "https://www.reddit.com/r/haskell/comments/74gj52/whats_your_favorite_use_of_gadts/"
        }, 
        {
            "author": "jpvillaisaza", 
            "created_utc": 1507214474.0, 
            "domain": "stackbuilders.com", 
            "id": "74gdqm", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74gdqm/scalendar_a_time_management_library_implemented/", 
            "score": 27, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "scalendar: A time management library implemented in Haskell", 
            "url": "https://www.stackbuilders.com/news/scalendar-time-management-in-haskell"
        }, 
        {
            "author": "haskellweekly", 
            "created_utc": 1507214305.0, 
            "domain": "haskellweekly.news", 
            "id": "74gd4n", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74gd4n/issue_75_haskell_weekly/", 
            "score": 18, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Issue 75 :: Haskell Weekly", 
            "url": "https://haskellweekly.news/issues/75.html"
        }, 
        {
            "author": "andrewthad", 
            "created_utc": 1507210311.0, 
            "domain": "stackoverflow.com", 
            "id": "74fyma", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74fyma/why_are_ghc_sparks_fizzling/", 
            "score": 17, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Why are GHC Sparks Fizzling?", 
            "url": "https://stackoverflow.com/questions/46586941/why-are-ghc-sparks-fizzling"
        }, 
        {
            "author": "chak", 
            "created_utc": 1507208834.0, 
            "domain": "tweag.io", 
            "id": "74ftge", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74ftge/how_to_compose_streaming_programs/", 
            "score": 53, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "How to compose streaming programs", 
            "url": "http://www.tweag.io/posts/2017-10-05-streaming2.html"
        }, 
        {
            "author": "primitiveinds", 
            "created_utc": 1507193016.0, 
            "domain": "self.haskell", 
            "id": "74eopi", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74eopi/simple_and_wellwritten_libraries_for_studying/", 
            "score": 43, 
            "selftext": "I suppose this has been asked a thousand times already. I consider myself a beginner, but I am looking to expand my knowledge drastically over time. What libraries would you recommend diving into that are fairly simple to grasp - not necessarily small - as a companion to some courses (cis, NICTA) and books (Haskell Programming from First Principles)?\n\nP.S. when I say fairly simple, I mean not including a ton of advanced features such as Template Haskell, Lenses etc.", 
            "subreddit": "haskell", 
            "title": "Simple and well-written libraries for studying", 
            "url": "https://www.reddit.com/r/haskell/comments/74eopi/simple_and_wellwritten_libraries_for_studying/"
        }, 
        {
            "author": "vem_", 
            "created_utc": 1507170779.0, 
            "domain": "github.com", 
            "id": "74d4nu", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74d4nu/syntax_highlighting_for_ghci_configuration_files/", 
            "score": 19, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Syntax highlighting for .ghci configuration files", 
            "url": "https://github.com/vmchale/ghci-syntax"
        }, 
        {
            "author": "Riper_Snifle", 
            "created_utc": 1507160565.0, 
            "domain": "stackoverflow.com", 
            "id": "74c69g", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74c69g/is_it_possible_to_access_a_specific_piece_of_a/", 
            "score": 2, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Is it possible to access a specific piece of a custom data type in Haskell?", 
            "url": "https://stackoverflow.com/questions/46575744/is-it-possible-to-access-a-specific-piece-of-a-custom-data-type-in-haskell"
        }, 
        {
            "author": "Ford_O", 
            "created_utc": 1507142991.0, 
            "domain": "self.haskell", 
            "id": "74a9bg", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 8, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74a9bg/does_haskell_fuse_pattern_matching/", 
            "score": 12, 
            "selftext": "Lets take something simple, like `not . not == id`. It is easy to prove that on paper:\n\n    not . not\n\n    \\b -> not (not b)\n\n    \\b -> \n      let b' = case b of\n        True -> False\n        False -> True\n      in not b'\n\n    -- Here Comes The Trick --\n\n    \\b -> \n      let b' = case b of\n        True -> not False\n        False -> not True\n      in b'\n\n    \\b -> \n      let b' = case b of\n        True -> True\n        False -> False\n      in b'\n\n    -- Q.E.D. --\n\n    id : Bool -> Bool\n\nNow I am not entirely sure, how to apply this trick to any kind of recursive functions and whether it is all that useful, since in worst case scenario it duplicates the function N times, where N is number of branches. But it allows some neat things like fusing `take` and `drop` together.\n\nSo I was wondering\n\n* Does this optimization have a name?\n* Is GHC doing anything similar to this?\n* Does extension to lambda calculus, that would permit this optimization, exist?", 
            "subreddit": "haskell", 
            "title": "Does Haskell fuse pattern matching?", 
            "url": "https://www.reddit.com/r/haskell/comments/74a9bg/does_haskell_fuse_pattern_matching/"
        }, 
        {
            "author": "wowofbob", 
            "created_utc": 1507141867.0, 
            "domain": "self.haskell", 
            "id": "74a4rb", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74a4rb/io_threads_in_yesod_or_any_other_io_monad_in/", 
            "score": 4, 
            "selftext": "My question is not specified, so I'm posting it here.\n\nI have a two apps: one is written in C++, and another one is a Yesod server. Both can communicate through `protobuf`+`zmq`. C++ application periodically sends data to Yesod. I want to call a handler in Yesod when I get a message from C++. This handler must process data received and create a server event. Actually, I already have a functionality to create server event when I get data from user. But I also want to use it when I receive data from C++.\n\nI don't have much experience in Haskell with events and threads. So my native solution is to create a thread which periodically polls a socket. When it receives data, it calls, lets say, a function `F` with this data as argument. But, the problem is, this `F` is a Yesod monad action. And when I spawn a thread, I get a pure `IO` action (I mean, just `IO`, like `IO a`). I can run monadic actions inside it, but it will be a different context.\n\nIn fact, I can give a variable to this thread. When thread gets data from socket, it writes it to variable.\nBut I miss an event here. I can call `F` with data from variable somewhere later, but I want to call it exactly\nwhen data is received.\n\nIs there a name for this problem? Maybe I'm trying to create a bicycle.\n\nI don't know where to look for in order to solve it. I would appreciate some advice or links.\n\nThanks.", 
            "subreddit": "haskell", 
            "title": "IO threads in Yesod (or any other IO monad in which threads is spawned)", 
            "url": "https://www.reddit.com/r/haskell/comments/74a4rb/io_threads_in_yesod_or_any_other_io_monad_in/"
        }, 
        {
            "author": "IQue", 
            "created_utc": 1507138526.0, 
            "domain": "self.haskell", 
            "id": "749qwg", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/749qwg/haskell_exchange_in_london_is_next_week_join_for/", 
            "score": 23, 
            "selftext": "HaskellX is next week and we have two days of tons of talks and workshops lined up from excellent speakers from the whole community.\n\nYou can check out the whole program here:\n\n\nhttps://skillsmatter.com/conferences/8522-haskell-exchange-2017#program\n\nAnd as an extra incentive we want to give r/haskell 20% off the ticket price! Enter coupon code **HASKELLX17_SPECIAL_20_reddit** Edit: Coupon is valid Oct 7th and 8th.\n\nHope to see you there!", 
            "subreddit": "haskell", 
            "title": "Haskell eXchange in London is next week, join for two days of talks and workshops (20% discount code in text)", 
            "url": "https://www.reddit.com/r/haskell/comments/749qwg/haskell_exchange_in_london_is_next_week_join_for/"
        }, 
        {
            "author": "mightybyte", 
            "created_utc": 1507128770.0, 
            "domain": "youtube.com", 
            "id": "748n5v", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Compose Conference", 
                    "author_url": "https://www.youtube.com/channel/UC0pEknZxL7Q1j0Ok8qImWdQ", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/l7XuSuEe-Yg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/l7XuSuEe-Yg/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "Smart Contracts and Formal Verification with Z3 with Pact", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/748n5v/smart_contracts_and_formal_verification_with_z3/", 
            "score": 42, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Smart Contracts and Formal Verification with Z3 with Pact", 
            "url": "https://www.youtube.com/watch?v=l7XuSuEe-Yg"
        }, 
        {
            "author": "andrewthad", 
            "created_utc": 1507122300.0, 
            "domain": "self.haskell", 
            "id": "747zx1", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/747zx1/parallel_computation_in_st/", 
            "score": 20, 
            "selftext": "I cannot find anywhere this has been discussed before. Is there a way to do parallel programming inside `ST`. For example, if I wanted to implement an in-place version of parallel quicksort in haskell, I would like it to have the type signature:\n\n    inPlaceParallelQuicksort :: Ord a => MVector s a -> ST s ()\n\nTo my knowledge, we don't have any primitives that allow us to write this. Sparks (via `par`) only work in the normal immutable setting, and `forkIO` only runs in `IO`. I suppose that it's possible to unsafely embed `forkIO` in an `ST` computation. Has anyone done anything like this before? Links to old threads/questions would be appreciated too.", 
            "subreddit": "haskell", 
            "title": "Parallel computation in ST", 
            "url": "https://www.reddit.com/r/haskell/comments/747zx1/parallel_computation_in_st/"
        }, 
        {
            "author": "kaukau", 
            "created_utc": 1507063604.0, 
            "domain": "corentindupont.info", 
            "id": "743ajg", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/743ajg/nomyx_in_zurihac/", 
            "score": 12, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Nomyx in Zurihac", 
            "url": "http://www.corentindupont.info/blog/posts/Programming/2017-09-30-Zurihac.html"
        }, 
        {
            "author": "alan_zimm", 
            "created_utc": 1507062908.0, 
            "domain": "teh.id.au", 
            "id": "7437nj", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7437nj/announcing_hgrep/", 
            "score": 70, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Announcing hgrep", 
            "url": "http://teh.id.au/posts/2017/10/03/announcing-hgrep/index.html"
        }, 
        {
            "author": "m0d2", 
            "created_utc": 1507054967.0, 
            "domain": "self.haskell", 
            "id": "742b55", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 27, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/742b55/discrimination_package_sorts_in_linear_time_but/", 
            "score": 21, 
            "selftext": "Could someone explain how the [discrimination package](https://hackage.haskell.org/package/discrimination) sorts in `O(n)`? Does it really work better than say quicksort in practice?", 
            "subreddit": "haskell", 
            "title": "Discrimination package sorts in linear time, but how?", 
            "url": "https://www.reddit.com/r/haskell/comments/742b55/discrimination_package_sorts_in_linear_time_but/"
        }, 
        {
            "author": "wyager", 
            "created_utc": 1507036702.0, 
            "domain": "yager.io", 
            "id": "740bmt", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/740bmt/building_a_cpu_with_haskell_part_1/", 
            "score": 146, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Building a CPU with Haskell - Part 1", 
            "url": "http://yager.io/CPU/CPU1.html"
        }, 
        {
            "author": "JeffreyBenjaminBrown", 
            "created_utc": 1507002451.0, 
            "domain": "self.haskell", 
            "id": "73xzny", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73xzny/announce_digraphs_with_text_haskell_knowledge/", 
            "score": 26, 
            "selftext": "[Digraphs with Text](https://github.com/JeffreyBenjaminBrown/digraphs-with-text) is an open-source Haskell library for an exceptionally expressive kind of knowledge graph. It offers a UI, and a user-friendly DSL for entering and querying data. The README file offers details.\n\nThe tutorial is only 329 words long, and the codebase is under 900 lines (when you exclude blank lines, comments, imports, exports and tests). The [issue tracker](https://github.com/JeffreyBenjaminBrown/digraphs-with-text/issues) describes a few directions you might enjoy.\n", 
            "subreddit": "haskell", 
            "title": "[ANNOUNCE] Digraphs with Text: Haskell knowledge graph software, built for expressivity and simplicity", 
            "url": "https://www.reddit.com/r/haskell/comments/73xzny/announce_digraphs_with_text_haskell_knowledge/"
        }, 
        {
            "author": "dsfox", 
            "created_utc": 1506985895.0, 
            "domain": "self.haskell", 
            "id": "73wifk", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73wifk/ghcgenerics_seems_to_create_enormous_executable/", 
            "score": 36, 
            "selftext": "I just stripped all the Generic instances out of our GHCJS application, instead using custom deriveSerialize and deriveJSON functions, and the javascript executable size dropped from 52Mb to 36Mb.  Does anyone have any insight into what is going on here?  (I haven't been able to do any tests on ghc executable size.)", 
            "subreddit": "haskell", 
            "title": "GHC.Generics seems to create enormous executable bloat", 
            "url": "https://www.reddit.com/r/haskell/comments/73wifk/ghcgenerics_seems_to_create_enormous_executable/"
        }, 
        {
            "author": "yitz", 
            "created_utc": 1506980718.0, 
            "domain": "cpsdocs.dellemc.com", 
            "id": "73vzif", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73vzif/haskellpowered_dellemc_converged_platforms/", 
            "score": 17, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Haskell-powered DellEMC Converged Platforms Technical Resource site is now live", 
            "url": "https://cpsdocs.dellemc.com"
        }, 
        {
            "author": "Ahri", 
            "created_utc": 1506973478.0, 
            "domain": "self.haskell", 
            "id": "73v5z5", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73v5z5/learn_haskell_in_a_study_group_in_manchester_uk/", 
            "score": 12, 
            "selftext": "I'm trying to raise some interest in working through the [Haskell book](http://haskellbook.com/) in Manchester in the UK. I [wrote a quick blurb about what I'm trying to achieve](http://lazymanc.net/) and how I'd like to structure it, and am posting here simply to gain awareness - hopefully there are other interested newbies in Manchester that browse this subreddit!\n\nIf anyone has suggestions for other sensible places to seek study buddies, I welcome them!", 
            "subreddit": "haskell", 
            "title": "Learn Haskell in a study group in Manchester, UK", 
            "url": "https://www.reddit.com/r/haskell/comments/73v5z5/learn_haskell_in_a_study_group_in_manchester_uk/"
        }, 
        {
            "author": "CarlEdman", 
            "created_utc": 1506968749.0, 
            "domain": "self.haskell", 
            "id": "73umrw", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 7, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73umrw/another_parallelism_primitive_parseq/", 
            "score": 19, 
            "selftext": "I recently read a paper on (Lazy Tree Splitting|www.mpi-sws.org/~mrainey/papers/icfp10-lts.pdf) which suggested to me that we may need an additional parallelism primitive beyond `par` and `pseq` and which I'd dub `parseq`.\n\nSemantically, `parseq :: a -> b -> b` is identical to `par` and `pseq` (i.e., it always evaluates to its second argument).  Operationally, the RTS interprets `parseq` as either `pseq` or `par` depending on its state.  In particular, the RTS ought to select `par` when at the time of evaluation there are no (or only a few) sparks awaiting execution and to `seq` otherwise.  If the RTS was built without parallelism support, `parseq` of course always immediately short-circuits to `pseq`.\n\nWhat does this buy us?  For linear data-structures, like lists, not much (i.e., efficient parallelism will still require strategies or manual chunking).  For multiply-recursive data-structures, like trees, quite a lot!\n\nConsider a standard binary tree carrying data at the branches:\n\n    data Tree a = Branch (Tree a) a (Tree a) | Leaf\n\nFor such a Tree, I'd define a Foldable instance as:\n\n    instance Foldable Tree where\n      foldMap f Leaf = mempty\n      foldMap f (Branch lt e rt) = r `parseq` (l `pseq` (l `mappend` (f e) `mappend` r))\n        where\n          l = foldMap f lt\n          r = foldMap f rt\n\nThe operational effect on, e.g., a 16-thread machine would be to split the first 4 levels among all 16 threads and then proceed to process each sub-tree in a serial fashion.  If, for example, because the tree is unbalanced or the computational demands of various branches vary, some processors become available before the computation finishes, they will immediately be redeployed to help out with the outstanding computations.  In short, all processors remain fully employed while at the same time avoiding generating useless sparks.\n\nSelf-tuning parallelism for free!\n\nA few objections and responses:\n\n(1) You can already explicitly (directly or using strategies) split just the first four levels of the tree and then go sequential.  Indeed, but: (a) to do this expressly requires your code to know how many processors are available to pick the right level at which to go sequential, which complicates and clutters your code, (b) even if you do, your optimization will fail, if the RTS tries, e.g., to execute several different foldMaps at once, and (c) will not redeploy processors automatically if the workloads in the top-branches turns out to be unbalanced.\n\n(2) Can't you do this using the current primitives? Response: I don't think you can and would require you to write code which is not transparent to parallelism.  Also, the choice `parseq`'s choice between `par` and `seq` needs to have close to zero overhead (like a simple variable lookup in the RTS) for programmers to sprinkle `parseq`s throughout their code (almost all of which will presumably just turn out to be `seq`s).\n\n(3) Won't this slow down performance on very small trees?  Indeed, on a tree with only a handful of nodes, splitting the work between multiple processors is probably slower (due to overhead) than just running it sequentially on a single one.  But very small trees are going to be very fast either way.  As a library author, I'd be willing to incur a small speed penalty on small trees to give users a 8x or 16x speedup on larger trees for free.\n\nThoughts?", 
            "subreddit": "haskell", 
            "title": "Another Parallelism Primitive 'parseq'?", 
            "url": "https://www.reddit.com/r/haskell/comments/73umrw/another_parallelism_primitive_parseq/"
        }, 
        {
            "author": "PharaosEx", 
            "created_utc": 1506966108.0, 
            "domain": "self.haskell", 
            "id": "73uc6w", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73uc6w/two_little_question_about_the_types_of_folds/", 
            "score": 8, 
            "selftext": "Hello,\nI am currently reading \"Haskell from first principles\", and it's a really good book. I had no problems until I reached the chapter about folds, and I have still 2 questions about them.\n\n1.) Why do foldl and foldr behave the same if we use an associative operator like * or + and the same \"identity\" element (like zero or the empty list), for example: \n\nfoldl (+) 0 = foldr (+) 0\n\n2.) I don't understand how the type of the fold functions behave if we use functions that don't have exactly the same type as the type of the function in type signature of fold. A little example with foldr:\n\nfoldr (:) has the type \nFoldable t =>  [a] -> t a -> [a]\nI get why the the type has to be this way, no problem here.\n\nBut why does foldr(>) has the type \nFoldable t => Bool -> t Bool -> Bool\n\ninstead of:\n\nFoldable t => Bool -> t a -> Bool\n\nbecause the signature of (>) is \n\nOrd a => a -> a -> Bool\n\nedit: fixed the constraint in the signature of (>)\n", 
            "subreddit": "haskell", 
            "title": "Two little question about the types of folds", 
            "url": "https://www.reddit.com/r/haskell/comments/73uc6w/two_little_question_about_the_types_of_folds/"
        }, 
        {
            "author": "jeslg", 
            "created_utc": 1506959311.0, 
            "domain": "github.com", 
            "id": "73tlhs", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 15, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73tlhs/dont_fear_the_profunctor_optics/", 
            "score": 33, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Don't Fear the Profunctor Optics", 
            "url": "https://github.com/hablapps/DontFearTheProfunctorOptics"
        }, 
        {
            "author": "bgamari", 
            "created_utc": 1506954840.0, 
            "domain": "mail.haskell.org", 
            "id": "73t4dx", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73t4dx/announce_ghc_822_release_candidate_1/", 
            "score": 68, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "[ANNOUNCE] GHC 8.2.2 release candidate 1", 
            "url": "https://mail.haskell.org/pipermail/ghc-devs/2017-October/014777.html"
        }, 
        {
            "author": "grahamhutton", 
            "created_utc": 1506933174.0, 
            "domain": "self.haskell", 
            "id": "73rkoe", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73rkoe/journal_of_functional_programming_call_for_phd/", 
            "score": 11, 
            "selftext": "============================================================\n\nCALL FOR PHD ABSTRACTS\n\nJournal of Functional Programming\n\nDeadline: 31st October 2017\n\nhttp://tinyurl.com/jfp-phd-abstracts\n\n============================================================\n\nPREAMBLE:\n\nMany students complete PhDs in functional programming each\nyear.  As a service to the community, the Journal of Functional\nProgramming publishes the abstracts from PhD dissertations\ncompleted during the previous year.\n\nThe abstracts are made freely available on the JFP website,\ni.e. not behind any paywall.  They do not require any transfer\nof copyright, merely a license from the author.  A dissertation\nis eligible for inclusion if parts of it have or could have\nappeared in JFP, that is, if it is in the general area of\nfunctional programming.  The abstracts are not reviewed.\n\nPlease submit dissertation abstracts according to the instructions\nbelow.  We welcome submissions from both the PhD student and PhD\nadvisor/supervisor although we encourage them to coordinate.\n\n============================================================\n\nSUBMISSION:\n\nPlease submit the following information to Graham Hutton\n<graham.hutton@nottingham.ac.uk> by 31st October 2017.\n\no Dissertation title: (including any subtitle)\n\no Student: (full name)\n\no Awarding institution: (full name and country)\n\no Date of PhD award: (month and year; depending on the\n  institution, this may be the date of the viva, corrections\n  being approved, graduation ceremony, or otherwise)\n\no Advisor/supervisor: (full names)\n\no Dissertation URL: (please provide a permanently accessible\n  link to the dissertation if you have one, such as to an\n  institutional repository or other public archive; links\n  to personal web pages should be considered a last resort)\n\no Dissertation abstract: (plain text, maximum 1000 words;\n  you may use \\emph{...} for emphasis, but we prefer no\n  other markup or formatting in the abstract, but do get\n  in touch if this causes significant problems)\n\nPlease do not submit a copy of the dissertation itself, as\nthis is not required.  JFP reserves the right to decline\nto publish abstracts that are not deemed appropriate.\n\n============================================================\n\nPHD ABSTRACT EDITOR:\n\nGraham Hutton\nSchool of Computer Science\nUniversity of Nottingham\nNottingham NG8 1BB\nUnited Kingdom\n\n============================================================\n", 
            "subreddit": "haskell", 
            "title": "Journal of Functional Programming - Call for PhD Abstracts", 
            "url": "https://www.reddit.com/r/haskell/comments/73rkoe/journal_of_functional_programming_call_for_phd/"
        }, 
        {
            "author": "hodltv", 
            "created_utc": 1506926833.0, 
            "domain": "self.haskell", 
            "id": "73r861", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 24, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73r861/cardano_next_generation_blockchain_platform/", 
            "score": 46, 
            "selftext": "Thoughts on this blockchain platform written in haskell?\n\n[Cardano - About](https://iohk.io/projects/cardano/#about)\n\n[Github - Source Code](https://github.com/input-output-hk/cardano-sl)", 
            "subreddit": "haskell", 
            "title": "Cardano - next generation blockchain platform written in Haskell", 
            "url": "https://www.reddit.com/r/haskell/comments/73r861/cardano_next_generation_blockchain_platform/"
        }, 
        {
            "author": "Shrinker42", 
            "created_utc": 1506923543.0, 
            "domain": "self.haskell", 
            "id": "73r0zy", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73r0zy/followup_to_my_hobby_editor_port_project/", 
            "score": 11, 
            "selftext": "Hello, this is a followup to https://www.reddit.com/r/haskell/comments/6alxdh/thanks_migration_to_haskell/ .\n\nThe recent developments are these:\n\nFirst, I'm porting my own plugin programming language's compiler from C# to Haskell, and I didn't have to cheat - yet. I already had a parser based on a state machine with sufficient syntax error location support in place and just used that. My context free grammar is actually just a list of state transitions now and can directly be transformed into syntax flow diagrams (Graphviz source files). I still work on the language's specification in a BNF style grammar file with attached documentation for the semantics, but port changes over to the state machine on the go. In this case I had no gain from using Haskell as a DSL for the grammar specification (with a parsing library), or for the plugin language itself, as what I have in mind will be a conventional imperative system.\n\nWrapping my mind around all the things I need to do, it took quite long to get a good idea for tackling a problem type (e.g. how to interpret an infix operator now), but generalizing from the solution and applying it to related problems is a very, very speedy process. This leaves me with pretty much no menial work and instead just always with the next hard problem to crack.\n\nHaving more expressive power at hand now, I've made logical extensions to my programming language here and there. For instance, it only supported one level of indirection (int &x = y;), but after pondering a lot about the typing and everything, I've upgraded the syntax and semantics to support arbitrary levels of indirection.\n\nThe runtime has to deal with this construct, and my current solution will be to emulate modifiable slots in memory by pointing at a Data.Vector.Vector with integers.\n\nThe C++ runtime for the language had bytecode instructions that didn't rely on runtime typing of their arguments. In Haskell, I've opted to harness the power of the type system as much as I can, so different instructions for the same operation on different data types are now just one instruction + pattern matching on their arguments for the typing.\n\nThe runtime execution loop is in the IO monad because it must be able to trigger side-effects.\n\nThe parsing of a file is in the IO monad because of #include directives to load additional source code files. Interpreting datatypes and expressions is done in pure functions.\n\nA very Haskell-specific problem/behavior occurred with error reporting. If I defined an invalid type alias in my language, it would be reported on the spot in the C# version of the compiler. In the Haskell version, it would be reported at the right code location too, but only when I actually used it for a variable definition. Haskell's laziness actually affected my compilation error reporting and made it lazy too! Errors could be reported in the wrong order or be hidden completely. I was dumbfounded and realized I could now opt to keep it that way and hence disregard broken code if it's unused. But I've decided to force the evaluation where necessary using seq and Control.Parallel.pseq - the latter coming with a guarantee of the order of evaluation which I want for my error reporting.\n\nMy language supports namespaces, and at first representing them in the compiler's state posed a problem. They are basically modifiable slots in memory again because they can be reopened and aliased. So now, the children of a namespace are just indices into a Vector of namespaces.\n\nIt also had vec3 data type that basically stands for (Float, Float, Float). Knowing that I can rely on Haskell's type system, I've planned to add a double variant of this later too, and it will really be not much work at all to go there from the then finished support for the float variant.\n\nHaving something like \"vec 3 a; float x = &a.x;\" left me with really difficult design questions for the runtime of the language, but I think I've found a viable pure solution that basically emulates modifiable memory only where really necessary.\n\nReference counting was a big topic for me in the C++ version of the runtime, and it won't be anymore in Haskell. Originally, memory considerations lead to my plugin code having a lot of &-references. With the new system, such references will only exist as a means to alias and modify values later on because Haskell takes that memory weight off my shoulders.\n", 
            "subreddit": "haskell", 
            "title": "Followup to my hobby editor port project", 
            "url": "https://www.reddit.com/r/haskell/comments/73r0zy/followup_to_my_hobby_editor_port_project/"
        }, 
        {
            "author": "mightybyte", 
            "created_utc": 1506902342.0, 
            "domain": "youtube.com", 
            "id": "73pbb8", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Compose Conference", 
                    "author_url": "https://www.youtube.com/channel/UC0pEknZxL7Q1j0Ok8qImWdQ", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/yVCKp3uSq-Y?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/yVCKp3uSq-Y/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "QuickFuzz Testing for Fun and Profit", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73pbb8/compose_conference_quickfuzz_testing_for_fun_and/", 
            "score": 18, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Compose Conference - QuickFuzz Testing for Fun and Profit", 
            "url": "https://www.youtube.com/watch?v=yVCKp3uSq-Y"
        }, 
        {
            "author": "n00bomb", 
            "created_utc": 1506869247.0, 
            "domain": "youtu.be", 
            "id": "73m0k3", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Strange Loop", 
                    "author_url": "https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/sT6VJkkhy0o?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/sT6VJkkhy0o/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "\"Haxl: A Big Hammer for Concurrency\" by Simon Marlow", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 30, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73m0k3/haxl_a_big_hammer_for_concurrency_by_simon_marlow/", 
            "score": 101, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "\"Haxl: A Big Hammer for Concurrency\" by Simon Marlow", 
            "url": "https://youtu.be/sT6VJkkhy0o"
        }, 
        {
            "author": "Iceland_jack", 
            "created_utc": 1506865469.0, 
            "domain": "gist.github.com", 
            "id": "73lp4m", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73lp4m/higherorder_abstract_syntax_for_any/", 
            "score": 36, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Higher-order abstract syntax for any Cartesian-closed category in Haskell (Phil Freeman)", 
            "url": "https://gist.github.com/paf31/5c1279796d66fe04a177e34b0d674ac6"
        }, 
        {
            "author": "eejp", 
            "created_utc": 1506862210.0, 
            "domain": "youtube.com", 
            "id": "73lg3o", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Strange Loop", 
                    "author_url": "https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/T-BZvBWiamU?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/T-BZvBWiamU/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "\"The Lux Programming Language\" by Eduardo Julian", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73lg3o/the_lux_programming_language_strange_loop_2017/", 
            "score": 30, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "The Lux Programming Language [Strange Loop 2017]", 
            "url": "https://www.youtube.com/watch?v=T-BZvBWiamU"
        }, 
        {
            "author": "ossadeimorti", 
            "created_utc": 1506853475.0, 
            "domain": "self.haskell", 
            "id": "73kx9l", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73kx9l/yesod_saving_user_details_from_google_oauth2/", 
            "score": 3, 
            "selftext": "Hi!\nI'm trying to grab some info from google oauth2 when people log in.\n\nI have written this method:\n\n    getUser :: Manager -> HandlerT master IO (Maybe Person)  \n    getUser m = do\n      token <- getUserAccessToken\n      case token of\n        Nothing -> return Nothing\n        Just t -> getPerson m t\n\n\nI need to pass it a manager, but I'm stuck.\nI have access to `appHttpManager`, but it's a function expecting a `App`.\n\nThis is the code inside `YesodAuth`, it's very similar to the template one:\n\n    authenticate creds = runDB $ do\n        x <- getBy $ UniqueUser $ credsIdent creds\n        case x of\n            Just (Entity uid _) -> return $ Authenticated uid\n            Nothing -> do\n               user <- getUser $ appHttpManager ??? \n              Authenticated <$> insert User\n                { userIdent = credsIdent creds\n                , userPassword = Nothing\n                , userNumEntries = 0\n                , userAverageVote = 0\n                , userName = Nothing\n                , userImage = Nothing\n                }\n\n\nThanks!", 
            "subreddit": "haskell", 
            "title": "Yesod: saving user details from google oauth2", 
            "url": "https://www.reddit.com/r/haskell/comments/73kx9l/yesod_saving_user_details_from_google_oauth2/"
        }, 
        {
            "author": "Athas", 
            "created_utc": 1506838131.0, 
            "domain": "github.com", 
            "id": "73k423", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73k423/ghcid_very_low_feature_ghci_based_ide/", 
            "score": 41, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "ghcid: Very low feature GHCi based IDE", 
            "url": "https://github.com/ndmitchell/ghcid.git"
        }, 
        {
            "author": "nish2575", 
            "created_utc": 1506829479.0, 
            "domain": "self.haskell", 
            "id": "73jj32", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73jj32/snapservant_servant_scotty_snap_spockthe_sweet/", 
            "score": 14, 
            "selftext": "I have used scotty a bit, and snap very lightly. I used happstack-lite a long time ago. I think my ideal is to decouple my actual domain services and persistence from the http layer and authentication, since some of my domain services might be invoked from command line applications or infrastructure other than http. Maybe 95% of the application I am working on now has domain services invoked from http calls... Where are people's thoughts lately on their ideal degree of decoupling? Should the routing library abstractions have a deep knowledge of the state underneath them (db pool, auth state), or should the routing library just see it as a blackbox of state that some \"passenger\" service knows how to interact with?", 
            "subreddit": "haskell", 
            "title": "Snap-servant, servant, scotty, snap, spock...the sweet spot?", 
            "url": "https://www.reddit.com/r/haskell/comments/73jj32/snapservant_servant_scotty_snap_spockthe_sweet/"
        }
    ], 
    "subreddit_creation_utc": 1201271843.0, 
    "subscribers": 29053, 
    "title": "Haskell :: Reddit", 
    "title_word_count_occurrences": {
        "atom": 2, 
        "dell": 1, 
        "github": 1, 
        "google": 1, 
        "haskell": 17, 
        "tex": 2
    }, 
    "top_score_submissions": [
        {
            "author": "wyager", 
            "created_utc": 1507036702.0, 
            "domain": "yager.io", 
            "id": "740bmt", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/740bmt/building_a_cpu_with_haskell_part_1/", 
            "score": 146, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Building a CPU with Haskell - Part 1", 
            "url": "http://yager.io/CPU/CPU1.html"
        }, 
        {
            "author": "n00bomb", 
            "created_utc": 1506869247.0, 
            "domain": "youtu.be", 
            "id": "73m0k3", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Strange Loop", 
                    "author_url": "https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/sT6VJkkhy0o?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/sT6VJkkhy0o/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "\"Haxl: A Big Hammer for Concurrency\" by Simon Marlow", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 30, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73m0k3/haxl_a_big_hammer_for_concurrency_by_simon_marlow/", 
            "score": 101, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "\"Haxl: A Big Hammer for Concurrency\" by Simon Marlow", 
            "url": "https://youtu.be/sT6VJkkhy0o"
        }, 
        {
            "author": "alan_zimm", 
            "created_utc": 1507062908.0, 
            "domain": "teh.id.au", 
            "id": "7437nj", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/7437nj/announcing_hgrep/", 
            "score": 70, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "Announcing hgrep", 
            "url": "http://teh.id.au/posts/2017/10/03/announcing-hgrep/index.html"
        }, 
        {
            "author": "bgamari", 
            "created_utc": 1506954840.0, 
            "domain": "mail.haskell.org", 
            "id": "73t4dx", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 19, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/73t4dx/announce_ghc_822_release_candidate_1/", 
            "score": 68, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "[ANNOUNCE] GHC 8.2.2 release candidate 1", 
            "url": "https://mail.haskell.org/pipermail/ghc-devs/2017-October/014777.html"
        }, 
        {
            "author": "potomak", 
            "created_utc": 1507412761.0, 
            "domain": "github.com", 
            "id": "74xpiv", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 14, 
            "num_crossposts": 0, 
            "permalink": "/r/haskell/comments/74xpiv/a_tiny_ci_server_built_around_github_and_nix/", 
            "score": 56, 
            "selftext": "", 
            "subreddit": "haskell", 
            "title": "A tiny CI server built around GitHub and Nix", 
            "url": "https://github.com/ocharles/micro-ci"
        }
    ], 
    "total_submissions": 63, 
    "utc_of_data_collection_completion": "2017-10-17 18:48:10", 
    "utc_of_data_collection_start": "2017-10-17 18:48:08"
}