{
    "active_user_count": 299, 
    "advertiser_category": "Technology", 
    "audience_target": "programming", 
    "avg_comment_num_per_submission": 16, 
    "avg_submission_score": 28, 
    "collection_range_end_unix_timestamp": 1507420800, 
    "collection_range_end_utc": "2017-10-08 00:00:00", 
    "collection_range_start_unix_timestamp": 1506816000, 
    "collection_range_start_utc": "2017-10-01 00:00:00", 
    "description": "Discussions, articles, and news about the C++ programming language or programming in C++.\n\n\n\n**For C++ questions, answers, help, and advice see [r/cpp_questions](http://reddit.com/r/cpp_questions) or [StackOverflow](http://stackoverflow.com)**.\n\n---\n\n**Get Started**\n\nThe [C++ Standard Home](http://isocpp.org/) has a nice _[getting started](http://isocpp.org/get-started)_ page.\n\n**Slack**\n\nJoin [the C++ community on Slack](https://cpplang.now.sh).\n\n**Reference**\n\n[cppreference.com](http://en.cppreference.com/w/)\n\n**Books**\n\nThere is a useful list of books on [Stack Overflow](http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list). In most cases reading a book is the best way to learn C++.\n\n---\n\n[Show all links](http://www.reddit.com/r/cpp/#all)\n\n[Filter out CppCon links](http://nc.reddit.com/r/cpp/#nc)\n\n[Show only CppCon links](http://oc.reddit.com/r/cpp/#oc)\n", 
    "display_name": "cpp", 
    "domain_occurrences": {
        "baptiste-wicht.com": 1, 
        "blog.brakmic.com": 1, 
        "blog.qt.io": 1, 
        "bunnyladame.blogspot.no": 1, 
        "cipht.net": 1, 
        "colfaxresearch.com": 1, 
        "cppcast.com": 1, 
        "deque.blog": 1, 
        "elbeno.com": 1, 
        "fluentcpp.com": 1, 
        "github.com": 2, 
        "izzys.casa": 1, 
        "kdevelop.org": 1, 
        "kfsone.wordpress.com": 1, 
        "msdn.microsoft.com": 1, 
        "nullprogram.com": 1, 
        "phoronix.com": 1, 
        "self.cpp": 17, 
        "slideslive.com": 1, 
        "web.cynd.net": 1, 
        "xania.org": 1, 
        "youtu.be": 11, 
        "youtube.com": 8
    }, 
    "id": "2qi27", 
    "num_external_website_posts": 40, 
    "num_text_posts": 17, 
    "public_description": "Discussions, articles and news about the C++ programming language or programming in C++.", 
    "submissions": [
        {
            "author": "mttd", 
            "created_utc": 1507410962.0, 
            "domain": "baptiste-wicht.com", 
            "id": "74xjjf", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74xjjf/deep_learning_library_10_fast_neural_network/", 
            "score": 28, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Deep Learning Library 1.0 - Fast Neural Network Library", 
            "url": "https://baptiste-wicht.com/posts/2017/10/deep-learning-library-10-fast-neural-network-library.html"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1507410655.0, 
            "domain": "nullprogram.com", 
            "id": "74xii5", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 24, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74xii5/a_branchless_utf8_decoder/", 
            "score": 121, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "A Branchless UTF-8 Decoder", 
            "url": "http://nullprogram.com/blog/2017/10/06/"
        }, 
        {
            "author": "geekfolk", 
            "created_utc": 1507405357.0, 
            "domain": "self.cpp", 
            "id": "74wzy6", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 43, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74wzy6/should_we_always_prefer_templates_or_lambdas_with/", 
            "score": 9, 
            "selftext": "I'm not exactly in the fan club of inheritance based OO programing as someone that learned Python as the first programming language and currently using C++17 as Python with pointers, and C++'s got templates (lambdas with auto parameters are just syntax sugar for templates, and I think we should extend this syntax sugar to regular function templates) that work just like a static version of duck typing, I dig duck typing and its static variant templates, cuz I believe that polymorphism should work naturally and automatically long as it's possible, we should not have to declare useless interfaces and abstract classes manually and it's also how things work in smalltalk, which is a REAL OO language\ntemplates **can't always** replace virtual functions (which is the only runtime polymorphism implementation for static languages I know of) for sure, I'm just arguing that if we should always prefer templates over virtual functions in all possible cases, templates should also have higher performance generated binaries than virtual functions since it has no runtime overhead\n\ntake the following for example\n\n    //Python style C++\n    #include <iostream>\n    \n    struct Duck final {\n\t    auto Quack() {\n\t\t    std::cout << \"It's the duck quacking over there!\" << std::endl;\n\t    }\n    };\n    \n    struct Person final {\n\t    auto Quack() {\n\t\t    std::cout << \"It's some guy quacking over there!\" << std::endl;\n\t    }\n    };\n    \n    auto main()->int {\n\t    auto MakeItQuack = [](auto Something) {\n\t\t    Something.Quack();\n\t    };\n\t    MakeItQuack(Duck{});\n\t    MakeItQuack(Person{});\n    }\n\nlooks much prettier and more elegant and works faster than\n\n    //Java Style C++\n    #include <iostream>\n    \n    struct UselessInterface {\n\t    virtual void Quack() = 0;\n    };\n    \n    struct Duck final :public UselessInterface {\n\t    void Quack() override {\n\t\t    std::cout << \"It's the duck quacking over there!\" << std::endl;\n\t    }\n    };\n    \n    struct Person final :public UselessInterface {\n\t    void Quack() override {\n\t\t    std::cout << \"It's some guy quacking over there!\" << std::endl;\n\t    }\n    };\n    \n    void MakeItQuack(UselessInterface &&Something) {\n\t    Something.Quack();\n    }\n    \n    int main() {\n\t    MakeItQuack(Duck());\n\t    MakeItQuack(Person());\n    }\n\ntemplates just can't replace virtual functions sometimes like\n\n    auto Whatever = std::vector<UselessInterface *>{ new Duck{}, new Person{} };\n\nwe should leave out stuff like this here as we're talking about when it's **possible** to replace virtual functions with templates\n\nand like I said earlier, I think function templates deserve a syntax sugar like generic lambdas, so\n\n    template<typename Type, typename AnotherType>\n    auto Function(Type, AnotherType);\n\ngoes to\n\n    auto Function(auto, auto);\n\n", 
            "subreddit": "cpp", 
            "title": "Should we always prefer templates (or lambdas with auto typed parameters) over virtual functions if possible?", 
            "url": "https://www.reddit.com/r/cpp/comments/74wzy6/should_we_always_prefer_templates_or_lambdas_with/"
        }, 
        {
            "author": "rtessil", 
            "created_utc": 1507374718.0, 
            "domain": "github.com", 
            "id": "74ua8g", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74ua8g/github_sparsemap_memory_efficient_hash_mapset/", 
            "score": 26, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "GitHub - sparse-map: memory efficient hash map/set", 
            "url": "https://github.com/Tessil/sparse-map"
        }, 
        {
            "author": "srbufi", 
            "created_utc": 1507352819.0, 
            "domain": "self.cpp", 
            "id": "74t184", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 205, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74t184/question_which_c_featureslibrariespatterns_should/", 
            "score": 50, 
            "selftext": "Is there any concensus on what is still in the standard, but considered legacy and thus \"not valid\" Modern C++? Any books, bogs, articles to point to?", 
            "subreddit": "cpp", 
            "title": "Question: Which C++ features/libraries/patterns should be considered legacy, though still supported by the standard?", 
            "url": "https://www.reddit.com/r/cpp/comments/74t184/question_which_c_featureslibrariespatterns_should/"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1507333331.0, 
            "domain": "youtube.com", 
            "id": "74rhrl", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/l1YJTg_A914?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/l1YJTg_A914/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: J. McNellis, J. Mola, K. Sykes \u201cTime Travel Debugging...\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74rhrl/cppcon_2017_j_mcnellis_j_mola_k_sykes_time_travel/", 
            "score": 39, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: J. McNellis, J. Mola, K. Sykes \"Time Travel Debugging...\"", 
            "url": "https://www.youtube.com/watch?v=l1YJTg_A914"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1507333283.0, 
            "domain": "youtube.com", 
            "id": "74rhma", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/NlyDUQS8OcQ?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/NlyDUQS8OcQ/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Scott Wardle \u201c EA\u2019s Secret Weapon: Packages and Modules\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74rhma/cppcon_2017_scott_wardle_eas_secret_weapon/", 
            "score": 28, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Scott Wardle \"EA's Secret Weapon: Packages and Modules\"", 
            "url": "https://www.youtube.com/watch?v=NlyDUQS8OcQ"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1507327200.0, 
            "domain": "youtu.be", 
            "id": "74qwyh", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/4AMhgkLjVHM?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/4AMhgkLjVHM/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Billy Baker \u201cAlmost Unlimited Modern C++ in Kernel-Mode Applications\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74qwyh/cppcon_2017_billy_baker_almost_unlimited_modern_c/", 
            "score": 23, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Billy Baker \u201cAlmost Unlimited Modern C++ in Kernel-Mode Applications\u201d", 
            "url": "https://youtu.be/4AMhgkLjVHM"
        }, 
        {
            "author": "JulianCienfuegos", 
            "created_utc": 1507316212.0, 
            "domain": "self.cpp", 
            "id": "74pqkq", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 33, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74pqkq/how_ill_write_my_unittests/", 
            "score": 0, 
            "selftext": "There has been a lot of discussion about how to write unittests of private functions in C++. The more popular opinions I saw were:\n\n1. You shouldn't have to unittest private methods, they should be implicity tested through the public methods.\n\n2.  Make all private methods protected and derive a unittesting class.\n\nBoth of these seem like abuses of access specifiers.\n\nSo I've been adding my unittests to the end of the source code being tested, just wrapped in #ifdef UNITTEST. It's so ugly but I'm experimenting with work arounds, and trying this one on for size. What do you guys think about this on a scale of ugly(0) to cool (9) ? ", 
            "subreddit": "cpp", 
            "title": "How Ill write my unittests.", 
            "url": "https://www.reddit.com/r/cpp/comments/74pqkq/how_ill_write_my_unittests/"
        }, 
        {
            "author": "tallassrob", 
            "created_utc": 1507303310.0, 
            "domain": "cppcast.com", 
            "id": "74oau5", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74oau5/cppcast_plf_list_with_matt_bentley/", 
            "score": 8, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCast: PLF List with Matt Bentley", 
            "url": "http://cppcast.com/2017/10/matt-bentley/"
        }, 
        {
            "author": "meetingcpp", 
            "created_utc": 1507294963.0, 
            "domain": "blog.qt.io", 
            "id": "74ngms", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74ngms/qt_creator_441_released_qt_blog/", 
            "score": 74, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Qt Creator 4.4.1 released - Qt Blog", 
            "url": "http://blog.qt.io/blog/2017/10/06/qt-creator-4-4-1-released/"
        }, 
        {
            "author": "SAHChandler", 
            "created_utc": 1507292687.0, 
            "domain": "izzys.casa", 
            "id": "74n9gk", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 16, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74n9gk/cppcon_2017_trip_report_self_unemployed/", 
            "score": 17, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017 Trip Report -- Self Unemployed", 
            "url": "https://izzys.casa/posts/cppcon-2017-trip-report.html"
        }, 
        {
            "author": "berium", 
            "created_utc": 1507286167.0, 
            "domain": "phoronix.com", 
            "id": "74msg0", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 31, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74msg0/llvm_compilation_speed_intel_i78700k_vs_amd_ryzen/", 
            "score": 26, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "LLVM Compilation Speed Intel i7-8700K vs AMD Ryzen", 
            "url": "https://www.phoronix.com/scan.php?page=article&item=intel-coffee-8700k&num=6"
        }, 
        {
            "author": "OCPetrus", 
            "created_utc": 1507222282.0, 
            "domain": "youtube.com", 
            "id": "74h94d", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/PFdWqa68LmA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/PFdWqa68LmA/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Stephen Dewhurst \u201cModern C++ Interfaces...\"", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74h94d/cppcon_2017_stephen_dewhurst_modern_c_interfaces/", 
            "score": 54, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Stephen Dewhurst \u201cModern C++ Interfaces...\"", 
            "url": "https://www.youtube.com/watch?v=PFdWqa68LmA"
        }, 
        {
            "author": "OCPetrus", 
            "created_utc": 1507221358.0, 
            "domain": "youtube.com", 
            "id": "74h5br", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/mlP1MKP8d_Q?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/mlP1MKP8d_Q/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Toby Allsopp \u201cCoroutines: what can't they do?\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74h5br/cppcon_2017_toby_allsopp_coroutines_what_cant/", 
            "score": 34, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Toby Allsopp \u201cCoroutines: what can't they do?\u201d", 
            "url": "https://www.youtube.com/watch?v=mlP1MKP8d_Q"
        }, 
        {
            "author": "OCPetrus", 
            "created_utc": 1507220571.0, 
            "domain": "youtube.com", 
            "id": "74h21p", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/PJwd4JLYJJY?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/PJwd4JLYJJY/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Ben Deane & Jason Turner \u201cconstexpr ALL the Things!\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74h21p/cppcon_2017_ben_deane_jason_turner_constexpr_all/", 
            "score": 74, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Ben Deane & Jason Turner \u201cconstexpr ALL the Things!\u201d", 
            "url": "https://www.youtube.com/watch?v=PJwd4JLYJJY"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1507207577.0, 
            "domain": "colfaxresearch.com", 
            "id": "74fp98", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 33, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74fp98/capabilities_of_intel_avx512_in_intel_xeon/", 
            "score": 34, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Capabilities of Intel AVX-512 in Intel Xeon Scalable Processors (Skylake)", 
            "url": "https://colfaxresearch.com/skl-avx512/"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1507190222.0, 
            "domain": "slideslive.com", 
            "id": "74ej02", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74ej02/gnu_tools_cauldron_2017_slides_videos/", 
            "score": 17, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "GNU Tools Cauldron 2017 (Slides & Videos)", 
            "url": "https://slideslive.com/gnu/gnu-tools-cauldron-2017"
        }, 
        {
            "author": "joebaf", 
            "created_utc": 1507186032.0, 
            "domain": "self.cpp", 
            "id": "74e9s0", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74e9s0/share_your_notes_from_cppcon_2017_talks/", 
            "score": 31, 
            "selftext": "Hi,\n\nI've started a simple repo:\nhttps://github.com/fenbf/cppcon2017_notes\n\nThe idea is to gather notes from the talks from Cpp Con 2017. It might be handy for people who didn't attend the conference (like me).\nOf course, I could copy talks' descriptions from the official page, but I think it's better to put your own remarks.\n\nMore and more videos appear on the official Cpp Con channel: https://www.youtube.com/user/CppCon/videos\n\nThere's a lot of stuff to cover :)\nI advise watching videos at least 1.5x speed :)\n\nFor now I've only added little notes from two talks, so that's why I opened it for collaboration.", 
            "subreddit": "cpp", 
            "title": "Share your notes from CppCon 2017 talks", 
            "url": "https://www.reddit.com/r/cpp/comments/74e9s0/share_your_notes_from_cppcon_2017_talks/"
        }, 
        {
            "author": "uber_int", 
            "created_utc": 1507172466.0, 
            "domain": "self.cpp", 
            "id": "74d9zf", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 14, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74d9zf/any_scope_for_higher_salaries_using_c_as_your/", 
            "score": 0, 
            "selftext": "I know it depends on the country and the cost of living of the area and such. But I'm just curious about high paying jobs in C++ in comparison to others such as web development/web service or application development using languages such as Java.\n\nI know this is a vague question but reading more and more about high paying jobs in the web domain and usually don't see C++ pop up in those discussions.\n\nC++ is much harder to learn than many of these other technologies, and makes me wonder if C++ is the right choice from a money standpoint compared to the effort you need to put in.\n\nI currently do not use C++ in my job, but I'm looking for C++ opportunities due to liking the nature of the work that C++ opportunities usually entail, and enjoying C++ (especially Modern C++).\n\nPersonal anecdotes welcome.\n\nThank you.\n\n", 
            "subreddit": "cpp", 
            "title": "Any scope for higher salaries using C++ as your primary language?", 
            "url": "https://www.reddit.com/r/cpp/comments/74d9zf/any_scope_for_higher_salaries_using_c_as_your/"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1507134030.0, 
            "domain": "youtu.be", 
            "id": "7498j1", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/n4ie7tPMXOQ?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/n4ie7tPMXOQ/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Walter E. Brown \u201cProgramming with C++ Constraints: Background, Utility, and Gotchas\"", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7498j1/cppcon_2017_walter_e_brown_programming_with_c/", 
            "score": 28, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Walter E. Brown \u201cProgramming with C++ Constraints: Background, Utility, and Gotchas\"", 
            "url": "https://youtu.be/n4ie7tPMXOQ"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1507133956.0, 
            "domain": "youtu.be", 
            "id": "749877", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/cBpPxantld8?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/cBpPxantld8/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Anastasia Kazakova \u201cNew standards to the rescue: the view through an IDE\u2019s glasses\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/749877/cppcon_2017_anastasia_kazakova_new_standards_to/", 
            "score": 38, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Anastasia Kazakova \u201cNew standards to the rescue: the view through an IDE's glasses\u201d", 
            "url": "https://youtu.be/cBpPxantld8"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1507133621.0, 
            "domain": "youtu.be", 
            "id": "7496u7", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/rFdJ68WbkdQ?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/rFdJ68WbkdQ/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Rong Lu \u201cC++ Development with Visual Studio Code\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7496u7/cppcon_2017_rong_lu_c_development_with_visual/", 
            "score": 71, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Rong Lu \u201cC++ Development with Visual Studio Code\u201d", 
            "url": "https://youtu.be/rFdJ68WbkdQ"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1507129277.0, 
            "domain": "youtu.be", 
            "id": "748p2m", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/hNaLf8lYLDo?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/hNaLf8lYLDo/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Charles Bay \u201cThe Quiet Little Gem in Modern C++: \uff1csystem_error\uff1e\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/748p2m/cppcon_2017_charles_bay_the_quiet_little_gem_in/", 
            "score": 19, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Charles Bay \u201cThe Quiet Little Gem in Modern C++: \uff1csystem_error\uff1e\u201d", 
            "url": "https://youtu.be/hNaLf8lYLDo"
        }, 
        {
            "author": "Artex3", 
            "created_utc": 1507120254.0, 
            "domain": "self.cpp", 
            "id": "747tk7", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 16, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/747tk7/any_reason_why_smart_pointers_dont_have_a/", 
            "score": 4, 
            "selftext": "So for example I could be able to do this:\n\n    m_remoteClients.emplace_back({this, std::move(m_nextSocket)});\n\nrather than\n\n    m_remoteClients.emplace_back(std::make_shared<RemoteClient>(this, std::move(m_nextSocket)));    \n\nwhich takes way more space and re-iterates information we already know.\n\nAlternatively, why don't the STL containers provide an emplace function that directly forward to make_unique/shared when it's a smart pointer.", 
            "subreddit": "cpp", 
            "title": "Any reason why smart pointers don't have a variadic constructor ?", 
            "url": "https://www.reddit.com/r/cpp/comments/747tk7/any_reason_why_smart_pointers_dont_have_a/"
        }, 
        {
            "author": "Reallifeniceguy", 
            "created_utc": 1507112544.0, 
            "domain": "self.cpp", 
            "id": "7478y2", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 23, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7478y2/why_such_a_large_gap_between_c98_and_c11/", 
            "score": 9, 
            "selftext": "Since c++11 the language has improved dramatically and together with cmake is an amazing joy to use. But what caused the lull in development between c++98 and c++11? Why didn't anything happen for 13 years? Why did c++11 features take so long to develop?", 
            "subreddit": "cpp", 
            "title": "Why such a large gap between c++98 and c++11?", 
            "url": "https://www.reddit.com/r/cpp/comments/7478y2/why_such_a_large_gap_between_c98_and_c11/"
        }, 
        {
            "author": "SpeciallyMade2", 
            "created_utc": 1507107309.0, 
            "domain": "self.cpp", 
            "id": "746xbn", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/746xbn/is_c11_still_relevant/", 
            "score": 3, 
            "selftext": "Right now, C++17 just got finished and is now in the balloting process. As a complete beginner looking to learn C++, are highly recommended books (C++ Primer 5th ed to be exact) still valid to use as learning material? They are said to use C++11, so are they still relevant in today's C++ or are most of the materials outdated?", 
            "subreddit": "cpp", 
            "title": "Is C++11 still relevant?", 
            "url": "https://www.reddit.com/r/cpp/comments/746xbn/is_c11_still_relevant/"
        }, 
        {
            "author": "Celiste", 
            "created_utc": 1507107253.0, 
            "domain": "self.cpp", 
            "id": "746x7b", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 26, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/746x7b/this_is_why_i_hate_msvc/", 
            "score": 0, 
            "selftext": "A while ago I read a discussion here on reddit why people hate Visual Studio. Turned out many people don't hate it, as was to my knowledge as well. Lately I've just come to hate it more and more, reason being: Visual Studio (2017, to say the least) has major issues with SFINAE. For example, the following code from my current project compiles nicely under GCC (see https://ideone.com/DrSXjC), but not under VS2017:\n\n    template<typename INTEGRAL>\nconstexpr inline decltype(typename std::enable_if<std::is_integral<INTEGRAL>::value, INTEGRAL>::type()) nearly(INTEGRAL value, INTEGRAL to, INTEGRAL margin = 0) noexcept\n    {\n        return value == to;\n    }\n    \n    template<typename DECIMAL>\nconstexpr inline decltype(typename std::enable_if<std::is_floating_point<DECIMAL>::value, DECIMAL>::type()) nearly(DECIMAL value, DECIMAL to, DECIMAL margin = 0.00001f) noexcept\n    {\n        return abs(value - to) < margin;\n    }\n\nObviously this code is meant to generate two distinct functions for integral types and floating point types, simply to save me some lines of duplicated code or to avoid unnecessary type conversion from float to long double.\n\nThis code works fine under GCC because GCC does templates right. It only attempts to compile these functions when it gets an actual data type in a call. In contrast, VS tries to, maybe, precompile the function? Presumably gathers data on the templates ahead of time. And this *precompilation* causes it to see two, as far as the templated signatures are concerned, identical function declarations, and consequentially fails with the following output:\n\n    1>g:\\git-repos\\voxpopuliengine\\voxpopuliengine\\include\\vpe\\core\\math.hpp(51): error C2572: 'vpe::Math::nearly': redefinition of default argument: parameter 1\n    1>g:\\git-repos\\voxpopuliengine\\voxpopuliengine\\include\\vpe\\core\\math.hpp(42): note: see declaration of 'vpe::Math::nearly'\n    1>g:\\git-repos\\voxpopuliengine\\voxpopuliengine\\include\\vpe\\core\\math.hpp(54): error C2995: 'unknown-type vpe::Math::nearly(INTEGRAL,INTEGRAL,INTEGRAL) noexcept': function template has already been defined\n    1>g:\\git-repos\\voxpopuliengine\\voxpopuliengine\\include\\vpe\\core\\math.hpp(42): note: see declaration of 'vpe::Math::nearly'\n\nAgain, ideone compiles and executes this finely. But in some circumstances VS' IntelliSense even fails with templated classes with SFINAE'd-away methods, simply not seeing them and highlighting code as erroneous when it actually compiles and executes without issues.\n\nThe later one I can easily excuse. I did attempt to report the issue, but just wound up on the error page of the feedback forum, said \"fuck it\" after 15 minutes and left again. All this together with the slow response times I'm experiencing on the MSDN pages leads me to just abandon Visual Studio heavy-heartedly, although it's a great IDE, but since I plan to make my current project available to different platforms, I figure it's finally time to migrate to Code::Blocks and GCC.\n\nPersonally I think Visual Studio is superb for beginners. I find it relatively helpful when learning C++. For most use cases it still does a great job, no doubt. But when you start making use of SFINAE, I'm just left to wonder how even they wrote their STD implementation. Just thought I'd throw my two cents in.", 
            "subreddit": "cpp", 
            "title": "This is why I hate MSVC++", 
            "url": "https://www.reddit.com/r/cpp/comments/746x7b/this_is_why_i_hate_msvc/"
        }, 
        {
            "author": "deque-blog", 
            "created_utc": 1507106084.0, 
            "domain": "deque.blog", 
            "id": "746uw7", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 9, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/746uw7/my_cppcon_2017_trip_report_10_great_talks_to/", 
            "score": 55, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "My CppCon 2017 Trip Report - 10 great talks to watch and learn from", 
            "url": "https://deque.blog/2017/10/04/my-cppcon-2017-trip-report-10-great-talks-to-watch-and-learn-from/"
        }, 
        {
            "author": "SpeciallyMade2", 
            "created_utc": 1507084874.0, 
            "domain": "self.cpp", 
            "id": "745czc", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/745czc/is_the_programming_principles_and_practice_using/", 
            "score": 5, 
            "selftext": "I'm looking to getting into programming with C++, and have looked over the stackoverflow list of recommended books which is how i stumbled upon this particular title. Problem is, this book is published in 2009. I lack experience in the programming language, so if someone could tell me if C++ constantly changes over the year or if this book is outdated, I'd highly appreciate it. And if they do change over the year, is there an estimate on how often?", 
            "subreddit": "cpp", 
            "title": "Is the Programming: Principles and Practice Using C++ outdated?", 
            "url": "https://www.reddit.com/r/cpp/comments/745czc/is_the_programming_principles_and_practice_using/"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1507070443.0, 
            "domain": "cipht.net", 
            "id": "7440la", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 2, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7440la/are_jump_tables_always_fastest/", 
            "score": 4, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Are Jump Tables Always Fastest?", 
            "url": "http://www.cipht.net/2017/10/03/are-jump-tables-always-fastest.html"
        }, 
        {
            "author": "lefticus", 
            "created_utc": 1507070360.0, 
            "domain": "youtube.com", 
            "id": "7440a1", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": {
                "oembed": {
                    "author_name": "Jason Turner", 
                    "author_url": "https://www.youtube.com/user/lefticus1", 
                    "description": "Support these videos: https://www.patreon.com/lefticus Learning C++ Best Practices: http://shop.oreilly.com/product/0636920049814.do Inheritance and Polymorphism with C++: http://shop.oreilly.com/product/0636920052166.do Follow me on twitter: https://twitter.com/lefticus Source:", 
                    "height": 338, 
                    "html": "<iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FI2cKVRzJhS0%3Ffeature%3Doembed&url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DI2cKVRzJhS0&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FI2cKVRzJhS0%2Fhqdefault.jpg&key=522baf40bd3911e08d854040d3dc5c07&type=text%2Fhtml&schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/I2cKVRzJhS0/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "C++ Weekly - Ep 83 - Installing Compiler Explorer", 
                    "type": "video", 
                    "url": "http://www.youtube.com/watch?v=I2cKVRzJhS0", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7440a1/c_weekly_ep_83_installing_compiler_explorer/", 
            "score": 15, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "C++ Weekly - Ep 83 - Installing Compiler Explorer", 
            "url": "https://www.youtube.com/attribution_link?a=jvqI9UKH_rg&u=%2Fwatch%3Fv%3DI2cKVRzJhS0%26feature%3Dshare"
        }, 
        {
            "author": "snsmac", 
            "created_utc": 1507058262.0, 
            "domain": "self.cpp", 
            "id": "742ol8", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 20, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/742ol8/why_is_the_stdfunction_operator_const/", 
            "score": 28, 
            "selftext": "I was looking at the implementation of std::function today and one thing surprised me. The C++ Standard says the definition of () is:\n\n// 20.9.12.2.4, function invocation:\nR operator()(ArgTypes...) const;\n\nWhy is this const? std::function happily calls  functions that are not const.\n\nIn my opinion this interface is misleading and dangerous because const normally suggests that an function call is threadsafe , which is not always the case here\n", 
            "subreddit": "cpp", 
            "title": "Why is the std::function () operator const?", 
            "url": "https://www.reddit.com/r/cpp/comments/742ol8/why_is_the_stdfunction_operator_const/"
        }, 
        {
            "author": "brakmic", 
            "created_utc": 1507057815.0, 
            "domain": "blog.brakmic.com", 
            "id": "742mtk", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/742mtk/bitcoin_internals_part_1/", 
            "score": 4, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Bitcoin Internals, Part 1", 
            "url": "https://blog.brakmic.com/bitcoin-internals-part-1/"
        }, 
        {
            "author": "perpetualfolly", 
            "created_utc": 1507056011.0, 
            "domain": "self.cpp", 
            "id": "742fex", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 33, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/742fex/why_doesnt_the_standard_guarantee_a_size_for/", 
            "score": 2, 
            "selftext": "If I\u2019m interpreting the standard correctly, this is a valid specialialization of `std::array`:\n\n    struct std::array<int, 4> {\n        int storage[4];\n        char other_stuff[100000000];\n        // member functions omitted\n    };\n\nSay I\u2019m writing a struct containing an array that gets read from storage.\nIdeally, I\u2019d like to write:\n\n    struct my_data {\n        std::array<int, 4> stuff;\n    };\n\nBy doing that, I\u2019ll get a nice well-behaving array with some convenient member functions.\nBut I\u2019m unable to do that because there\u2019s no guarantee on the size of `std::array`.\n\nWhat\u2019s the rationale for not restricting `sizeof(std::array<T, N>) == sizeof(T[N])`?\nDoes anyone have an example of an implementation that won\u2019t work if that restriction is there?\n\n\n\nEdit: to clarify, I\u2019m not talking about an odd specific specialization. I gave that as an example. I mean that the standard generally allows an implementation to have `std::array<T,N>` with a different size to `T[N]`", 
            "subreddit": "cpp", 
            "title": "Why doesn't the standard guarantee a size for std::array?", 
            "url": "https://www.reddit.com/r/cpp/comments/742fex/why_doesnt_the_standard_guarantee_a_size_for/"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1507052123.0, 
            "domain": "youtu.be", 
            "id": "741zli", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/jsdn3kXFVdA?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/jsdn3kXFVdA/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Steve Carroll & Daniel Moth \u201cLatest & Greatest in Visual Stuido for C++ developers\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 36, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/741zli/cppcon_2017_steve_carroll_daniel_moth_latest/", 
            "score": 20, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Steve Carroll & Daniel Moth \u201cLatest & Greatest in Visual Stuido for C++ developers\u201d", 
            "url": "https://youtu.be/jsdn3kXFVdA"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1507050785.0, 
            "domain": "youtu.be", 
            "id": "741u8n", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/KoqY50HSuQg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/KoqY50HSuQg/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Patrice Roy \u201cWhich Machine Am I Coding To?\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/741u8n/cppcon_2017_patrice_roy_which_machine_am_i_coding/", 
            "score": 11, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Patrice Roy \u201cWhich Machine Am I Coding To?\u201d", 
            "url": "https://youtu.be/KoqY50HSuQg"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1507043584.0, 
            "domain": "youtu.be", 
            "id": "7410x8", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/fX2W3nNjJIo?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/fX2W3nNjJIo/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Bjarne Stroustrup \u201cLearning and Teaching Modern C++\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/7410x8/cppcon_2017_bjarne_stroustrup_learning_and/", 
            "score": 2, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Bjarne Stroustrup \"Learning and Teaching Modern C++\"", 
            "url": "https://youtu.be/fX2W3nNjJIo"
        }, 
        {
            "author": "Vogtinator", 
            "created_utc": 1507043379.0, 
            "domain": "kdevelop.org", 
            "id": "74101t", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 22, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74101t/kdevelop_52_beta_released_w_heaptrack_cppcheck/", 
            "score": 73, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "KDevelop 5.2 beta released w/ heaptrack & cppcheck integration, faster cpp support, lots of fixes", 
            "url": "https://www.kdevelop.org/news/kdevelop-52-beta1-released"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1507018084.0, 
            "domain": "xania.org", 
            "id": "73z1d4", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73z1d4/matt_godbolts_cppcon_2017_trip_report/", 
            "score": 41, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Matt Godbolt's CppCon 2017 Trip Report", 
            "url": "https://xania.org/201710/cppcon-2017-trip-report"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1507013898.0, 
            "domain": "fluentcpp.com", 
            "id": "73ysjc", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73ysjc/sorting_with_the_stl_algorithms/", 
            "score": 13, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Sorting with the STL algorithms", 
            "url": "https://www.fluentcpp.com/2017/10/03/sorting-stl-algorithms/"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1506980577.0, 
            "domain": "youtu.be", 
            "id": "73vyyn", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/86seb-iZCnI?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/86seb-iZCnI/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Olivier Giroux \"Designing (New) C++ Hardware\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 3, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73vyyn/cppcon_2017_olivier_giroux_designing_new_c/", 
            "score": 29, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Olivier Giroux \"Designing (New) C++ Hardware\u201d", 
            "url": "https://youtu.be/86seb-iZCnI"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1506973235.0, 
            "domain": "youtu.be", 
            "id": "73v522", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/bSkpMdDe4g4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/bSkpMdDe4g4/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Matt Godbolt \u201cWhat Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73v522/cppcon_2017_matt_godbolt_what_has_my_compiler/", 
            "score": 28, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Matt Godbolt \"What Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid\"", 
            "url": "https://youtu.be/bSkpMdDe4g4"
        }, 
        {
            "author": "Masfo", 
            "created_utc": 1506972968.0, 
            "domain": "youtube.com", 
            "id": "73v3zm", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/bSkpMdDe4g4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/bSkpMdDe4g4/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Matt Godbolt \u201cWhat Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73v3zm/cppcon_2017_matt_godbolt_what_has_my_compiler/", 
            "score": 85, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Matt Godbolt - What Has My Compiler Done for Me Lately?", 
            "url": "https://www.youtube.com/watch?v=bSkpMdDe4g4"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1506964649.0, 
            "domain": "msdn.microsoft.com", 
            "id": "73u6kb", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 11, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73u6kb/from_algorithms_to_coroutines_in_c/", 
            "score": 12, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "From Algorithms to Coroutines in C++", 
            "url": "https://msdn.microsoft.com/en-us/magazine/mt826346"
        }, 
        {
            "author": "berium", 
            "created_utc": 1506953452.0, 
            "domain": "self.cpp", 
            "id": "73szjq", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 24, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73szjq/c_modules_introduction_and_guidelines/", 
            "score": 135, 
            "selftext": "Lately there's been a lot of [interest](https://www.reddit.com/r/cpp/comments/73mf6t/will_header_files_will_stop_existing_in_further/?ref=share&ref_source=link) (and [misconceptions](https://twitter.com/slurpsmadrips/status/913458948862128128)) about C++ Modules. I wanted to wait until the video for my CppCon talk on modules is out before publishing this, but there is really no reason to wait. So if you are interested in C++ Modules, I've written a [Practical Introduction](https://build2.org/build2/doc/build2-build-system-manual.xhtml#cxx-modules-intro), [Design Guidelines](https://build2.org/build2/doc/build2-build-system-manual.xhtml#cxx-modules-guidelines), as well as [How to Modularize Existing Codebases](https://build2.org/build2/doc/build2-build-system-manual.xhtml#cxx-modules-existing). This is essentially my talk with quite a bit more details and nuances.\n\nAlso happy to answer any questions.", 
            "subreddit": "cpp", 
            "title": "C++ Modules Introduction and Guidelines", 
            "url": "https://www.reddit.com/r/cpp/comments/73szjq/c_modules_introduction_and_guidelines/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506941107.0, 
            "domain": "kfsone.wordpress.com", 
            "id": "73s0zm", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73s0zm/cppcon_2017/", 
            "score": 11, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CPPCon 2017", 
            "url": "https://kfsone.wordpress.com/2017/10/01/cppcon-2017/"
        }, 
        {
            "author": "capn_bluebear", 
            "created_utc": 1506938512.0, 
            "domain": "self.cpp", 
            "id": "73rvce", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 13, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73rvce/can_is_detected_substitute_enable_ifis_same/", 
            "score": 7, 
            "selftext": "I always see `is_detected` used to check whether a certain type has a method or not, where it provides a much much cleaner syntax.\n\nWhat about checks like `std::enable_if<std::is_same<T, int>::value, int>::type` and stuff like that, can `is_detected` substitute that horror?\n\nedit: better said: in `is_detected<is_int, T>` how would you write `is_int`?\n\n", 
            "subreddit": "cpp", 
            "title": "Can is_detected substitute enable_if<is_same>?", 
            "url": "https://www.reddit.com/r/cpp/comments/73rvce/can_is_detected_substitute_enable_ifis_same/"
        }, 
        {
            "author": "-lq_pl-", 
            "created_utc": 1506936435.0, 
            "domain": "github.com", 
            "id": "73rr47", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 43, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73rr47/safely_store_extra_information_in_a_pointer/", 
            "score": 54, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Safely store extra information in a pointer variable", 
            "url": "https://github.com/HDembinski/stateful_pointer"
        }, 
        {
            "author": "GamedevGrover", 
            "created_utc": 1506903101.0, 
            "domain": "self.cpp", 
            "id": "73pdsa", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 14, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73pdsa/looking_for_resources_on_advanced_c_and/", 
            "score": 18, 
            "selftext": "Hey guys. I'm looking for good resources such as blogs and articles on advanced C++ material, especially multithreading and C++ 11 stuff regarding multithreading. However, would appreciate any resources on other stuff too. Thanks! And have a great weekend. :)\n\nEdit: Found this blog if anyone is looking for a quick read on various stuff in C++ for multithreading. https://baptiste-wicht.com/categories/c%2B%2B11-concurrency-tutorial.html", 
            "subreddit": "cpp", 
            "title": "Looking for resources on advanced C++ and multithreading", 
            "url": "https://www.reddit.com/r/cpp/comments/73pdsa/looking_for_resources_on_advanced_c_and/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506884448.0, 
            "domain": "web.cynd.net", 
            "id": "73njn2", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73njn2/cppcon_2017_trip_report/", 
            "score": 12, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017 Trip Report", 
            "url": "http://web.cynd.net/~willo/cppcon-2017-trip-report/"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506883724.0, 
            "domain": "bunnyladame.blogspot.no", 
            "id": "73ngyk", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 6, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73ngyk/a_beginners_guide_to_cppcon_2017/", 
            "score": 2, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "A Beginner's Guide to CPPCon 2017", 
            "url": "https://bunnyladame.blogspot.no/2017/09/a-beginners-guide-to-cppcon-2017.html"
        }, 
        {
            "author": "vormestrand", 
            "created_utc": 1506882826.0, 
            "domain": "elbeno.com", 
            "id": "73ndnn", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73ndnn/cppcon_2017_trip_report/", 
            "score": 26, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017 Trip Report", 
            "url": "http://www.elbeno.com/blog/?p=1542"
        }, 
        {
            "author": "dahitokiri", 
            "created_utc": 1506880362.0, 
            "domain": "youtu.be", 
            "id": "73n4cq", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "NWCPP", 
                    "author_url": "https://www.youtube.com/user/NWCPP", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/gmW6b0I_t5k?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/gmW6b0I_t5k/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon - Internet of Things Panel", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73n4cq/cppcon_internet_of_things_panel/", 
            "score": 5, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon - Internet of Things Panel", 
            "url": "https://youtu.be/gmW6b0I_t5k"
        }, 
        {
            "author": "Masfo", 
            "created_utc": 1506875823.0, 
            "domain": "youtube.com", 
            "id": "73mnk3", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "NWCPP", 
                    "author_url": "https://www.youtube.com/user/NWCPP", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/9RFYVbHRoLg?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/9RFYVbHRoLg/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon - Optimizing Code Speed and Space with Build Time Switches", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 5, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73mnk3/cppcon_optimizing_code_speed_and_space_with_build/", 
            "score": 42, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon - Optimizing Code Speed and Space with Build Time Switches", 
            "url": "https://www.youtube.com/watch?v=9RFYVbHRoLg&t=0s"
        }, 
        {
            "author": "PaulAvalos", 
            "created_utc": 1506873556.0, 
            "domain": "self.cpp", 
            "id": "73mf6t", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 71, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73mf6t/will_header_files_will_stop_existing_in_further/", 
            "score": 26, 
            "selftext": "I've heard modularization of the language will remove the need for header files", 
            "subreddit": "cpp", 
            "title": "Will header files will stop existing in further cpp iso versions?", 
            "url": "https://www.reddit.com/r/cpp/comments/73mf6t/will_header_files_will_stop_existing_in_further/"
        }, 
        {
            "author": "freshbanks3131", 
            "created_utc": 1506867666.0, 
            "domain": "self.cpp", 
            "id": "73lvhs", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 18, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73lvhs/searching_for_opensource_projects/", 
            "score": 10, 
            "selftext": "Hey guys I want to develop my coding skills by participating in open source projects. Do you maybe know some places where I can find interesting open source projects?", 
            "subreddit": "cpp", 
            "title": "Searching for Open-source projects", 
            "url": "https://www.reddit.com/r/cpp/comments/73lvhs/searching_for_opensource_projects/"
        }
    ], 
    "subreddit_creation_utc": 1211871110.0, 
    "subscribers": 55017, 
    "title": "C++", 
    "title_word_count_occurrences": {
        "c++": 18, 
        "deep learning": 1, 
        "github": 1, 
        "gnu": 1, 
        "intel": 2, 
        "scala": 1, 
        "tex": 1
    }, 
    "top_score_submissions": [
        {
            "author": "berium", 
            "created_utc": 1506953452.0, 
            "domain": "self.cpp", 
            "id": "73szjq", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 24, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73szjq/c_modules_introduction_and_guidelines/", 
            "score": 135, 
            "selftext": "Lately there's been a lot of [interest](https://www.reddit.com/r/cpp/comments/73mf6t/will_header_files_will_stop_existing_in_further/?ref=share&ref_source=link) (and [misconceptions](https://twitter.com/slurpsmadrips/status/913458948862128128)) about C++ Modules. I wanted to wait until the video for my CppCon talk on modules is out before publishing this, but there is really no reason to wait. So if you are interested in C++ Modules, I've written a [Practical Introduction](https://build2.org/build2/doc/build2-build-system-manual.xhtml#cxx-modules-intro), [Design Guidelines](https://build2.org/build2/doc/build2-build-system-manual.xhtml#cxx-modules-guidelines), as well as [How to Modularize Existing Codebases](https://build2.org/build2/doc/build2-build-system-manual.xhtml#cxx-modules-existing). This is essentially my talk with quite a bit more details and nuances.\n\nAlso happy to answer any questions.", 
            "subreddit": "cpp", 
            "title": "C++ Modules Introduction and Guidelines", 
            "url": "https://www.reddit.com/r/cpp/comments/73szjq/c_modules_introduction_and_guidelines/"
        }, 
        {
            "author": "mttd", 
            "created_utc": 1507410655.0, 
            "domain": "nullprogram.com", 
            "id": "74xii5", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 24, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74xii5/a_branchless_utf8_decoder/", 
            "score": 121, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "A Branchless UTF-8 Decoder", 
            "url": "http://nullprogram.com/blog/2017/10/06/"
        }, 
        {
            "author": "Masfo", 
            "created_utc": 1506972968.0, 
            "domain": "youtube.com", 
            "id": "73v3zm", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/bSkpMdDe4g4?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/bSkpMdDe4g4/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Matt Godbolt \u201cWhat Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 12, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/73v3zm/cppcon_2017_matt_godbolt_what_has_my_compiler/", 
            "score": 85, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Matt Godbolt - What Has My Compiler Done for Me Lately?", 
            "url": "https://www.youtube.com/watch?v=bSkpMdDe4g4"
        }, 
        {
            "author": "meetingcpp", 
            "created_utc": 1507294963.0, 
            "domain": "blog.qt.io", 
            "id": "74ngms", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 1, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74ngms/qt_creator_441_released_qt_blog/", 
            "score": 74, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "Qt Creator 4.4.1 released - Qt Blog", 
            "url": "http://blog.qt.io/blog/2017/10/06/qt-creator-4-4-1-released/"
        }, 
        {
            "author": "OCPetrus", 
            "created_utc": 1507220571.0, 
            "domain": "youtube.com", 
            "id": "74h21p", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": "cppcon", 
            "link_flair_text": "CppCon", 
            "media": {
                "oembed": {
                    "author_name": "CppCon", 
                    "author_url": "https://www.youtube.com/user/CppCon", 
                    "height": 338, 
                    "html": "<iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/PJwd4JLYJJY?feature=oembed\" frameborder=\"0\" allowfullscreen></iframe>", 
                    "provider_name": "YouTube", 
                    "provider_url": "https://www.youtube.com/", 
                    "thumbnail_height": 360, 
                    "thumbnail_url": "https://i.ytimg.com/vi/PJwd4JLYJJY/hqdefault.jpg", 
                    "thumbnail_width": 480, 
                    "title": "CppCon 2017: Ben Deane & Jason Turner \u201cconstexpr ALL the Things!\u201d", 
                    "type": "video", 
                    "version": "1.0", 
                    "width": 600
                }, 
                "type": "youtube.com"
            }, 
            "num_comments": 17, 
            "num_crossposts": 0, 
            "permalink": "/r/cpp/comments/74h21p/cppcon_2017_ben_deane_jason_turner_constexpr_all/", 
            "score": 74, 
            "selftext": "", 
            "subreddit": "cpp", 
            "title": "CppCon 2017: Ben Deane & Jason Turner \u201cconstexpr ALL the Things!\u201d", 
            "url": "https://www.youtube.com/watch?v=PJwd4JLYJJY"
        }
    ], 
    "total_submissions": 57, 
    "utc_of_data_collection_start": "2017-10-16 18:37:21"
}