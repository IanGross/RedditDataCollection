{
    "active_user_count": 10, 
    "advertiser_category": null, 
    "audience_target": "programming", 
    "avg_comment_num_per_submission": 2, 
    "avg_submission_score": 3, 
    "collection_range_end_unix_timestamp": 1507420800, 
    "collection_range_end_utc": "2017-10-08 00:00:00", 
    "collection_range_start_unix_timestamp": 1506816000, 
    "collection_range_start_utc": "2017-10-01 00:00:00", 
    "description": "Scheme Programming Language articles. \n\nScheme is one of the lingua franca of programming language theory (PLT) so PLT articles are also welcome!\n\nAlso see:\n\n* [/r/lisp](/r/lisp): LISP is Scheme's parent language\n* [/r/functionallang](/r/functionallang): Functional programming\n* [/r/functional](/r/functional): Same scope, but bigger\n* [/r/learnprogramming](/r/learnprogramming): Learn how to program!\n* [/r/PLT/](/r/PLT/): Programming Language Theory\n* [/r/ProgrammingLanguages](/r/ProgrammingLanguages)\n* [/r/types](/r/types): Type theory\n\nScheme implementations:\n\n* [/r/Racket](/r/Racket): Formerly known as PLT Scheme\n* [/r/vicarescheme](/r/vicarescheme): Vicare Scheme", 
    "display_name": "scheme", 
    "domain_occurrences": {
        "clojurecademy.com": 1, 
        "self.scheme": 1
    }, 
    "id": "2qhcm", 
    "num_external_website_posts": 1, 
    "num_text_posts": 1, 
    "public_description": "", 
    "submissions": [
        {
            "author": "VermillionAzure", 
            "created_utc": 1507247893.0, 
            "domain": "self.scheme", 
            "id": "74k03c", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/scheme/comments/74k03c/does_syntaxcase_allow_for_arbitrary_computation/", 
            "score": 6, 
            "selftext": "I was reading R6RS when I saw that `syntax-case`'s semantics wants you to trigger an evaluation step on the syntax object expression that it operates on before it pattern-matches using the cases.\n\nWhat is the extent of this computation? Does this require another full-on evaluation implementation complete with its own macro-expansion phase, if needed? Does this mean that syntax-case requires the tower of evaluators/expanders like Racket?\n\nAdditionally, is there a way in R6RS to alias `syntax-case` onto another identifier at compile-time like `sc`?", 
            "subreddit": "scheme", 
            "title": "Does `syntax-case` allow for arbitrary computation at compile-time?", 
            "url": "https://www.reddit.com/r/scheme/comments/74k03c/does_syntaxcase_allow_for_arbitrary_computation/"
        }, 
        {
            "author": "ertucetin", 
            "created_utc": 1507112795.0, 
            "domain": "clojurecademy.com", 
            "id": "7479ij", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/scheme/comments/7479ij/clojurecademy_learn_lispclojure/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "scheme", 
            "title": "Clojurecademy: Learn Lisp/Clojure Interactively(Hands-On)", 
            "url": "https://clojurecademy.com"
        }
    ], 
    "subreddit_creation_utc": 1204928196.0, 
    "subscribers": 4421, 
    "title": "Scheme Programming Language articles", 
    "title_word_count_occurrences": {
        "lisp": 1
    }, 
    "top_score_submissions": [
        {
            "author": "VermillionAzure", 
            "created_utc": 1507247893.0, 
            "domain": "self.scheme", 
            "id": "74k03c", 
            "is_reddit_media_domain": false, 
            "is_self": true, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 4, 
            "num_crossposts": 0, 
            "permalink": "/r/scheme/comments/74k03c/does_syntaxcase_allow_for_arbitrary_computation/", 
            "score": 6, 
            "selftext": "I was reading R6RS when I saw that `syntax-case`'s semantics wants you to trigger an evaluation step on the syntax object expression that it operates on before it pattern-matches using the cases.\n\nWhat is the extent of this computation? Does this require another full-on evaluation implementation complete with its own macro-expansion phase, if needed? Does this mean that syntax-case requires the tower of evaluators/expanders like Racket?\n\nAdditionally, is there a way in R6RS to alias `syntax-case` onto another identifier at compile-time like `sc`?", 
            "subreddit": "scheme", 
            "title": "Does `syntax-case` allow for arbitrary computation at compile-time?", 
            "url": "https://www.reddit.com/r/scheme/comments/74k03c/does_syntaxcase_allow_for_arbitrary_computation/"
        }, 
        {
            "author": "ertucetin", 
            "created_utc": 1507112795.0, 
            "domain": "clojurecademy.com", 
            "id": "7479ij", 
            "is_reddit_media_domain": false, 
            "is_self": false, 
            "is_video": false, 
            "link_flair_css_class": null, 
            "link_flair_text": null, 
            "media": null, 
            "num_comments": 0, 
            "num_crossposts": 0, 
            "permalink": "/r/scheme/comments/7479ij/clojurecademy_learn_lispclojure/", 
            "score": 0, 
            "selftext": "", 
            "subreddit": "scheme", 
            "title": "Clojurecademy: Learn Lisp/Clojure Interactively(Hands-On)", 
            "url": "https://clojurecademy.com"
        }
    ], 
    "total_submissions": 2, 
    "utc_of_data_collection_completion": "2017-10-17 18:48:57", 
    "utc_of_data_collection_start": "2017-10-17 18:48:57"
}